// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.13.0
// source: controller/xtra_db_cluster.proto

package controllerv1beta1

import (
	reflect "reflect"
	sync "sync"

	proto "github.com/golang/protobuf/proto"
	_ "github.com/mwitkow/go-proto-validators"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// XtraDBClusterState represents XtraDB cluster CR state.
type XtraDBClusterState int32

const (
	// XTRA_DB_CLUSTER_STATE_INVALID represents unknown state.
	XtraDBClusterState_XTRA_DB_CLUSTER_STATE_INVALID XtraDBClusterState = 0
	// XTRA_DB_CLUSTER_STATE_CHANGING represents a cluster being changed (initializing).
	XtraDBClusterState_XTRA_DB_CLUSTER_STATE_CHANGING XtraDBClusterState = 1
	// XTRA_DB_CLUSTER_STATE_READY represents a cluster without pending changes (ready).
	XtraDBClusterState_XTRA_DB_CLUSTER_STATE_READY XtraDBClusterState = 2
	// XTRA_DB_CLUSTER_STATE_FAILED represents a failed cluster (error).
	XtraDBClusterState_XTRA_DB_CLUSTER_STATE_FAILED XtraDBClusterState = 3
	// XTRA_DB_CLUSTER_STATE_DELETING represents a cluster being deleting.
	XtraDBClusterState_XTRA_DB_CLUSTER_STATE_DELETING XtraDBClusterState = 4
	// XTRA_DB_CLUSTER_STATE_PAUSED represents a paused cluster state.
	XtraDBClusterState_XTRA_DB_CLUSTER_STATE_PAUSED XtraDBClusterState = 5
)

// Enum value maps for XtraDBClusterState.
var (
	XtraDBClusterState_name = map[int32]string{
		0: "XTRA_DB_CLUSTER_STATE_INVALID",
		1: "XTRA_DB_CLUSTER_STATE_CHANGING",
		2: "XTRA_DB_CLUSTER_STATE_READY",
		3: "XTRA_DB_CLUSTER_STATE_FAILED",
		4: "XTRA_DB_CLUSTER_STATE_DELETING",
		5: "XTRA_DB_CLUSTER_STATE_PAUSED",
	}
	XtraDBClusterState_value = map[string]int32{
		"XTRA_DB_CLUSTER_STATE_INVALID":  0,
		"XTRA_DB_CLUSTER_STATE_CHANGING": 1,
		"XTRA_DB_CLUSTER_STATE_READY":    2,
		"XTRA_DB_CLUSTER_STATE_FAILED":   3,
		"XTRA_DB_CLUSTER_STATE_DELETING": 4,
		"XTRA_DB_CLUSTER_STATE_PAUSED":   5,
	}
)

func (x XtraDBClusterState) Enum() *XtraDBClusterState {
	p := new(XtraDBClusterState)
	*p = x
	return p
}

func (x XtraDBClusterState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (XtraDBClusterState) Descriptor() protoreflect.EnumDescriptor {
	return file_controller_xtra_db_cluster_proto_enumTypes[0].Descriptor()
}

func (XtraDBClusterState) Type() protoreflect.EnumType {
	return &file_controller_xtra_db_cluster_proto_enumTypes[0]
}

func (x XtraDBClusterState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use XtraDBClusterState.Descriptor instead.
func (XtraDBClusterState) EnumDescriptor() ([]byte, []int) {
	return file_controller_xtra_db_cluster_proto_rawDescGZIP(), []int{0}
}

// XtraDBBackupState represents XtraDB backup CR state.
type XtraDBBackupState int32

const (
	// XTRA_DB_BACKUP_STATE_INVALID represents unknown state.
	XtraDBBackupState_XTRA_DB_BACKUP_STATE_INVALID XtraDBBackupState = 0
	// XTRA_DB_BACKUP_STATE_RUNNING represents running backup (Starting, Running, FIXME check it).
	XtraDBBackupState_XTRA_DB_BACKUP_STATE_RUNNING XtraDBBackupState = 1
	// XTRA_DB_BACKUP_STATE_SUCCEEDED represents succeeded backup (Succeeded, FIXME check it).
	XtraDBBackupState_XTRA_DB_BACKUP_STATE_SUCCEEDED XtraDBBackupState = 2
	// XTRA_DB_BACKUP_STATE_FAILED represents failed backup (Failed, FIXME check it).
	XtraDBBackupState_XTRA_DB_BACKUP_STATE_FAILED XtraDBBackupState = 3
)

// Enum value maps for XtraDBBackupState.
var (
	XtraDBBackupState_name = map[int32]string{
		0: "XTRA_DB_BACKUP_STATE_INVALID",
		1: "XTRA_DB_BACKUP_STATE_RUNNING",
		2: "XTRA_DB_BACKUP_STATE_SUCCEEDED",
		3: "XTRA_DB_BACKUP_STATE_FAILED",
	}
	XtraDBBackupState_value = map[string]int32{
		"XTRA_DB_BACKUP_STATE_INVALID":   0,
		"XTRA_DB_BACKUP_STATE_RUNNING":   1,
		"XTRA_DB_BACKUP_STATE_SUCCEEDED": 2,
		"XTRA_DB_BACKUP_STATE_FAILED":    3,
	}
)

func (x XtraDBBackupState) Enum() *XtraDBBackupState {
	p := new(XtraDBBackupState)
	*p = x
	return p
}

func (x XtraDBBackupState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (XtraDBBackupState) Descriptor() protoreflect.EnumDescriptor {
	return file_controller_xtra_db_cluster_proto_enumTypes[1].Descriptor()
}

func (XtraDBBackupState) Type() protoreflect.EnumType {
	return &file_controller_xtra_db_cluster_proto_enumTypes[1]
}

func (x XtraDBBackupState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use XtraDBBackupState.Descriptor instead.
func (XtraDBBackupState) EnumDescriptor() ([]byte, []int) {
	return file_controller_xtra_db_cluster_proto_rawDescGZIP(), []int{1}
}

// XtraDBClusterParams represents XtraDB cluster parameters that can be updated.
type XtraDBClusterParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Cluster size.
	ClusterSize int32 `protobuf:"varint,1,opt,name=cluster_size,json=clusterSize,proto3" json:"cluster_size,omitempty"`
	// PXC container parameters.
	Pxc *XtraDBClusterParams_PXC `protobuf:"bytes,2,opt,name=pxc,proto3" json:"pxc,omitempty"`
	// NOTE: Only one of fields proxysql or haproxy has to be set, we check this in the code.
	// ProxySQL container parameters.
	Proxysql *XtraDBClusterParams_ProxySQL `protobuf:"bytes,3,opt,name=proxysql,proto3" json:"proxysql,omitempty"`
	// HAProxy container parameters.
	Haproxy *XtraDBClusterParams_HAProxy `protobuf:"bytes,4,opt,name=haproxy,proto3" json:"haproxy,omitempty"`
	// Version service URL.
	VersionServiceUrl string `protobuf:"bytes,5,opt,name=version_service_url,json=versionServiceUrl,proto3" json:"version_service_url,omitempty"`
}

func (x *XtraDBClusterParams) Reset() {
	*x = XtraDBClusterParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_xtra_db_cluster_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XtraDBClusterParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XtraDBClusterParams) ProtoMessage() {}

func (x *XtraDBClusterParams) ProtoReflect() protoreflect.Message {
	mi := &file_controller_xtra_db_cluster_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XtraDBClusterParams.ProtoReflect.Descriptor instead.
func (*XtraDBClusterParams) Descriptor() ([]byte, []int) {
	return file_controller_xtra_db_cluster_proto_rawDescGZIP(), []int{0}
}

func (x *XtraDBClusterParams) GetClusterSize() int32 {
	if x != nil {
		return x.ClusterSize
	}
	return 0
}

func (x *XtraDBClusterParams) GetPxc() *XtraDBClusterParams_PXC {
	if x != nil {
		return x.Pxc
	}
	return nil
}

func (x *XtraDBClusterParams) GetProxysql() *XtraDBClusterParams_ProxySQL {
	if x != nil {
		return x.Proxysql
	}
	return nil
}

func (x *XtraDBClusterParams) GetHaproxy() *XtraDBClusterParams_HAProxy {
	if x != nil {
		return x.Haproxy
	}
	return nil
}

func (x *XtraDBClusterParams) GetVersionServiceUrl() string {
	if x != nil {
		return x.VersionServiceUrl
	}
	return ""
}

// XtraDBCredentials is cluster connection credentials.
type XtraDBCredentials struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PXC host.
	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	// PXC port.
	Port int32 `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	// PXC username.
	Username string `protobuf:"bytes,3,opt,name=username,proto3" json:"username,omitempty"`
	// PXC password.
	Password string `protobuf:"bytes,4,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *XtraDBCredentials) Reset() {
	*x = XtraDBCredentials{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_xtra_db_cluster_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XtraDBCredentials) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XtraDBCredentials) ProtoMessage() {}

func (x *XtraDBCredentials) ProtoReflect() protoreflect.Message {
	mi := &file_controller_xtra_db_cluster_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XtraDBCredentials.ProtoReflect.Descriptor instead.
func (*XtraDBCredentials) Descriptor() ([]byte, []int) {
	return file_controller_xtra_db_cluster_proto_rawDescGZIP(), []int{1}
}

func (x *XtraDBCredentials) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *XtraDBCredentials) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *XtraDBCredentials) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *XtraDBCredentials) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

// PXC container parameters.
type XtraDBClusterParams_PXC struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Docker image used for PXC.
	Image string `protobuf:"bytes,3,opt,name=image,proto3" json:"image,omitempty"`
	// Requested compute resources.
	ComputeResources *ComputeResources `protobuf:"bytes,1,opt,name=compute_resources,json=computeResources,proto3" json:"compute_resources,omitempty"`
	// Disk size in bytes.
	DiskSize int64 `protobuf:"varint,2,opt,name=disk_size,json=diskSize,proto3" json:"disk_size,omitempty"`
}

func (x *XtraDBClusterParams_PXC) Reset() {
	*x = XtraDBClusterParams_PXC{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_xtra_db_cluster_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XtraDBClusterParams_PXC) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XtraDBClusterParams_PXC) ProtoMessage() {}

func (x *XtraDBClusterParams_PXC) ProtoReflect() protoreflect.Message {
	mi := &file_controller_xtra_db_cluster_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XtraDBClusterParams_PXC.ProtoReflect.Descriptor instead.
func (*XtraDBClusterParams_PXC) Descriptor() ([]byte, []int) {
	return file_controller_xtra_db_cluster_proto_rawDescGZIP(), []int{0, 0}
}

func (x *XtraDBClusterParams_PXC) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *XtraDBClusterParams_PXC) GetComputeResources() *ComputeResources {
	if x != nil {
		return x.ComputeResources
	}
	return nil
}

func (x *XtraDBClusterParams_PXC) GetDiskSize() int64 {
	if x != nil {
		return x.DiskSize
	}
	return 0
}

// ProxySQL container parameters.
type XtraDBClusterParams_ProxySQL struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Docker image used for ProxySQL.
	Image string `protobuf:"bytes,3,opt,name=image,proto3" json:"image,omitempty"`
	// Requested compute resources.
	ComputeResources *ComputeResources `protobuf:"bytes,1,opt,name=compute_resources,json=computeResources,proto3" json:"compute_resources,omitempty"`
	// Disk size in bytes.
	DiskSize int64 `protobuf:"varint,2,opt,name=disk_size,json=diskSize,proto3" json:"disk_size,omitempty"`
}

func (x *XtraDBClusterParams_ProxySQL) Reset() {
	*x = XtraDBClusterParams_ProxySQL{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_xtra_db_cluster_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XtraDBClusterParams_ProxySQL) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XtraDBClusterParams_ProxySQL) ProtoMessage() {}

func (x *XtraDBClusterParams_ProxySQL) ProtoReflect() protoreflect.Message {
	mi := &file_controller_xtra_db_cluster_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XtraDBClusterParams_ProxySQL.ProtoReflect.Descriptor instead.
func (*XtraDBClusterParams_ProxySQL) Descriptor() ([]byte, []int) {
	return file_controller_xtra_db_cluster_proto_rawDescGZIP(), []int{0, 1}
}

func (x *XtraDBClusterParams_ProxySQL) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *XtraDBClusterParams_ProxySQL) GetComputeResources() *ComputeResources {
	if x != nil {
		return x.ComputeResources
	}
	return nil
}

func (x *XtraDBClusterParams_ProxySQL) GetDiskSize() int64 {
	if x != nil {
		return x.DiskSize
	}
	return 0
}

// HAProxy container parameters.
// NOTE: HAProxy does not need disk size as ProxySQL because the container does not require it.
type XtraDBClusterParams_HAProxy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Docker image used for HAProxy.
	Image string `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"`
	// Requested compute resources.
	ComputeResources *ComputeResources `protobuf:"bytes,2,opt,name=compute_resources,json=computeResources,proto3" json:"compute_resources,omitempty"`
}

func (x *XtraDBClusterParams_HAProxy) Reset() {
	*x = XtraDBClusterParams_HAProxy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_xtra_db_cluster_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XtraDBClusterParams_HAProxy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XtraDBClusterParams_HAProxy) ProtoMessage() {}

func (x *XtraDBClusterParams_HAProxy) ProtoReflect() protoreflect.Message {
	mi := &file_controller_xtra_db_cluster_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XtraDBClusterParams_HAProxy.ProtoReflect.Descriptor instead.
func (*XtraDBClusterParams_HAProxy) Descriptor() ([]byte, []int) {
	return file_controller_xtra_db_cluster_proto_rawDescGZIP(), []int{0, 2}
}

func (x *XtraDBClusterParams_HAProxy) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *XtraDBClusterParams_HAProxy) GetComputeResources() *ComputeResources {
	if x != nil {
		return x.ComputeResources
	}
	return nil
}

var File_controller_xtra_db_cluster_proto protoreflect.FileDescriptor

var file_controller_xtra_db_cluster_proto_rawDesc = []byte{
	0x0a, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2f, 0x78, 0x74, 0x72,
	0x61, 0x5f, 0x64, 0x62, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x29, 0x70, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x61, 0x2e, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x1a, 0x17, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x36, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x6d, 0x77, 0x69, 0x74, 0x6b, 0x6f, 0x77, 0x2f, 0x67, 0x6f, 0x2d, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x90,
	0x07, 0x0a, 0x13, 0x58, 0x74, 0x72, 0x61, 0x44, 0x42, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x29, 0x0a, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x06, 0xe2, 0xdf,
	0x1f, 0x02, 0x10, 0x00, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x5c, 0x0a, 0x03, 0x70, 0x78, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42,
	0x2e, 0x70, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x61, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x58, 0x74, 0x72, 0x61, 0x44,
	0x42, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x2e, 0x50,
	0x58, 0x43, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x20, 0x01, 0x52, 0x03, 0x70, 0x78, 0x63, 0x12,
	0x63, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x73, 0x71, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x47, 0x2e, 0x70, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x61, 0x2e, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x58, 0x74,
	0x72, 0x61, 0x44, 0x42, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x53, 0x51, 0x4c, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x78,
	0x79, 0x73, 0x71, 0x6c, 0x12, 0x60, 0x0a, 0x07, 0x68, 0x61, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x70, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x61, 0x2e,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2e, 0x58, 0x74, 0x72, 0x61, 0x44, 0x42, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x2e, 0x48, 0x41, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x52, 0x07, 0x68,
	0x61, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x2e, 0x0a, 0x13, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x55, 0x72, 0x6c, 0x1a, 0xb2, 0x01, 0x0a, 0x03, 0x50, 0x58, 0x43, 0x12, 0x14,
	0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x12, 0x70, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x5f,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3b, 0x2e, 0x70, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x61, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70,
	0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x42, 0x06, 0xe2, 0xdf,
	0x1f, 0x02, 0x20, 0x01, 0x52, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x09, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x10,
	0x00, 0x52, 0x08, 0x64, 0x69, 0x73, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x1a, 0xb7, 0x01, 0x0a, 0x08,
	0x50, 0x72, 0x6f, 0x78, 0x79, 0x53, 0x51, 0x4c, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x70,
	0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x70, 0x65, 0x72, 0x63,
	0x6f, 0x6e, 0x61, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x64, 0x62, 0x61,
	0x61, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x20, 0x01, 0x52, 0x10,
	0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x12, 0x23, 0x0a, 0x09, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x10, 0x00, 0x52, 0x08, 0x64, 0x69, 0x73,
	0x6b, 0x53, 0x69, 0x7a, 0x65, 0x1a, 0x89, 0x01, 0x0a, 0x07, 0x48, 0x41, 0x50, 0x72, 0x6f, 0x78,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x68, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x70, 0x75,
	0x74, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x70, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x61, 0x2e, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43,
	0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52,
	0x10, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x22, 0x73, 0x0a, 0x11, 0x58, 0x74, 0x72, 0x61, 0x44, 0x42, 0x43, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f,
	0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x2a, 0xe4, 0x01, 0x0a, 0x12, 0x58, 0x74, 0x72, 0x61, 0x44,
	0x42, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a,
	0x1d, 0x58, 0x54, 0x52, 0x41, 0x5f, 0x44, 0x42, 0x5f, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00,
	0x12, 0x22, 0x0a, 0x1e, 0x58, 0x54, 0x52, 0x41, 0x5f, 0x44, 0x42, 0x5f, 0x43, 0x4c, 0x55, 0x53,
	0x54, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x49,
	0x4e, 0x47, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x58, 0x54, 0x52, 0x41, 0x5f, 0x44, 0x42, 0x5f,
	0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x45,
	0x41, 0x44, 0x59, 0x10, 0x02, 0x12, 0x20, 0x0a, 0x1c, 0x58, 0x54, 0x52, 0x41, 0x5f, 0x44, 0x42,
	0x5f, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x46,
	0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x12, 0x22, 0x0a, 0x1e, 0x58, 0x54, 0x52, 0x41, 0x5f,
	0x44, 0x42, 0x5f, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x12, 0x20, 0x0a, 0x1c, 0x58,
	0x54, 0x52, 0x41, 0x5f, 0x44, 0x42, 0x5f, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x41, 0x55, 0x53, 0x45, 0x44, 0x10, 0x05, 0x2a, 0x9c, 0x01,
	0x0a, 0x11, 0x58, 0x74, 0x72, 0x61, 0x44, 0x42, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x1c, 0x58, 0x54, 0x52, 0x41, 0x5f, 0x44, 0x42, 0x5f, 0x42,
	0x41, 0x43, 0x4b, 0x55, 0x50, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c, 0x58, 0x54, 0x52, 0x41, 0x5f, 0x44, 0x42,
	0x5f, 0x42, 0x41, 0x43, 0x4b, 0x55, 0x50, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x55,
	0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x58, 0x54, 0x52, 0x41, 0x5f,
	0x44, 0x42, 0x5f, 0x42, 0x41, 0x43, 0x4b, 0x55, 0x50, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x53, 0x55, 0x43, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0x02, 0x12, 0x1f, 0x0a, 0x1b, 0x58,
	0x54, 0x52, 0x41, 0x5f, 0x44, 0x42, 0x5f, 0x42, 0x41, 0x43, 0x4b, 0x55, 0x50, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x42, 0x1e, 0x5a, 0x1c,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x3b, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_controller_xtra_db_cluster_proto_rawDescOnce sync.Once
	file_controller_xtra_db_cluster_proto_rawDescData = file_controller_xtra_db_cluster_proto_rawDesc
)

func file_controller_xtra_db_cluster_proto_rawDescGZIP() []byte {
	file_controller_xtra_db_cluster_proto_rawDescOnce.Do(func() {
		file_controller_xtra_db_cluster_proto_rawDescData = protoimpl.X.CompressGZIP(file_controller_xtra_db_cluster_proto_rawDescData)
	})
	return file_controller_xtra_db_cluster_proto_rawDescData
}

var file_controller_xtra_db_cluster_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_controller_xtra_db_cluster_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_controller_xtra_db_cluster_proto_goTypes = []interface{}{
	(XtraDBClusterState)(0),              // 0: percona.platform.dbaas.controller.v1beta1.XtraDBClusterState
	(XtraDBBackupState)(0),               // 1: percona.platform.dbaas.controller.v1beta1.XtraDBBackupState
	(*XtraDBClusterParams)(nil),          // 2: percona.platform.dbaas.controller.v1beta1.XtraDBClusterParams
	(*XtraDBCredentials)(nil),            // 3: percona.platform.dbaas.controller.v1beta1.XtraDBCredentials
	(*XtraDBClusterParams_PXC)(nil),      // 4: percona.platform.dbaas.controller.v1beta1.XtraDBClusterParams.PXC
	(*XtraDBClusterParams_ProxySQL)(nil), // 5: percona.platform.dbaas.controller.v1beta1.XtraDBClusterParams.ProxySQL
	(*XtraDBClusterParams_HAProxy)(nil),  // 6: percona.platform.dbaas.controller.v1beta1.XtraDBClusterParams.HAProxy
	(*ComputeResources)(nil),             // 7: percona.platform.dbaas.controller.v1beta1.ComputeResources
}
var file_controller_xtra_db_cluster_proto_depIdxs = []int32{
	4, // 0: percona.platform.dbaas.controller.v1beta1.XtraDBClusterParams.pxc:type_name -> percona.platform.dbaas.controller.v1beta1.XtraDBClusterParams.PXC
	5, // 1: percona.platform.dbaas.controller.v1beta1.XtraDBClusterParams.proxysql:type_name -> percona.platform.dbaas.controller.v1beta1.XtraDBClusterParams.ProxySQL
	6, // 2: percona.platform.dbaas.controller.v1beta1.XtraDBClusterParams.haproxy:type_name -> percona.platform.dbaas.controller.v1beta1.XtraDBClusterParams.HAProxy
	7, // 3: percona.platform.dbaas.controller.v1beta1.XtraDBClusterParams.PXC.compute_resources:type_name -> percona.platform.dbaas.controller.v1beta1.ComputeResources
	7, // 4: percona.platform.dbaas.controller.v1beta1.XtraDBClusterParams.ProxySQL.compute_resources:type_name -> percona.platform.dbaas.controller.v1beta1.ComputeResources
	7, // 5: percona.platform.dbaas.controller.v1beta1.XtraDBClusterParams.HAProxy.compute_resources:type_name -> percona.platform.dbaas.controller.v1beta1.ComputeResources
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_controller_xtra_db_cluster_proto_init() }
func file_controller_xtra_db_cluster_proto_init() {
	if File_controller_xtra_db_cluster_proto != nil {
		return
	}
	file_controller_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_controller_xtra_db_cluster_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*XtraDBClusterParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_xtra_db_cluster_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*XtraDBCredentials); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_xtra_db_cluster_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*XtraDBClusterParams_PXC); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_xtra_db_cluster_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*XtraDBClusterParams_ProxySQL); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_xtra_db_cluster_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*XtraDBClusterParams_HAProxy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_controller_xtra_db_cluster_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_controller_xtra_db_cluster_proto_goTypes,
		DependencyIndexes: file_controller_xtra_db_cluster_proto_depIdxs,
		EnumInfos:         file_controller_xtra_db_cluster_proto_enumTypes,
		MessageInfos:      file_controller_xtra_db_cluster_proto_msgTypes,
	}.Build()
	File_controller_xtra_db_cluster_proto = out.File
	file_controller_xtra_db_cluster_proto_rawDesc = nil
	file_controller_xtra_db_cluster_proto_goTypes = nil
	file_controller_xtra_db_cluster_proto_depIdxs = nil
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.13.0
// source: controller/psmdb_cluster_api.proto

package controllerv1beta1

import (
	context "context"
	reflect "reflect"
	sync "sync"

	proto "github.com/golang/protobuf/proto"
	_ "github.com/mwitkow/go-proto-validators"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type ListPSMDBClustersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Kubernetes auth.
	KubeAuth *KubeAuth `protobuf:"bytes,1,opt,name=kube_auth,json=kubeAuth,proto3" json:"kube_auth,omitempty"`
}

func (x *ListPSMDBClustersRequest) Reset() {
	*x = ListPSMDBClustersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_psmdb_cluster_api_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPSMDBClustersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPSMDBClustersRequest) ProtoMessage() {}

func (x *ListPSMDBClustersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_controller_psmdb_cluster_api_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPSMDBClustersRequest.ProtoReflect.Descriptor instead.
func (*ListPSMDBClustersRequest) Descriptor() ([]byte, []int) {
	return file_controller_psmdb_cluster_api_proto_rawDescGZIP(), []int{0}
}

func (x *ListPSMDBClustersRequest) GetKubeAuth() *KubeAuth {
	if x != nil {
		return x.KubeAuth
	}
	return nil
}

type ListPSMDBClustersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PSMDB clusters information.
	Clusters []*PSMDBCluster `protobuf:"bytes,1,rep,name=clusters,proto3" json:"clusters,omitempty"`
}

func (x *ListPSMDBClustersResponse) Reset() {
	*x = ListPSMDBClustersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_psmdb_cluster_api_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPSMDBClustersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPSMDBClustersResponse) ProtoMessage() {}

func (x *ListPSMDBClustersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_controller_psmdb_cluster_api_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPSMDBClustersResponse.ProtoReflect.Descriptor instead.
func (*ListPSMDBClustersResponse) Descriptor() ([]byte, []int) {
	return file_controller_psmdb_cluster_api_proto_rawDescGZIP(), []int{1}
}

func (x *ListPSMDBClustersResponse) GetClusters() []*PSMDBCluster {
	if x != nil {
		return x.Clusters
	}
	return nil
}

type GetPSMDBClusterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Kubernetes auth.
	KubeAuth *KubeAuth `protobuf:"bytes,1,opt,name=kube_auth,json=kubeAuth,proto3" json:"kube_auth,omitempty"`
	// Cluster name.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetPSMDBClusterRequest) Reset() {
	*x = GetPSMDBClusterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_psmdb_cluster_api_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPSMDBClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPSMDBClusterRequest) ProtoMessage() {}

func (x *GetPSMDBClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_controller_psmdb_cluster_api_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPSMDBClusterRequest.ProtoReflect.Descriptor instead.
func (*GetPSMDBClusterRequest) Descriptor() ([]byte, []int) {
	return file_controller_psmdb_cluster_api_proto_rawDescGZIP(), []int{2}
}

func (x *GetPSMDBClusterRequest) GetKubeAuth() *KubeAuth {
	if x != nil {
		return x.KubeAuth
	}
	return nil
}

func (x *GetPSMDBClusterRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetPSMDBClusterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PSMDB cluster information.
	Cluster *PSMDBCluster `protobuf:"bytes,1,opt,name=cluster,proto3" json:"cluster,omitempty"`
}

func (x *GetPSMDBClusterResponse) Reset() {
	*x = GetPSMDBClusterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_psmdb_cluster_api_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPSMDBClusterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPSMDBClusterResponse) ProtoMessage() {}

func (x *GetPSMDBClusterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_controller_psmdb_cluster_api_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPSMDBClusterResponse.ProtoReflect.Descriptor instead.
func (*GetPSMDBClusterResponse) Descriptor() ([]byte, []int) {
	return file_controller_psmdb_cluster_api_proto_rawDescGZIP(), []int{3}
}

func (x *GetPSMDBClusterResponse) GetCluster() *PSMDBCluster {
	if x != nil {
		return x.Cluster
	}
	return nil
}

type GetPSMDBClusterCredentialsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Kubernetes auth.
	KubeAuth *KubeAuth `protobuf:"bytes,1,opt,name=kube_auth,json=kubeAuth,proto3" json:"kube_auth,omitempty"`
	// Cluster name.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetPSMDBClusterCredentialsRequest) Reset() {
	*x = GetPSMDBClusterCredentialsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_psmdb_cluster_api_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPSMDBClusterCredentialsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPSMDBClusterCredentialsRequest) ProtoMessage() {}

func (x *GetPSMDBClusterCredentialsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_controller_psmdb_cluster_api_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPSMDBClusterCredentialsRequest.ProtoReflect.Descriptor instead.
func (*GetPSMDBClusterCredentialsRequest) Descriptor() ([]byte, []int) {
	return file_controller_psmdb_cluster_api_proto_rawDescGZIP(), []int{4}
}

func (x *GetPSMDBClusterCredentialsRequest) GetKubeAuth() *KubeAuth {
	if x != nil {
		return x.KubeAuth
	}
	return nil
}

func (x *GetPSMDBClusterCredentialsRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetPSMDBClusterCredentialsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Cluster hostname and credentials.
	Credentials *PSMDBCredentials `protobuf:"bytes,1,opt,name=credentials,proto3" json:"credentials,omitempty"`
}

func (x *GetPSMDBClusterCredentialsResponse) Reset() {
	*x = GetPSMDBClusterCredentialsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_psmdb_cluster_api_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPSMDBClusterCredentialsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPSMDBClusterCredentialsResponse) ProtoMessage() {}

func (x *GetPSMDBClusterCredentialsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_controller_psmdb_cluster_api_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPSMDBClusterCredentialsResponse.ProtoReflect.Descriptor instead.
func (*GetPSMDBClusterCredentialsResponse) Descriptor() ([]byte, []int) {
	return file_controller_psmdb_cluster_api_proto_rawDescGZIP(), []int{5}
}

func (x *GetPSMDBClusterCredentialsResponse) GetCredentials() *PSMDBCredentials {
	if x != nil {
		return x.Credentials
	}
	return nil
}

type CreatePSMDBClusterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Kubernetes auth.
	KubeAuth *KubeAuth `protobuf:"bytes,1,opt,name=kube_auth,json=kubeAuth,proto3" json:"kube_auth,omitempty"`
	// Cluster name.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Cluster parameters.
	Params *PSMDBClusterParams `protobuf:"bytes,3,opt,name=params,proto3" json:"params,omitempty"`
	// PMM params. If nil do not turn on monitoring.
	Pmm *PMMParams `protobuf:"bytes,5,opt,name=pmm,proto3" json:"pmm,omitempty"`
	// Make DB cluster accessible outside of K8s cluster.
	Expose bool `protobuf:"varint,6,opt,name=expose,proto3" json:"expose,omitempty"`
}

func (x *CreatePSMDBClusterRequest) Reset() {
	*x = CreatePSMDBClusterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_psmdb_cluster_api_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePSMDBClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePSMDBClusterRequest) ProtoMessage() {}

func (x *CreatePSMDBClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_controller_psmdb_cluster_api_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePSMDBClusterRequest.ProtoReflect.Descriptor instead.
func (*CreatePSMDBClusterRequest) Descriptor() ([]byte, []int) {
	return file_controller_psmdb_cluster_api_proto_rawDescGZIP(), []int{6}
}

func (x *CreatePSMDBClusterRequest) GetKubeAuth() *KubeAuth {
	if x != nil {
		return x.KubeAuth
	}
	return nil
}

func (x *CreatePSMDBClusterRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreatePSMDBClusterRequest) GetParams() *PSMDBClusterParams {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *CreatePSMDBClusterRequest) GetPmm() *PMMParams {
	if x != nil {
		return x.Pmm
	}
	return nil
}

func (x *CreatePSMDBClusterRequest) GetExpose() bool {
	if x != nil {
		return x.Expose
	}
	return false
}

type CreatePSMDBClusterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreatePSMDBClusterResponse) Reset() {
	*x = CreatePSMDBClusterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_psmdb_cluster_api_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePSMDBClusterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePSMDBClusterResponse) ProtoMessage() {}

func (x *CreatePSMDBClusterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_controller_psmdb_cluster_api_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePSMDBClusterResponse.ProtoReflect.Descriptor instead.
func (*CreatePSMDBClusterResponse) Descriptor() ([]byte, []int) {
	return file_controller_psmdb_cluster_api_proto_rawDescGZIP(), []int{7}
}

type UpdatePSMDBClusterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Kubernetes auth.
	KubeAuth *KubeAuth `protobuf:"bytes,1,opt,name=kube_auth,json=kubeAuth,proto3" json:"kube_auth,omitempty"`
	// Cluster name.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Cluster parameters.
	Params *UpdatePSMDBClusterRequest_UpdatePSMDBClusterParams `protobuf:"bytes,3,opt,name=params,proto3" json:"params,omitempty"`
}

func (x *UpdatePSMDBClusterRequest) Reset() {
	*x = UpdatePSMDBClusterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_psmdb_cluster_api_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePSMDBClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePSMDBClusterRequest) ProtoMessage() {}

func (x *UpdatePSMDBClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_controller_psmdb_cluster_api_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePSMDBClusterRequest.ProtoReflect.Descriptor instead.
func (*UpdatePSMDBClusterRequest) Descriptor() ([]byte, []int) {
	return file_controller_psmdb_cluster_api_proto_rawDescGZIP(), []int{8}
}

func (x *UpdatePSMDBClusterRequest) GetKubeAuth() *KubeAuth {
	if x != nil {
		return x.KubeAuth
	}
	return nil
}

func (x *UpdatePSMDBClusterRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdatePSMDBClusterRequest) GetParams() *UpdatePSMDBClusterRequest_UpdatePSMDBClusterParams {
	if x != nil {
		return x.Params
	}
	return nil
}

type UpdatePSMDBClusterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdatePSMDBClusterResponse) Reset() {
	*x = UpdatePSMDBClusterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_psmdb_cluster_api_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePSMDBClusterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePSMDBClusterResponse) ProtoMessage() {}

func (x *UpdatePSMDBClusterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_controller_psmdb_cluster_api_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePSMDBClusterResponse.ProtoReflect.Descriptor instead.
func (*UpdatePSMDBClusterResponse) Descriptor() ([]byte, []int) {
	return file_controller_psmdb_cluster_api_proto_rawDescGZIP(), []int{9}
}

type DeletePSMDBClusterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Kubernetes auth.
	KubeAuth *KubeAuth `protobuf:"bytes,1,opt,name=kube_auth,json=kubeAuth,proto3" json:"kube_auth,omitempty"`
	// Cluster name.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeletePSMDBClusterRequest) Reset() {
	*x = DeletePSMDBClusterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_psmdb_cluster_api_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePSMDBClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePSMDBClusterRequest) ProtoMessage() {}

func (x *DeletePSMDBClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_controller_psmdb_cluster_api_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePSMDBClusterRequest.ProtoReflect.Descriptor instead.
func (*DeletePSMDBClusterRequest) Descriptor() ([]byte, []int) {
	return file_controller_psmdb_cluster_api_proto_rawDescGZIP(), []int{10}
}

func (x *DeletePSMDBClusterRequest) GetKubeAuth() *KubeAuth {
	if x != nil {
		return x.KubeAuth
	}
	return nil
}

func (x *DeletePSMDBClusterRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type DeletePSMDBClusterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeletePSMDBClusterResponse) Reset() {
	*x = DeletePSMDBClusterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_psmdb_cluster_api_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePSMDBClusterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePSMDBClusterResponse) ProtoMessage() {}

func (x *DeletePSMDBClusterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_controller_psmdb_cluster_api_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePSMDBClusterResponse.ProtoReflect.Descriptor instead.
func (*DeletePSMDBClusterResponse) Descriptor() ([]byte, []int) {
	return file_controller_psmdb_cluster_api_proto_rawDescGZIP(), []int{11}
}

type RestartPSMDBClusterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Kubernetes auth.
	KubeAuth *KubeAuth `protobuf:"bytes,1,opt,name=kube_auth,json=kubeAuth,proto3" json:"kube_auth,omitempty"`
	// Cluster name.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *RestartPSMDBClusterRequest) Reset() {
	*x = RestartPSMDBClusterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_psmdb_cluster_api_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RestartPSMDBClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestartPSMDBClusterRequest) ProtoMessage() {}

func (x *RestartPSMDBClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_controller_psmdb_cluster_api_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestartPSMDBClusterRequest.ProtoReflect.Descriptor instead.
func (*RestartPSMDBClusterRequest) Descriptor() ([]byte, []int) {
	return file_controller_psmdb_cluster_api_proto_rawDescGZIP(), []int{12}
}

func (x *RestartPSMDBClusterRequest) GetKubeAuth() *KubeAuth {
	if x != nil {
		return x.KubeAuth
	}
	return nil
}

func (x *RestartPSMDBClusterRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type RestartPSMDBClusterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RestartPSMDBClusterResponse) Reset() {
	*x = RestartPSMDBClusterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_psmdb_cluster_api_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RestartPSMDBClusterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestartPSMDBClusterResponse) ProtoMessage() {}

func (x *RestartPSMDBClusterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_controller_psmdb_cluster_api_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestartPSMDBClusterResponse.ProtoReflect.Descriptor instead.
func (*RestartPSMDBClusterResponse) Descriptor() ([]byte, []int) {
	return file_controller_psmdb_cluster_api_proto_rawDescGZIP(), []int{13}
}

// UpdatePSMDBClusterParams represents PSMDB cluster parameters that can be updated.
type UpdatePSMDBClusterRequest_UpdatePSMDBClusterParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Cluster size.
	ClusterSize int32 `protobuf:"varint,1,opt,name=cluster_size,json=clusterSize,proto3" json:"cluster_size,omitempty"`
	// Replicaset container parameters.
	Replicaset *UpdatePSMDBClusterRequest_UpdatePSMDBClusterParams_ReplicaSet `protobuf:"bytes,2,opt,name=replicaset,proto3" json:"replicaset,omitempty"`
	// Suspend cluster `pause: true`.
	Suspend bool `protobuf:"varint,3,opt,name=suspend,proto3" json:"suspend,omitempty"`
	// Resume cluster `pause: false`.
	Resume bool `protobuf:"varint,4,opt,name=resume,proto3" json:"resume,omitempty"`
	// PSMDB image, tag contains version to upgrade to.
	Image string `protobuf:"bytes,5,opt,name=image,proto3" json:"image,omitempty"`
}

func (x *UpdatePSMDBClusterRequest_UpdatePSMDBClusterParams) Reset() {
	*x = UpdatePSMDBClusterRequest_UpdatePSMDBClusterParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_psmdb_cluster_api_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePSMDBClusterRequest_UpdatePSMDBClusterParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePSMDBClusterRequest_UpdatePSMDBClusterParams) ProtoMessage() {}

func (x *UpdatePSMDBClusterRequest_UpdatePSMDBClusterParams) ProtoReflect() protoreflect.Message {
	mi := &file_controller_psmdb_cluster_api_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePSMDBClusterRequest_UpdatePSMDBClusterParams.ProtoReflect.Descriptor instead.
func (*UpdatePSMDBClusterRequest_UpdatePSMDBClusterParams) Descriptor() ([]byte, []int) {
	return file_controller_psmdb_cluster_api_proto_rawDescGZIP(), []int{8, 0}
}

func (x *UpdatePSMDBClusterRequest_UpdatePSMDBClusterParams) GetClusterSize() int32 {
	if x != nil {
		return x.ClusterSize
	}
	return 0
}

func (x *UpdatePSMDBClusterRequest_UpdatePSMDBClusterParams) GetReplicaset() *UpdatePSMDBClusterRequest_UpdatePSMDBClusterParams_ReplicaSet {
	if x != nil {
		return x.Replicaset
	}
	return nil
}

func (x *UpdatePSMDBClusterRequest_UpdatePSMDBClusterParams) GetSuspend() bool {
	if x != nil {
		return x.Suspend
	}
	return false
}

func (x *UpdatePSMDBClusterRequest_UpdatePSMDBClusterParams) GetResume() bool {
	if x != nil {
		return x.Resume
	}
	return false
}

func (x *UpdatePSMDBClusterRequest_UpdatePSMDBClusterParams) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

// ReplicaSet container parameters.
type UpdatePSMDBClusterRequest_UpdatePSMDBClusterParams_ReplicaSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Requested compute resources.
	ComputeResources *ComputeResources `protobuf:"bytes,1,opt,name=compute_resources,json=computeResources,proto3" json:"compute_resources,omitempty"`
}

func (x *UpdatePSMDBClusterRequest_UpdatePSMDBClusterParams_ReplicaSet) Reset() {
	*x = UpdatePSMDBClusterRequest_UpdatePSMDBClusterParams_ReplicaSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_psmdb_cluster_api_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePSMDBClusterRequest_UpdatePSMDBClusterParams_ReplicaSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePSMDBClusterRequest_UpdatePSMDBClusterParams_ReplicaSet) ProtoMessage() {}

func (x *UpdatePSMDBClusterRequest_UpdatePSMDBClusterParams_ReplicaSet) ProtoReflect() protoreflect.Message {
	mi := &file_controller_psmdb_cluster_api_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePSMDBClusterRequest_UpdatePSMDBClusterParams_ReplicaSet.ProtoReflect.Descriptor instead.
func (*UpdatePSMDBClusterRequest_UpdatePSMDBClusterParams_ReplicaSet) Descriptor() ([]byte, []int) {
	return file_controller_psmdb_cluster_api_proto_rawDescGZIP(), []int{8, 0, 0}
}

func (x *UpdatePSMDBClusterRequest_UpdatePSMDBClusterParams_ReplicaSet) GetComputeResources() *ComputeResources {
	if x != nil {
		return x.ComputeResources
	}
	return nil
}

var File_controller_psmdb_cluster_api_proto protoreflect.FileDescriptor

var file_controller_psmdb_cluster_api_proto_rawDesc = []byte{
	0x0a, 0x22, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2f, 0x70, 0x73, 0x6d,
	0x64, 0x62, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x29, 0x70, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x61, 0x2e, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x1a,
	0x17, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2f, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x2f, 0x70, 0x73, 0x6d, 0x64, 0x62, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x36, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x77, 0x69, 0x74, 0x6b, 0x6f, 0x77, 0x2f, 0x67, 0x6f, 0x2d,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73,
	0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x74, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x53, 0x4d, 0x44, 0x42, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x58, 0x0a, 0x09,
	0x6b, 0x75, 0x62, 0x65, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x33, 0x2e, 0x70, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x61, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4b, 0x75, 0x62, 0x65,
	0x41, 0x75, 0x74, 0x68, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x20, 0x01, 0x52, 0x08, 0x6b, 0x75,
	0x62, 0x65, 0x41, 0x75, 0x74, 0x68, 0x22, 0x70, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x53,
	0x4d, 0x44, 0x42, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x08, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x70, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x61, 0x2e,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2e, 0x50, 0x53, 0x4d, 0x44, 0x42, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x08,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x22, 0x8e, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74,
	0x50, 0x53, 0x4d, 0x44, 0x42, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x58, 0x0a, 0x09, 0x6b, 0x75, 0x62, 0x65, 0x5f, 0x61, 0x75, 0x74, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x70, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x61,
	0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x41, 0x75, 0x74, 0x68, 0x42, 0x06, 0xe2, 0xdf, 0x1f,
	0x02, 0x20, 0x01, 0x52, 0x08, 0x6b, 0x75, 0x62, 0x65, 0x41, 0x75, 0x74, 0x68, 0x12, 0x1a, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f,
	0x02, 0x58, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x6c, 0x0a, 0x17, 0x47, 0x65, 0x74,
	0x50, 0x53, 0x4d, 0x44, 0x42, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x70, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x61, 0x2e,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2e, 0x50, 0x53, 0x4d, 0x44, 0x42, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x07,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x22, 0x99, 0x01, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x50,
	0x53, 0x4d, 0x44, 0x42, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x58, 0x0a,
	0x09, 0x6b, 0x75, 0x62, 0x65, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x33, 0x2e, 0x70, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x61, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4b, 0x75, 0x62,
	0x65, 0x41, 0x75, 0x74, 0x68, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x20, 0x01, 0x52, 0x08, 0x6b,
	0x75, 0x62, 0x65, 0x41, 0x75, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0x83, 0x01, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x50, 0x53, 0x4d, 0x44, 0x42,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5d, 0x0a, 0x0b, 0x63, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3b, 0x2e, 0x70, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x61, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x50, 0x53, 0x4d, 0x44,
	0x42, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x0b, 0x63, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x22, 0xd0, 0x02, 0x0a, 0x19, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x50, 0x53, 0x4d, 0x44, 0x42, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x58, 0x0a, 0x09, 0x6b, 0x75, 0x62, 0x65, 0x5f,
	0x61, 0x75, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x70, 0x65, 0x72,
	0x63, 0x6f, 0x6e, 0x61, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x64, 0x62,
	0x61, 0x61, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x41, 0x75, 0x74, 0x68, 0x42,
	0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x20, 0x01, 0x52, 0x08, 0x6b, 0x75, 0x62, 0x65, 0x41, 0x75, 0x74,
	0x68, 0x12, 0x1a, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x5d, 0x0a,
	0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e,
	0x70, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x61, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x50, 0x53, 0x4d, 0x44, 0x42, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x42, 0x06, 0xe2, 0xdf,
	0x1f, 0x02, 0x20, 0x01, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x46, 0x0a, 0x03,
	0x70, 0x6d, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x70, 0x65, 0x72, 0x63,
	0x6f, 0x6e, 0x61, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x64, 0x62, 0x61,
	0x61, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x50, 0x4d, 0x4d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52,
	0x03, 0x70, 0x6d, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x22, 0x1c, 0x0a, 0x1a,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x53, 0x4d, 0x44, 0x42, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x93, 0x05, 0x0a, 0x19, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x53, 0x4d, 0x44, 0x42, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x58, 0x0a, 0x09, 0x6b, 0x75, 0x62, 0x65,
	0x5f, 0x61, 0x75, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x70, 0x65,
	0x72, 0x63, 0x6f, 0x6e, 0x61, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x64,
	0x62, 0x61, 0x61, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x41, 0x75, 0x74, 0x68,
	0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x20, 0x01, 0x52, 0x08, 0x6b, 0x75, 0x62, 0x65, 0x41, 0x75,
	0x74, 0x68, 0x12, 0x1a, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x75,
	0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5d,
	0x2e, 0x70, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x61, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x50, 0x53, 0x4d, 0x44, 0x42, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x53, 0x4d, 0x44, 0x42,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x06, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x88, 0x03, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x50, 0x53, 0x4d, 0x44, 0x42, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x88, 0x01, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x68, 0x2e, 0x70, 0x65, 0x72,
	0x63, 0x6f, 0x6e, 0x61, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x64, 0x62,
	0x61, 0x61, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x53, 0x4d,
	0x44, 0x42, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x53, 0x4d, 0x44, 0x42, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x53, 0x65, 0x74, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x65, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x73, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x1a, 0x76, 0x0a, 0x0a, 0x52, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x53, 0x65, 0x74, 0x12, 0x68, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74,
	0x65, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3b, 0x2e, 0x70, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x61, 0x2e, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f,
	0x6d, 0x70, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x10,
	0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x22, 0x1c, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x53, 0x4d, 0x44, 0x42, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x91,
	0x01, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x53, 0x4d, 0x44, 0x42, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x58, 0x0a, 0x09,
	0x6b, 0x75, 0x62, 0x65, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x33, 0x2e, 0x70, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x61, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4b, 0x75, 0x62, 0x65,
	0x41, 0x75, 0x74, 0x68, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x20, 0x01, 0x52, 0x08, 0x6b, 0x75,
	0x62, 0x65, 0x41, 0x75, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x22, 0x1c, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x53, 0x4d, 0x44,
	0x42, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x92, 0x01, 0x0a, 0x1a, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x53, 0x4d, 0x44,
	0x42, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x58, 0x0a, 0x09, 0x6b, 0x75, 0x62, 0x65, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x33, 0x2e, 0x70, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x61, 0x2e, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4b,
	0x75, 0x62, 0x65, 0x41, 0x75, 0x74, 0x68, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x20, 0x01, 0x52,
	0x08, 0x6b, 0x75, 0x62, 0x65, 0x41, 0x75, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x1d, 0x0a, 0x1b, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x50, 0x53, 0x4d, 0x44, 0x42, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x32, 0x9c, 0x09, 0x0a, 0x0f, 0x50, 0x53, 0x4d, 0x44, 0x42, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x41, 0x50, 0x49, 0x12, 0x9e, 0x01, 0x0a, 0x11, 0x4c, 0x69, 0x73,
	0x74, 0x50, 0x53, 0x4d, 0x44, 0x42, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x43,
	0x2e, 0x70, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x61, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50,
	0x53, 0x4d, 0x44, 0x42, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x44, 0x2e, 0x70, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x61, 0x2e, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x50, 0x53, 0x4d, 0x44, 0x42, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x98, 0x01, 0x0a, 0x0f, 0x47, 0x65,
	0x74, 0x50, 0x53, 0x4d, 0x44, 0x42, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x41, 0x2e,
	0x70, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x61, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x53, 0x4d,
	0x44, 0x42, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x42, 0x2e, 0x70, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x61, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x50, 0x53, 0x4d, 0x44, 0x42, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0xb9, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x50, 0x53, 0x4d, 0x44,
	0x42, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x73, 0x12, 0x4c, 0x2e, 0x70, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x61, 0x2e, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x50, 0x53, 0x4d, 0x44, 0x42, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x4d, 0x2e, 0x70, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x61, 0x2e, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x50, 0x53, 0x4d, 0x44, 0x42, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0xa1, 0x01, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x53, 0x4d, 0x44, 0x42,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x44, 0x2e, 0x70, 0x65, 0x72, 0x63, 0x6f, 0x6e,
	0x61, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x53, 0x4d, 0x44, 0x42, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x45, 0x2e,
	0x70, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x61, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x50, 0x53, 0x4d, 0x44, 0x42, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0xa1, 0x01, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50,
	0x53, 0x4d, 0x44, 0x42, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x44, 0x2e, 0x70, 0x65,
	0x72, 0x63, 0x6f, 0x6e, 0x61, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x64,
	0x62, 0x61, 0x61, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x53,
	0x4d, 0x44, 0x42, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x45, 0x2e, 0x70, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x61, 0x2e, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x50, 0x53, 0x4d, 0x44, 0x42, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xa1, 0x01, 0x0a, 0x12, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x50, 0x53, 0x4d, 0x44, 0x42, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12,
	0x44, 0x2e, 0x70, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x61, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x50, 0x53, 0x4d, 0x44, 0x42, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x45, 0x2e, 0x70, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x61, 0x2e,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x53, 0x4d, 0x44, 0x42, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xa4, 0x01, 0x0a,
	0x13, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x53, 0x4d, 0x44, 0x42, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x12, 0x45, 0x2e, 0x70, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x61, 0x2e, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x2e, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x53, 0x4d, 0x44, 0x42, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x46, 0x2e, 0x70, 0x65,
	0x72, 0x63, 0x6f, 0x6e, 0x61, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x64,
	0x62, 0x61, 0x61, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50,
	0x53, 0x4d, 0x44, 0x42, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x42, 0x1e, 0x5a, 0x1c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x72, 0x3b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_controller_psmdb_cluster_api_proto_rawDescOnce sync.Once
	file_controller_psmdb_cluster_api_proto_rawDescData = file_controller_psmdb_cluster_api_proto_rawDesc
)

func file_controller_psmdb_cluster_api_proto_rawDescGZIP() []byte {
	file_controller_psmdb_cluster_api_proto_rawDescOnce.Do(func() {
		file_controller_psmdb_cluster_api_proto_rawDescData = protoimpl.X.CompressGZIP(file_controller_psmdb_cluster_api_proto_rawDescData)
	})
	return file_controller_psmdb_cluster_api_proto_rawDescData
}

var file_controller_psmdb_cluster_api_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_controller_psmdb_cluster_api_proto_goTypes = []interface{}{
	(*ListPSMDBClustersRequest)(nil),                                      // 0: percona.platform.dbaas.controller.v1beta1.ListPSMDBClustersRequest
	(*ListPSMDBClustersResponse)(nil),                                     // 1: percona.platform.dbaas.controller.v1beta1.ListPSMDBClustersResponse
	(*GetPSMDBClusterRequest)(nil),                                        // 2: percona.platform.dbaas.controller.v1beta1.GetPSMDBClusterRequest
	(*GetPSMDBClusterResponse)(nil),                                       // 3: percona.platform.dbaas.controller.v1beta1.GetPSMDBClusterResponse
	(*GetPSMDBClusterCredentialsRequest)(nil),                             // 4: percona.platform.dbaas.controller.v1beta1.GetPSMDBClusterCredentialsRequest
	(*GetPSMDBClusterCredentialsResponse)(nil),                            // 5: percona.platform.dbaas.controller.v1beta1.GetPSMDBClusterCredentialsResponse
	(*CreatePSMDBClusterRequest)(nil),                                     // 6: percona.platform.dbaas.controller.v1beta1.CreatePSMDBClusterRequest
	(*CreatePSMDBClusterResponse)(nil),                                    // 7: percona.platform.dbaas.controller.v1beta1.CreatePSMDBClusterResponse
	(*UpdatePSMDBClusterRequest)(nil),                                     // 8: percona.platform.dbaas.controller.v1beta1.UpdatePSMDBClusterRequest
	(*UpdatePSMDBClusterResponse)(nil),                                    // 9: percona.platform.dbaas.controller.v1beta1.UpdatePSMDBClusterResponse
	(*DeletePSMDBClusterRequest)(nil),                                     // 10: percona.platform.dbaas.controller.v1beta1.DeletePSMDBClusterRequest
	(*DeletePSMDBClusterResponse)(nil),                                    // 11: percona.platform.dbaas.controller.v1beta1.DeletePSMDBClusterResponse
	(*RestartPSMDBClusterRequest)(nil),                                    // 12: percona.platform.dbaas.controller.v1beta1.RestartPSMDBClusterRequest
	(*RestartPSMDBClusterResponse)(nil),                                   // 13: percona.platform.dbaas.controller.v1beta1.RestartPSMDBClusterResponse
	(*UpdatePSMDBClusterRequest_UpdatePSMDBClusterParams)(nil),            // 14: percona.platform.dbaas.controller.v1beta1.UpdatePSMDBClusterRequest.UpdatePSMDBClusterParams
	(*UpdatePSMDBClusterRequest_UpdatePSMDBClusterParams_ReplicaSet)(nil), // 15: percona.platform.dbaas.controller.v1beta1.UpdatePSMDBClusterRequest.UpdatePSMDBClusterParams.ReplicaSet
	(*KubeAuth)(nil),                                                      // 16: percona.platform.dbaas.controller.v1beta1.KubeAuth
	(*PSMDBCluster)(nil),                                                  // 17: percona.platform.dbaas.controller.v1beta1.PSMDBCluster
	(*PSMDBCredentials)(nil),                                              // 18: percona.platform.dbaas.controller.v1beta1.PSMDBCredentials
	(*PSMDBClusterParams)(nil),                                            // 19: percona.platform.dbaas.controller.v1beta1.PSMDBClusterParams
	(*PMMParams)(nil),                                                     // 20: percona.platform.dbaas.controller.v1beta1.PMMParams
	(*ComputeResources)(nil),                                              // 21: percona.platform.dbaas.controller.v1beta1.ComputeResources
}
var file_controller_psmdb_cluster_api_proto_depIdxs = []int32{
	16, // 0: percona.platform.dbaas.controller.v1beta1.ListPSMDBClustersRequest.kube_auth:type_name -> percona.platform.dbaas.controller.v1beta1.KubeAuth
	17, // 1: percona.platform.dbaas.controller.v1beta1.ListPSMDBClustersResponse.clusters:type_name -> percona.platform.dbaas.controller.v1beta1.PSMDBCluster
	16, // 2: percona.platform.dbaas.controller.v1beta1.GetPSMDBClusterRequest.kube_auth:type_name -> percona.platform.dbaas.controller.v1beta1.KubeAuth
	17, // 3: percona.platform.dbaas.controller.v1beta1.GetPSMDBClusterResponse.cluster:type_name -> percona.platform.dbaas.controller.v1beta1.PSMDBCluster
	16, // 4: percona.platform.dbaas.controller.v1beta1.GetPSMDBClusterCredentialsRequest.kube_auth:type_name -> percona.platform.dbaas.controller.v1beta1.KubeAuth
	18, // 5: percona.platform.dbaas.controller.v1beta1.GetPSMDBClusterCredentialsResponse.credentials:type_name -> percona.platform.dbaas.controller.v1beta1.PSMDBCredentials
	16, // 6: percona.platform.dbaas.controller.v1beta1.CreatePSMDBClusterRequest.kube_auth:type_name -> percona.platform.dbaas.controller.v1beta1.KubeAuth
	19, // 7: percona.platform.dbaas.controller.v1beta1.CreatePSMDBClusterRequest.params:type_name -> percona.platform.dbaas.controller.v1beta1.PSMDBClusterParams
	20, // 8: percona.platform.dbaas.controller.v1beta1.CreatePSMDBClusterRequest.pmm:type_name -> percona.platform.dbaas.controller.v1beta1.PMMParams
	16, // 9: percona.platform.dbaas.controller.v1beta1.UpdatePSMDBClusterRequest.kube_auth:type_name -> percona.platform.dbaas.controller.v1beta1.KubeAuth
	14, // 10: percona.platform.dbaas.controller.v1beta1.UpdatePSMDBClusterRequest.params:type_name -> percona.platform.dbaas.controller.v1beta1.UpdatePSMDBClusterRequest.UpdatePSMDBClusterParams
	16, // 11: percona.platform.dbaas.controller.v1beta1.DeletePSMDBClusterRequest.kube_auth:type_name -> percona.platform.dbaas.controller.v1beta1.KubeAuth
	16, // 12: percona.platform.dbaas.controller.v1beta1.RestartPSMDBClusterRequest.kube_auth:type_name -> percona.platform.dbaas.controller.v1beta1.KubeAuth
	15, // 13: percona.platform.dbaas.controller.v1beta1.UpdatePSMDBClusterRequest.UpdatePSMDBClusterParams.replicaset:type_name -> percona.platform.dbaas.controller.v1beta1.UpdatePSMDBClusterRequest.UpdatePSMDBClusterParams.ReplicaSet
	21, // 14: percona.platform.dbaas.controller.v1beta1.UpdatePSMDBClusterRequest.UpdatePSMDBClusterParams.ReplicaSet.compute_resources:type_name -> percona.platform.dbaas.controller.v1beta1.ComputeResources
	0,  // 15: percona.platform.dbaas.controller.v1beta1.PSMDBClusterAPI.ListPSMDBClusters:input_type -> percona.platform.dbaas.controller.v1beta1.ListPSMDBClustersRequest
	2,  // 16: percona.platform.dbaas.controller.v1beta1.PSMDBClusterAPI.GetPSMDBCluster:input_type -> percona.platform.dbaas.controller.v1beta1.GetPSMDBClusterRequest
	4,  // 17: percona.platform.dbaas.controller.v1beta1.PSMDBClusterAPI.GetPSMDBClusterCredentials:input_type -> percona.platform.dbaas.controller.v1beta1.GetPSMDBClusterCredentialsRequest
	6,  // 18: percona.platform.dbaas.controller.v1beta1.PSMDBClusterAPI.CreatePSMDBCluster:input_type -> percona.platform.dbaas.controller.v1beta1.CreatePSMDBClusterRequest
	8,  // 19: percona.platform.dbaas.controller.v1beta1.PSMDBClusterAPI.UpdatePSMDBCluster:input_type -> percona.platform.dbaas.controller.v1beta1.UpdatePSMDBClusterRequest
	10, // 20: percona.platform.dbaas.controller.v1beta1.PSMDBClusterAPI.DeletePSMDBCluster:input_type -> percona.platform.dbaas.controller.v1beta1.DeletePSMDBClusterRequest
	12, // 21: percona.platform.dbaas.controller.v1beta1.PSMDBClusterAPI.RestartPSMDBCluster:input_type -> percona.platform.dbaas.controller.v1beta1.RestartPSMDBClusterRequest
	1,  // 22: percona.platform.dbaas.controller.v1beta1.PSMDBClusterAPI.ListPSMDBClusters:output_type -> percona.platform.dbaas.controller.v1beta1.ListPSMDBClustersResponse
	3,  // 23: percona.platform.dbaas.controller.v1beta1.PSMDBClusterAPI.GetPSMDBCluster:output_type -> percona.platform.dbaas.controller.v1beta1.GetPSMDBClusterResponse
	5,  // 24: percona.platform.dbaas.controller.v1beta1.PSMDBClusterAPI.GetPSMDBClusterCredentials:output_type -> percona.platform.dbaas.controller.v1beta1.GetPSMDBClusterCredentialsResponse
	7,  // 25: percona.platform.dbaas.controller.v1beta1.PSMDBClusterAPI.CreatePSMDBCluster:output_type -> percona.platform.dbaas.controller.v1beta1.CreatePSMDBClusterResponse
	9,  // 26: percona.platform.dbaas.controller.v1beta1.PSMDBClusterAPI.UpdatePSMDBCluster:output_type -> percona.platform.dbaas.controller.v1beta1.UpdatePSMDBClusterResponse
	11, // 27: percona.platform.dbaas.controller.v1beta1.PSMDBClusterAPI.DeletePSMDBCluster:output_type -> percona.platform.dbaas.controller.v1beta1.DeletePSMDBClusterResponse
	13, // 28: percona.platform.dbaas.controller.v1beta1.PSMDBClusterAPI.RestartPSMDBCluster:output_type -> percona.platform.dbaas.controller.v1beta1.RestartPSMDBClusterResponse
	22, // [22:29] is the sub-list for method output_type
	15, // [15:22] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_controller_psmdb_cluster_api_proto_init() }
func file_controller_psmdb_cluster_api_proto_init() {
	if File_controller_psmdb_cluster_api_proto != nil {
		return
	}
	file_controller_common_proto_init()
	file_controller_psmdb_cluster_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_controller_psmdb_cluster_api_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPSMDBClustersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_psmdb_cluster_api_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPSMDBClustersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_psmdb_cluster_api_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPSMDBClusterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_psmdb_cluster_api_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPSMDBClusterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_psmdb_cluster_api_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPSMDBClusterCredentialsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_psmdb_cluster_api_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPSMDBClusterCredentialsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_psmdb_cluster_api_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePSMDBClusterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_psmdb_cluster_api_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePSMDBClusterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_psmdb_cluster_api_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePSMDBClusterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_psmdb_cluster_api_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePSMDBClusterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_psmdb_cluster_api_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePSMDBClusterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_psmdb_cluster_api_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePSMDBClusterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_psmdb_cluster_api_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RestartPSMDBClusterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_psmdb_cluster_api_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RestartPSMDBClusterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_psmdb_cluster_api_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePSMDBClusterRequest_UpdatePSMDBClusterParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_psmdb_cluster_api_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePSMDBClusterRequest_UpdatePSMDBClusterParams_ReplicaSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_controller_psmdb_cluster_api_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_controller_psmdb_cluster_api_proto_goTypes,
		DependencyIndexes: file_controller_psmdb_cluster_api_proto_depIdxs,
		MessageInfos:      file_controller_psmdb_cluster_api_proto_msgTypes,
	}.Build()
	File_controller_psmdb_cluster_api_proto = out.File
	file_controller_psmdb_cluster_api_proto_rawDesc = nil
	file_controller_psmdb_cluster_api_proto_goTypes = nil
	file_controller_psmdb_cluster_api_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// PSMDBClusterAPIClient is the client API for PSMDBClusterAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PSMDBClusterAPIClient interface {
	// ListPSMDBClusters returns a list of PSMDB clusters.
	ListPSMDBClusters(ctx context.Context, in *ListPSMDBClustersRequest, opts ...grpc.CallOption) (*ListPSMDBClustersResponse, error)
	// GetPSMDBCluster gets a cluster's information.
	GetPSMDBCluster(ctx context.Context, in *GetPSMDBClusterRequest, opts ...grpc.CallOption) (*GetPSMDBClusterResponse, error)
	// GetPSMDBClusterCredentials gets a cluster's connection credentials.
	GetPSMDBClusterCredentials(ctx context.Context, in *GetPSMDBClusterCredentialsRequest, opts ...grpc.CallOption) (*GetPSMDBClusterCredentialsResponse, error)
	// CreatePSMDBCluster creates a new PSMDB cluster.
	CreatePSMDBCluster(ctx context.Context, in *CreatePSMDBClusterRequest, opts ...grpc.CallOption) (*CreatePSMDBClusterResponse, error)
	// UpdatePSMDBCluster updates existing PSMDB cluster.
	UpdatePSMDBCluster(ctx context.Context, in *UpdatePSMDBClusterRequest, opts ...grpc.CallOption) (*UpdatePSMDBClusterResponse, error)
	// DeletePSMDBCluster deletes PSMDB cluster.
	DeletePSMDBCluster(ctx context.Context, in *DeletePSMDBClusterRequest, opts ...grpc.CallOption) (*DeletePSMDBClusterResponse, error)
	// RestartPSMDBCluster restarts PSMDB cluster.
	RestartPSMDBCluster(ctx context.Context, in *RestartPSMDBClusterRequest, opts ...grpc.CallOption) (*RestartPSMDBClusterResponse, error)
}

type pSMDBClusterAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewPSMDBClusterAPIClient(cc grpc.ClientConnInterface) PSMDBClusterAPIClient {
	return &pSMDBClusterAPIClient{cc}
}

func (c *pSMDBClusterAPIClient) ListPSMDBClusters(ctx context.Context, in *ListPSMDBClustersRequest, opts ...grpc.CallOption) (*ListPSMDBClustersResponse, error) {
	out := new(ListPSMDBClustersResponse)
	err := c.cc.Invoke(ctx, "/percona.platform.dbaas.controller.v1beta1.PSMDBClusterAPI/ListPSMDBClusters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pSMDBClusterAPIClient) GetPSMDBCluster(ctx context.Context, in *GetPSMDBClusterRequest, opts ...grpc.CallOption) (*GetPSMDBClusterResponse, error) {
	out := new(GetPSMDBClusterResponse)
	err := c.cc.Invoke(ctx, "/percona.platform.dbaas.controller.v1beta1.PSMDBClusterAPI/GetPSMDBCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pSMDBClusterAPIClient) GetPSMDBClusterCredentials(ctx context.Context, in *GetPSMDBClusterCredentialsRequest, opts ...grpc.CallOption) (*GetPSMDBClusterCredentialsResponse, error) {
	out := new(GetPSMDBClusterCredentialsResponse)
	err := c.cc.Invoke(ctx, "/percona.platform.dbaas.controller.v1beta1.PSMDBClusterAPI/GetPSMDBClusterCredentials", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pSMDBClusterAPIClient) CreatePSMDBCluster(ctx context.Context, in *CreatePSMDBClusterRequest, opts ...grpc.CallOption) (*CreatePSMDBClusterResponse, error) {
	out := new(CreatePSMDBClusterResponse)
	err := c.cc.Invoke(ctx, "/percona.platform.dbaas.controller.v1beta1.PSMDBClusterAPI/CreatePSMDBCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pSMDBClusterAPIClient) UpdatePSMDBCluster(ctx context.Context, in *UpdatePSMDBClusterRequest, opts ...grpc.CallOption) (*UpdatePSMDBClusterResponse, error) {
	out := new(UpdatePSMDBClusterResponse)
	err := c.cc.Invoke(ctx, "/percona.platform.dbaas.controller.v1beta1.PSMDBClusterAPI/UpdatePSMDBCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pSMDBClusterAPIClient) DeletePSMDBCluster(ctx context.Context, in *DeletePSMDBClusterRequest, opts ...grpc.CallOption) (*DeletePSMDBClusterResponse, error) {
	out := new(DeletePSMDBClusterResponse)
	err := c.cc.Invoke(ctx, "/percona.platform.dbaas.controller.v1beta1.PSMDBClusterAPI/DeletePSMDBCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pSMDBClusterAPIClient) RestartPSMDBCluster(ctx context.Context, in *RestartPSMDBClusterRequest, opts ...grpc.CallOption) (*RestartPSMDBClusterResponse, error) {
	out := new(RestartPSMDBClusterResponse)
	err := c.cc.Invoke(ctx, "/percona.platform.dbaas.controller.v1beta1.PSMDBClusterAPI/RestartPSMDBCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PSMDBClusterAPIServer is the server API for PSMDBClusterAPI service.
type PSMDBClusterAPIServer interface {
	// ListPSMDBClusters returns a list of PSMDB clusters.
	ListPSMDBClusters(context.Context, *ListPSMDBClustersRequest) (*ListPSMDBClustersResponse, error)
	// GetPSMDBCluster gets a cluster's information.
	GetPSMDBCluster(context.Context, *GetPSMDBClusterRequest) (*GetPSMDBClusterResponse, error)
	// GetPSMDBClusterCredentials gets a cluster's connection credentials.
	GetPSMDBClusterCredentials(context.Context, *GetPSMDBClusterCredentialsRequest) (*GetPSMDBClusterCredentialsResponse, error)
	// CreatePSMDBCluster creates a new PSMDB cluster.
	CreatePSMDBCluster(context.Context, *CreatePSMDBClusterRequest) (*CreatePSMDBClusterResponse, error)
	// UpdatePSMDBCluster updates existing PSMDB cluster.
	UpdatePSMDBCluster(context.Context, *UpdatePSMDBClusterRequest) (*UpdatePSMDBClusterResponse, error)
	// DeletePSMDBCluster deletes PSMDB cluster.
	DeletePSMDBCluster(context.Context, *DeletePSMDBClusterRequest) (*DeletePSMDBClusterResponse, error)
	// RestartPSMDBCluster restarts PSMDB cluster.
	RestartPSMDBCluster(context.Context, *RestartPSMDBClusterRequest) (*RestartPSMDBClusterResponse, error)
}

// UnimplementedPSMDBClusterAPIServer can be embedded to have forward compatible implementations.
type UnimplementedPSMDBClusterAPIServer struct {
}

func (*UnimplementedPSMDBClusterAPIServer) ListPSMDBClusters(context.Context, *ListPSMDBClustersRequest) (*ListPSMDBClustersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPSMDBClusters not implemented")
}
func (*UnimplementedPSMDBClusterAPIServer) GetPSMDBCluster(context.Context, *GetPSMDBClusterRequest) (*GetPSMDBClusterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPSMDBCluster not implemented")
}
func (*UnimplementedPSMDBClusterAPIServer) GetPSMDBClusterCredentials(context.Context, *GetPSMDBClusterCredentialsRequest) (*GetPSMDBClusterCredentialsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPSMDBClusterCredentials not implemented")
}
func (*UnimplementedPSMDBClusterAPIServer) CreatePSMDBCluster(context.Context, *CreatePSMDBClusterRequest) (*CreatePSMDBClusterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePSMDBCluster not implemented")
}
func (*UnimplementedPSMDBClusterAPIServer) UpdatePSMDBCluster(context.Context, *UpdatePSMDBClusterRequest) (*UpdatePSMDBClusterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePSMDBCluster not implemented")
}
func (*UnimplementedPSMDBClusterAPIServer) DeletePSMDBCluster(context.Context, *DeletePSMDBClusterRequest) (*DeletePSMDBClusterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePSMDBCluster not implemented")
}
func (*UnimplementedPSMDBClusterAPIServer) RestartPSMDBCluster(context.Context, *RestartPSMDBClusterRequest) (*RestartPSMDBClusterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestartPSMDBCluster not implemented")
}

func RegisterPSMDBClusterAPIServer(s *grpc.Server, srv PSMDBClusterAPIServer) {
	s.RegisterService(&_PSMDBClusterAPI_serviceDesc, srv)
}

func _PSMDBClusterAPI_ListPSMDBClusters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPSMDBClustersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PSMDBClusterAPIServer).ListPSMDBClusters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/percona.platform.dbaas.controller.v1beta1.PSMDBClusterAPI/ListPSMDBClusters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PSMDBClusterAPIServer).ListPSMDBClusters(ctx, req.(*ListPSMDBClustersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PSMDBClusterAPI_GetPSMDBCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPSMDBClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PSMDBClusterAPIServer).GetPSMDBCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/percona.platform.dbaas.controller.v1beta1.PSMDBClusterAPI/GetPSMDBCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PSMDBClusterAPIServer).GetPSMDBCluster(ctx, req.(*GetPSMDBClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PSMDBClusterAPI_GetPSMDBClusterCredentials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPSMDBClusterCredentialsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PSMDBClusterAPIServer).GetPSMDBClusterCredentials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/percona.platform.dbaas.controller.v1beta1.PSMDBClusterAPI/GetPSMDBClusterCredentials",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PSMDBClusterAPIServer).GetPSMDBClusterCredentials(ctx, req.(*GetPSMDBClusterCredentialsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PSMDBClusterAPI_CreatePSMDBCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePSMDBClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PSMDBClusterAPIServer).CreatePSMDBCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/percona.platform.dbaas.controller.v1beta1.PSMDBClusterAPI/CreatePSMDBCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PSMDBClusterAPIServer).CreatePSMDBCluster(ctx, req.(*CreatePSMDBClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PSMDBClusterAPI_UpdatePSMDBCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePSMDBClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PSMDBClusterAPIServer).UpdatePSMDBCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/percona.platform.dbaas.controller.v1beta1.PSMDBClusterAPI/UpdatePSMDBCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PSMDBClusterAPIServer).UpdatePSMDBCluster(ctx, req.(*UpdatePSMDBClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PSMDBClusterAPI_DeletePSMDBCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePSMDBClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PSMDBClusterAPIServer).DeletePSMDBCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/percona.platform.dbaas.controller.v1beta1.PSMDBClusterAPI/DeletePSMDBCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PSMDBClusterAPIServer).DeletePSMDBCluster(ctx, req.(*DeletePSMDBClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PSMDBClusterAPI_RestartPSMDBCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestartPSMDBClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PSMDBClusterAPIServer).RestartPSMDBCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/percona.platform.dbaas.controller.v1beta1.PSMDBClusterAPI/RestartPSMDBCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PSMDBClusterAPIServer).RestartPSMDBCluster(ctx, req.(*RestartPSMDBClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PSMDBClusterAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "percona.platform.dbaas.controller.v1beta1.PSMDBClusterAPI",
	HandlerType: (*PSMDBClusterAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListPSMDBClusters",
			Handler:    _PSMDBClusterAPI_ListPSMDBClusters_Handler,
		},
		{
			MethodName: "GetPSMDBCluster",
			Handler:    _PSMDBClusterAPI_GetPSMDBCluster_Handler,
		},
		{
			MethodName: "GetPSMDBClusterCredentials",
			Handler:    _PSMDBClusterAPI_GetPSMDBClusterCredentials_Handler,
		},
		{
			MethodName: "CreatePSMDBCluster",
			Handler:    _PSMDBClusterAPI_CreatePSMDBCluster_Handler,
		},
		{
			MethodName: "UpdatePSMDBCluster",
			Handler:    _PSMDBClusterAPI_UpdatePSMDBCluster_Handler,
		},
		{
			MethodName: "DeletePSMDBCluster",
			Handler:    _PSMDBClusterAPI_DeletePSMDBCluster_Handler,
		},
		{
			MethodName: "RestartPSMDBCluster",
			Handler:    _PSMDBClusterAPI_RestartPSMDBCluster_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "controller/psmdb_cluster_api.proto",
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.13.0
// source: controller/pxc_cluster_api.proto

package controllerv1beta1

import (
	context "context"
	reflect "reflect"
	sync "sync"

	proto "github.com/golang/protobuf/proto"
	_ "github.com/mwitkow/go-proto-validators"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type ListPXCClustersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Kubernetes auth.
	KubeAuth *KubeAuth `protobuf:"bytes,1,opt,name=kube_auth,json=kubeAuth,proto3" json:"kube_auth,omitempty"`
}

func (x *ListPXCClustersRequest) Reset() {
	*x = ListPXCClustersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_pxc_cluster_api_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPXCClustersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPXCClustersRequest) ProtoMessage() {}

func (x *ListPXCClustersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_controller_pxc_cluster_api_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPXCClustersRequest.ProtoReflect.Descriptor instead.
func (*ListPXCClustersRequest) Descriptor() ([]byte, []int) {
	return file_controller_pxc_cluster_api_proto_rawDescGZIP(), []int{0}
}

func (x *ListPXCClustersRequest) GetKubeAuth() *KubeAuth {
	if x != nil {
		return x.KubeAuth
	}
	return nil
}

type ListPXCClustersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PXC clusters information.
	Clusters []*ListPXCClustersResponse_Cluster `protobuf:"bytes,1,rep,name=clusters,proto3" json:"clusters,omitempty"`
}

func (x *ListPXCClustersResponse) Reset() {
	*x = ListPXCClustersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_pxc_cluster_api_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPXCClustersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPXCClustersResponse) ProtoMessage() {}

func (x *ListPXCClustersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_controller_pxc_cluster_api_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPXCClustersResponse.ProtoReflect.Descriptor instead.
func (*ListPXCClustersResponse) Descriptor() ([]byte, []int) {
	return file_controller_pxc_cluster_api_proto_rawDescGZIP(), []int{1}
}

func (x *ListPXCClustersResponse) GetClusters() []*ListPXCClustersResponse_Cluster {
	if x != nil {
		return x.Clusters
	}
	return nil
}

type GetPXCClusterCredentialsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Kubernetes auth.
	KubeAuth *KubeAuth `protobuf:"bytes,1,opt,name=kube_auth,json=kubeAuth,proto3" json:"kube_auth,omitempty"`
	// Cluster name.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetPXCClusterCredentialsRequest) Reset() {
	*x = GetPXCClusterCredentialsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_pxc_cluster_api_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPXCClusterCredentialsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPXCClusterCredentialsRequest) ProtoMessage() {}

func (x *GetPXCClusterCredentialsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_controller_pxc_cluster_api_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPXCClusterCredentialsRequest.ProtoReflect.Descriptor instead.
func (*GetPXCClusterCredentialsRequest) Descriptor() ([]byte, []int) {
	return file_controller_pxc_cluster_api_proto_rawDescGZIP(), []int{2}
}

func (x *GetPXCClusterCredentialsRequest) GetKubeAuth() *KubeAuth {
	if x != nil {
		return x.KubeAuth
	}
	return nil
}

func (x *GetPXCClusterCredentialsRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetPXCClusterCredentialsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Connection hostname and credentials.
	Credentials *PXCCredentials `protobuf:"bytes,1,opt,name=credentials,proto3" json:"credentials,omitempty"`
}

func (x *GetPXCClusterCredentialsResponse) Reset() {
	*x = GetPXCClusterCredentialsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_pxc_cluster_api_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPXCClusterCredentialsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPXCClusterCredentialsResponse) ProtoMessage() {}

func (x *GetPXCClusterCredentialsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_controller_pxc_cluster_api_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPXCClusterCredentialsResponse.ProtoReflect.Descriptor instead.
func (*GetPXCClusterCredentialsResponse) Descriptor() ([]byte, []int) {
	return file_controller_pxc_cluster_api_proto_rawDescGZIP(), []int{3}
}

func (x *GetPXCClusterCredentialsResponse) GetCredentials() *PXCCredentials {
	if x != nil {
		return x.Credentials
	}
	return nil
}

type CreatePXCClusterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Kubernetes auth.
	KubeAuth *KubeAuth `protobuf:"bytes,1,opt,name=kube_auth,json=kubeAuth,proto3" json:"kube_auth,omitempty"`
	// Cluster name.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Cluster parameters.
	Params *PXCClusterParams `protobuf:"bytes,3,opt,name=params,proto3" json:"params,omitempty"`
	// PMM params. If nil do not turn on monitoring.
	Pmm *PMMParams `protobuf:"bytes,5,opt,name=pmm,proto3" json:"pmm,omitempty"`
	// Make DB cluster accessible outside of K8s cluster.
	Expose bool `protobuf:"varint,6,opt,name=expose,proto3" json:"expose,omitempty"`
}

func (x *CreatePXCClusterRequest) Reset() {
	*x = CreatePXCClusterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_pxc_cluster_api_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePXCClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePXCClusterRequest) ProtoMessage() {}

func (x *CreatePXCClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_controller_pxc_cluster_api_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePXCClusterRequest.ProtoReflect.Descriptor instead.
func (*CreatePXCClusterRequest) Descriptor() ([]byte, []int) {
	return file_controller_pxc_cluster_api_proto_rawDescGZIP(), []int{4}
}

func (x *CreatePXCClusterRequest) GetKubeAuth() *KubeAuth {
	if x != nil {
		return x.KubeAuth
	}
	return nil
}

func (x *CreatePXCClusterRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreatePXCClusterRequest) GetParams() *PXCClusterParams {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *CreatePXCClusterRequest) GetPmm() *PMMParams {
	if x != nil {
		return x.Pmm
	}
	return nil
}

func (x *CreatePXCClusterRequest) GetExpose() bool {
	if x != nil {
		return x.Expose
	}
	return false
}

type CreatePXCClusterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreatePXCClusterResponse) Reset() {
	*x = CreatePXCClusterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_pxc_cluster_api_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePXCClusterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePXCClusterResponse) ProtoMessage() {}

func (x *CreatePXCClusterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_controller_pxc_cluster_api_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePXCClusterResponse.ProtoReflect.Descriptor instead.
func (*CreatePXCClusterResponse) Descriptor() ([]byte, []int) {
	return file_controller_pxc_cluster_api_proto_rawDescGZIP(), []int{5}
}

type UpdatePXCClusterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Kubernetes auth.
	KubeAuth *KubeAuth `protobuf:"bytes,1,opt,name=kube_auth,json=kubeAuth,proto3" json:"kube_auth,omitempty"`
	// Cluster name.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Cluster parameters.
	Params *UpdatePXCClusterRequest_UpdatePXCClusterParams `protobuf:"bytes,3,opt,name=params,proto3" json:"params,omitempty"`
}

func (x *UpdatePXCClusterRequest) Reset() {
	*x = UpdatePXCClusterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_pxc_cluster_api_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePXCClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePXCClusterRequest) ProtoMessage() {}

func (x *UpdatePXCClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_controller_pxc_cluster_api_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePXCClusterRequest.ProtoReflect.Descriptor instead.
func (*UpdatePXCClusterRequest) Descriptor() ([]byte, []int) {
	return file_controller_pxc_cluster_api_proto_rawDescGZIP(), []int{6}
}

func (x *UpdatePXCClusterRequest) GetKubeAuth() *KubeAuth {
	if x != nil {
		return x.KubeAuth
	}
	return nil
}

func (x *UpdatePXCClusterRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdatePXCClusterRequest) GetParams() *UpdatePXCClusterRequest_UpdatePXCClusterParams {
	if x != nil {
		return x.Params
	}
	return nil
}

type UpdatePXCClusterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdatePXCClusterResponse) Reset() {
	*x = UpdatePXCClusterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_pxc_cluster_api_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePXCClusterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePXCClusterResponse) ProtoMessage() {}

func (x *UpdatePXCClusterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_controller_pxc_cluster_api_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePXCClusterResponse.ProtoReflect.Descriptor instead.
func (*UpdatePXCClusterResponse) Descriptor() ([]byte, []int) {
	return file_controller_pxc_cluster_api_proto_rawDescGZIP(), []int{7}
}

type DeletePXCClusterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Kubernetes auth.
	KubeAuth *KubeAuth `protobuf:"bytes,1,opt,name=kube_auth,json=kubeAuth,proto3" json:"kube_auth,omitempty"`
	// Cluster name.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeletePXCClusterRequest) Reset() {
	*x = DeletePXCClusterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_pxc_cluster_api_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePXCClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePXCClusterRequest) ProtoMessage() {}

func (x *DeletePXCClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_controller_pxc_cluster_api_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePXCClusterRequest.ProtoReflect.Descriptor instead.
func (*DeletePXCClusterRequest) Descriptor() ([]byte, []int) {
	return file_controller_pxc_cluster_api_proto_rawDescGZIP(), []int{8}
}

func (x *DeletePXCClusterRequest) GetKubeAuth() *KubeAuth {
	if x != nil {
		return x.KubeAuth
	}
	return nil
}

func (x *DeletePXCClusterRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type DeletePXCClusterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeletePXCClusterResponse) Reset() {
	*x = DeletePXCClusterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_pxc_cluster_api_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePXCClusterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePXCClusterResponse) ProtoMessage() {}

func (x *DeletePXCClusterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_controller_pxc_cluster_api_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePXCClusterResponse.ProtoReflect.Descriptor instead.
func (*DeletePXCClusterResponse) Descriptor() ([]byte, []int) {
	return file_controller_pxc_cluster_api_proto_rawDescGZIP(), []int{9}
}

type RestartPXCClusterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Kubernetes auth.
	KubeAuth *KubeAuth `protobuf:"bytes,1,opt,name=kube_auth,json=kubeAuth,proto3" json:"kube_auth,omitempty"`
	// Cluster name.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *RestartPXCClusterRequest) Reset() {
	*x = RestartPXCClusterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_pxc_cluster_api_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RestartPXCClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestartPXCClusterRequest) ProtoMessage() {}

func (x *RestartPXCClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_controller_pxc_cluster_api_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestartPXCClusterRequest.ProtoReflect.Descriptor instead.
func (*RestartPXCClusterRequest) Descriptor() ([]byte, []int) {
	return file_controller_pxc_cluster_api_proto_rawDescGZIP(), []int{10}
}

func (x *RestartPXCClusterRequest) GetKubeAuth() *KubeAuth {
	if x != nil {
		return x.KubeAuth
	}
	return nil
}

func (x *RestartPXCClusterRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type RestartPXCClusterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RestartPXCClusterResponse) Reset() {
	*x = RestartPXCClusterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_pxc_cluster_api_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RestartPXCClusterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestartPXCClusterResponse) ProtoMessage() {}

func (x *RestartPXCClusterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_controller_pxc_cluster_api_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestartPXCClusterResponse.ProtoReflect.Descriptor instead.
func (*RestartPXCClusterResponse) Descriptor() ([]byte, []int) {
	return file_controller_pxc_cluster_api_proto_rawDescGZIP(), []int{11}
}

// Cluster represents PXC cluster information.
type ListPXCClustersResponse_Cluster struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Cluster name.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Cluster state.
	State DBClusterState `protobuf:"varint,2,opt,name=state,proto3,enum=percona.platform.dbaas.controller.v1beta1.DBClusterState" json:"state,omitempty"`
	// Currently running operation, if any.
	Operation *RunningOperation `protobuf:"bytes,3,opt,name=operation,proto3" json:"operation,omitempty"`
	// Cluster parameters.
	Params *PXCClusterParams `protobuf:"bytes,4,opt,name=params,proto3" json:"params,omitempty"`
	// DB cluster accessible outside of K8s cluster.
	Exposed bool `protobuf:"varint,5,opt,name=exposed,proto3" json:"exposed,omitempty"`
}

func (x *ListPXCClustersResponse_Cluster) Reset() {
	*x = ListPXCClustersResponse_Cluster{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_pxc_cluster_api_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPXCClustersResponse_Cluster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPXCClustersResponse_Cluster) ProtoMessage() {}

func (x *ListPXCClustersResponse_Cluster) ProtoReflect() protoreflect.Message {
	mi := &file_controller_pxc_cluster_api_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPXCClustersResponse_Cluster.ProtoReflect.Descriptor instead.
func (*ListPXCClustersResponse_Cluster) Descriptor() ([]byte, []int) {
	return file_controller_pxc_cluster_api_proto_rawDescGZIP(), []int{1, 0}
}

func (x *ListPXCClustersResponse_Cluster) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListPXCClustersResponse_Cluster) GetState() DBClusterState {
	if x != nil {
		return x.State
	}
	return DBClusterState_DB_CLUSTER_STATE_INVALID
}

func (x *ListPXCClustersResponse_Cluster) GetOperation() *RunningOperation {
	if x != nil {
		return x.Operation
	}
	return nil
}

func (x *ListPXCClustersResponse_Cluster) GetParams() *PXCClusterParams {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *ListPXCClustersResponse_Cluster) GetExposed() bool {
	if x != nil {
		return x.Exposed
	}
	return false
}

// UpdatePXCClusterParams represents PXC cluster parameters that can be updated.
type UpdatePXCClusterRequest_UpdatePXCClusterParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Cluster size.
	ClusterSize int32 `protobuf:"varint,1,opt,name=cluster_size,json=clusterSize,proto3" json:"cluster_size,omitempty"`
	// PXC container parameters.
	Pxc *UpdatePXCClusterRequest_UpdatePXCClusterParams_PXC `protobuf:"bytes,2,opt,name=pxc,proto3" json:"pxc,omitempty"`
	// ProxySQL container parameters.
	Proxysql *UpdatePXCClusterRequest_UpdatePXCClusterParams_ProxySQL `protobuf:"bytes,3,opt,name=proxysql,proto3" json:"proxysql,omitempty"`
	// Suspend cluster `pause: true`.
	Suspend bool `protobuf:"varint,5,opt,name=suspend,proto3" json:"suspend,omitempty"`
	// Resume cluster `pause: false`.
	Resume bool `protobuf:"varint,6,opt,name=resume,proto3" json:"resume,omitempty"`
	// HAProxy container parameters.
	Haproxy *UpdatePXCClusterRequest_UpdatePXCClusterParams_HAProxy `protobuf:"bytes,7,opt,name=haproxy,proto3" json:"haproxy,omitempty"`
}

func (x *UpdatePXCClusterRequest_UpdatePXCClusterParams) Reset() {
	*x = UpdatePXCClusterRequest_UpdatePXCClusterParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_pxc_cluster_api_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePXCClusterRequest_UpdatePXCClusterParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePXCClusterRequest_UpdatePXCClusterParams) ProtoMessage() {}

func (x *UpdatePXCClusterRequest_UpdatePXCClusterParams) ProtoReflect() protoreflect.Message {
	mi := &file_controller_pxc_cluster_api_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePXCClusterRequest_UpdatePXCClusterParams.ProtoReflect.Descriptor instead.
func (*UpdatePXCClusterRequest_UpdatePXCClusterParams) Descriptor() ([]byte, []int) {
	return file_controller_pxc_cluster_api_proto_rawDescGZIP(), []int{6, 0}
}

func (x *UpdatePXCClusterRequest_UpdatePXCClusterParams) GetClusterSize() int32 {
	if x != nil {
		return x.ClusterSize
	}
	return 0
}

func (x *UpdatePXCClusterRequest_UpdatePXCClusterParams) GetPxc() *UpdatePXCClusterRequest_UpdatePXCClusterParams_PXC {
	if x != nil {
		return x.Pxc
	}
	return nil
}

func (x *UpdatePXCClusterRequest_UpdatePXCClusterParams) GetProxysql() *UpdatePXCClusterRequest_UpdatePXCClusterParams_ProxySQL {
	if x != nil {
		return x.Proxysql
	}
	return nil
}

func (x *UpdatePXCClusterRequest_UpdatePXCClusterParams) GetSuspend() bool {
	if x != nil {
		return x.Suspend
	}
	return false
}

func (x *UpdatePXCClusterRequest_UpdatePXCClusterParams) GetResume() bool {
	if x != nil {
		return x.Resume
	}
	return false
}

func (x *UpdatePXCClusterRequest_UpdatePXCClusterParams) GetHaproxy() *UpdatePXCClusterRequest_UpdatePXCClusterParams_HAProxy {
	if x != nil {
		return x.Haproxy
	}
	return nil
}

// PXC container parameters.
type UpdatePXCClusterRequest_UpdatePXCClusterParams_PXC struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Requested compute resources.
	ComputeResources *ComputeResources `protobuf:"bytes,1,opt,name=compute_resources,json=computeResources,proto3" json:"compute_resources,omitempty"`
	// PXC image, tag contains version to upgrade to.
	Image string `protobuf:"bytes,2,opt,name=image,proto3" json:"image,omitempty"`
}

func (x *UpdatePXCClusterRequest_UpdatePXCClusterParams_PXC) Reset() {
	*x = UpdatePXCClusterRequest_UpdatePXCClusterParams_PXC{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_pxc_cluster_api_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePXCClusterRequest_UpdatePXCClusterParams_PXC) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePXCClusterRequest_UpdatePXCClusterParams_PXC) ProtoMessage() {}

func (x *UpdatePXCClusterRequest_UpdatePXCClusterParams_PXC) ProtoReflect() protoreflect.Message {
	mi := &file_controller_pxc_cluster_api_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePXCClusterRequest_UpdatePXCClusterParams_PXC.ProtoReflect.Descriptor instead.
func (*UpdatePXCClusterRequest_UpdatePXCClusterParams_PXC) Descriptor() ([]byte, []int) {
	return file_controller_pxc_cluster_api_proto_rawDescGZIP(), []int{6, 0, 0}
}

func (x *UpdatePXCClusterRequest_UpdatePXCClusterParams_PXC) GetComputeResources() *ComputeResources {
	if x != nil {
		return x.ComputeResources
	}
	return nil
}

func (x *UpdatePXCClusterRequest_UpdatePXCClusterParams_PXC) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

// ProxySQL container parameters.
type UpdatePXCClusterRequest_UpdatePXCClusterParams_ProxySQL struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Requested compute resources.
	ComputeResources *ComputeResources `protobuf:"bytes,1,opt,name=compute_resources,json=computeResources,proto3" json:"compute_resources,omitempty"`
}

func (x *UpdatePXCClusterRequest_UpdatePXCClusterParams_ProxySQL) Reset() {
	*x = UpdatePXCClusterRequest_UpdatePXCClusterParams_ProxySQL{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_pxc_cluster_api_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePXCClusterRequest_UpdatePXCClusterParams_ProxySQL) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePXCClusterRequest_UpdatePXCClusterParams_ProxySQL) ProtoMessage() {}

func (x *UpdatePXCClusterRequest_UpdatePXCClusterParams_ProxySQL) ProtoReflect() protoreflect.Message {
	mi := &file_controller_pxc_cluster_api_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePXCClusterRequest_UpdatePXCClusterParams_ProxySQL.ProtoReflect.Descriptor instead.
func (*UpdatePXCClusterRequest_UpdatePXCClusterParams_ProxySQL) Descriptor() ([]byte, []int) {
	return file_controller_pxc_cluster_api_proto_rawDescGZIP(), []int{6, 0, 1}
}

func (x *UpdatePXCClusterRequest_UpdatePXCClusterParams_ProxySQL) GetComputeResources() *ComputeResources {
	if x != nil {
		return x.ComputeResources
	}
	return nil
}

// HAProxy container parameters.
type UpdatePXCClusterRequest_UpdatePXCClusterParams_HAProxy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Requested compute resources.
	ComputeResources *ComputeResources `protobuf:"bytes,1,opt,name=compute_resources,json=computeResources,proto3" json:"compute_resources,omitempty"`
}

func (x *UpdatePXCClusterRequest_UpdatePXCClusterParams_HAProxy) Reset() {
	*x = UpdatePXCClusterRequest_UpdatePXCClusterParams_HAProxy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_pxc_cluster_api_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePXCClusterRequest_UpdatePXCClusterParams_HAProxy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePXCClusterRequest_UpdatePXCClusterParams_HAProxy) ProtoMessage() {}

func (x *UpdatePXCClusterRequest_UpdatePXCClusterParams_HAProxy) ProtoReflect() protoreflect.Message {
	mi := &file_controller_pxc_cluster_api_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePXCClusterRequest_UpdatePXCClusterParams_HAProxy.ProtoReflect.Descriptor instead.
func (*UpdatePXCClusterRequest_UpdatePXCClusterParams_HAProxy) Descriptor() ([]byte, []int) {
	return file_controller_pxc_cluster_api_proto_rawDescGZIP(), []int{6, 0, 2}
}

func (x *UpdatePXCClusterRequest_UpdatePXCClusterParams_HAProxy) GetComputeResources() *ComputeResources {
	if x != nil {
		return x.ComputeResources
	}
	return nil
}

var File_controller_pxc_cluster_api_proto protoreflect.FileDescriptor

var file_controller_pxc_cluster_api_proto_rawDesc = []byte{
	0x0a, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2f, 0x70, 0x78, 0x63,
	0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x29, 0x70, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x61, 0x2e, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x1a, 0x17, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x2f, 0x70, 0x78, 0x63, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x36, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x6d, 0x77, 0x69, 0x74, 0x6b, 0x6f, 0x77, 0x2f, 0x67, 0x6f, 0x2d, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x72, 0x0a, 0x16,
	0x4c, 0x69, 0x73, 0x74, 0x50, 0x58, 0x43, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x58, 0x0a, 0x09, 0x6b, 0x75, 0x62, 0x65, 0x5f, 0x61,
	0x75, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x70, 0x65, 0x72, 0x63,
	0x6f, 0x6e, 0x61, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x64, 0x62, 0x61,
	0x61, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x41, 0x75, 0x74, 0x68, 0x42, 0x06,
	0xe2, 0xdf, 0x1f, 0x02, 0x20, 0x01, 0x52, 0x08, 0x6b, 0x75, 0x62, 0x65, 0x41, 0x75, 0x74, 0x68,
	0x22, 0xbc, 0x03, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x58, 0x43, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x66, 0x0a, 0x08,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4a,
	0x2e, 0x70, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x61, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50,
	0x58, 0x43, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x08, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x73, 0x1a, 0xb8, 0x02, 0x0a, 0x07, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4f, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x70, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x61, 0x2e, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e,
	0x44, 0x42, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x59, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x70, 0x65, 0x72, 0x63, 0x6f,
	0x6e, 0x61, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x64, 0x62, 0x61, 0x61,
	0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2e, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x53, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3b, 0x2e, 0x70, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x61, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x50, 0x58, 0x43,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x06, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x22,
	0x97, 0x01, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x50, 0x58, 0x43, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x58, 0x0a, 0x09, 0x6b, 0x75, 0x62, 0x65, 0x5f, 0x61, 0x75, 0x74, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x70, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x61,
	0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x41, 0x75, 0x74, 0x68, 0x42, 0x06, 0xe2, 0xdf, 0x1f,
	0x02, 0x20, 0x01, 0x52, 0x08, 0x6b, 0x75, 0x62, 0x65, 0x41, 0x75, 0x74, 0x68, 0x12, 0x1a, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f,
	0x02, 0x58, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x7f, 0x0a, 0x20, 0x47, 0x65, 0x74,
	0x50, 0x58, 0x43, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5b, 0x0a,
	0x0b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x39, 0x2e, 0x70, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x61, 0x2e, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x50,
	0x58, 0x43, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x0b, 0x63,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x22, 0xcc, 0x02, 0x0a, 0x17, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x58, 0x43, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x58, 0x0a, 0x09, 0x6b, 0x75, 0x62, 0x65, 0x5f, 0x61,
	0x75, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x70, 0x65, 0x72, 0x63,
	0x6f, 0x6e, 0x61, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x64, 0x62, 0x61,
	0x61, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x41, 0x75, 0x74, 0x68, 0x42, 0x06,
	0xe2, 0xdf, 0x1f, 0x02, 0x20, 0x01, 0x52, 0x08, 0x6b, 0x75, 0x62, 0x65, 0x41, 0x75, 0x74, 0x68,
	0x12, 0x1a, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06,
	0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x5b, 0x0a, 0x06,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x70,
	0x65, 0x72, 0x63, 0x6f, 0x6e, 0x61, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e,
	0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x50, 0x58, 0x43, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x20,
	0x01, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x46, 0x0a, 0x03, 0x70, 0x6d, 0x6d,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x70, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x61,
	0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x50, 0x4d, 0x4d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x03, 0x70, 0x6d,
	0x6d, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x22, 0x1a, 0x0a, 0x18, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x50, 0x58, 0x43, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xdb, 0x08, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x50, 0x58, 0x43, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x58, 0x0a, 0x09, 0x6b, 0x75, 0x62, 0x65, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x70, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x61, 0x2e, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x2e, 0x4b, 0x75, 0x62, 0x65, 0x41, 0x75, 0x74, 0x68, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x20,
	0x01, 0x52, 0x08, 0x6b, 0x75, 0x62, 0x65, 0x41, 0x75, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58,
	0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x79, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x59, 0x2e, 0x70, 0x65, 0x72, 0x63, 0x6f, 0x6e,
	0x61, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x58, 0x43, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x50, 0x58, 0x43, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x20, 0x01, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x1a, 0xce, 0x06, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x58, 0x43,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x21, 0x0a,
	0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x6f, 0x0a, 0x03, 0x70, 0x78, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5d, 0x2e,
	0x70, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x61, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x50, 0x58, 0x43, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x58, 0x43, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x2e, 0x50, 0x58, 0x43, 0x52, 0x03, 0x70, 0x78,
	0x63, 0x12, 0x7e, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x73, 0x71, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x62, 0x2e, 0x70, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x61, 0x2e, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x58, 0x43, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x58,
	0x43, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x2e, 0x50,
	0x72, 0x6f, 0x78, 0x79, 0x53, 0x51, 0x4c, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x73, 0x71,
	0x6c, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6d, 0x65, 0x12, 0x7b, 0x0a, 0x07, 0x68, 0x61, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x61, 0x2e, 0x70, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x61, 0x2e, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x58, 0x43, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50,
	0x58, 0x43, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x2e,
	0x48, 0x41, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x52, 0x07, 0x68, 0x61, 0x70, 0x72, 0x6f, 0x78, 0x79,
	0x1a, 0x85, 0x01, 0x0a, 0x03, 0x50, 0x58, 0x43, 0x12, 0x68, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x70,
	0x75, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x70, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x61, 0x2e, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e,
	0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x52, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x1a, 0x74, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x78,
	0x79, 0x53, 0x51, 0x4c, 0x12, 0x68, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x5f,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3b, 0x2e, 0x70, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x61, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70,
	0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x10, 0x63, 0x6f,
	0x6d, 0x70, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x1a, 0x73,
	0x0a, 0x07, 0x48, 0x41, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x68, 0x0a, 0x11, 0x63, 0x6f, 0x6d,
	0x70, 0x75, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x70, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x61, 0x2e, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x52, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x22, 0x1a, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x58, 0x43,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x8f, 0x01, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x58, 0x43, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x58, 0x0a, 0x09, 0x6b,
	0x75, 0x62, 0x65, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33,
	0x2e, 0x70, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x61, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x41,
	0x75, 0x74, 0x68, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x20, 0x01, 0x52, 0x08, 0x6b, 0x75, 0x62,
	0x65, 0x41, 0x75, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0x1a, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x58, 0x43, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x90, 0x01,
	0x0a, 0x18, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x58, 0x43, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x58, 0x0a, 0x09, 0x6b, 0x75,
	0x62, 0x65, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e,
	0x70, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x61, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x41, 0x75,
	0x74, 0x68, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x20, 0x01, 0x52, 0x08, 0x6b, 0x75, 0x62, 0x65,
	0x41, 0x75, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0x1b, 0x0a, 0x19, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x58, 0x43, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xdb, 0x07,
	0x0a, 0x0d, 0x50, 0x58, 0x43, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x41, 0x50, 0x49, 0x12,
	0x98, 0x01, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x58, 0x43, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x73, 0x12, 0x41, 0x2e, 0x70, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x61, 0x2e, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x50, 0x58, 0x43, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x42, 0x2e, 0x70, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x61,
	0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x58, 0x43, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xb3, 0x01, 0x0a, 0x18, 0x47,
	0x65, 0x74, 0x50, 0x58, 0x43, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x4a, 0x2e, 0x70, 0x65, 0x72, 0x63, 0x6f, 0x6e,
	0x61, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x58, 0x43, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x4b, 0x2e, 0x70, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x61, 0x2e, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x50, 0x58, 0x43, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x9b, 0x01, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x58, 0x43, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x42, 0x2e, 0x70, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x61, 0x2e,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x58, 0x43, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x43, 0x2e, 0x70, 0x65, 0x72, 0x63,
	0x6f, 0x6e, 0x61, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x64, 0x62, 0x61,
	0x61, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x58, 0x43, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x9b,
	0x01, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x58, 0x43, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x12, 0x42, 0x2e, 0x70, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x61, 0x2e, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x58, 0x43, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x43, 0x2e, 0x70, 0x65, 0x72, 0x63, 0x6f, 0x6e,
	0x61, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x58, 0x43, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x9b, 0x01, 0x0a,
	0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x58, 0x43, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x12, 0x42, 0x2e, 0x70, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x61, 0x2e, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x50, 0x58, 0x43, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x43, 0x2e, 0x70, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x61, 0x2e,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x58, 0x43, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x9e, 0x01, 0x0a, 0x11, 0x52,
	0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x58, 0x43, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x12, 0x43, 0x2e, 0x70, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x61, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x50, 0x58, 0x43, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x44, 0x2e, 0x70, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x61, 0x2e,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x58, 0x43, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x1e, 0x5a, 0x1c, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x3b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_controller_pxc_cluster_api_proto_rawDescOnce sync.Once
	file_controller_pxc_cluster_api_proto_rawDescData = file_controller_pxc_cluster_api_proto_rawDesc
)

func file_controller_pxc_cluster_api_proto_rawDescGZIP() []byte {
	file_controller_pxc_cluster_api_proto_rawDescOnce.Do(func() {
		file_controller_pxc_cluster_api_proto_rawDescData = protoimpl.X.CompressGZIP(file_controller_pxc_cluster_api_proto_rawDescData)
	})
	return file_controller_pxc_cluster_api_proto_rawDescData
}

var file_controller_pxc_cluster_api_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_controller_pxc_cluster_api_proto_goTypes = []interface{}{
	(*ListPXCClustersRequest)(nil),                                  // 0: percona.platform.dbaas.controller.v1beta1.ListPXCClustersRequest
	(*ListPXCClustersResponse)(nil),                                 // 1: percona.platform.dbaas.controller.v1beta1.ListPXCClustersResponse
	(*GetPXCClusterCredentialsRequest)(nil),                         // 2: percona.platform.dbaas.controller.v1beta1.GetPXCClusterCredentialsRequest
	(*GetPXCClusterCredentialsResponse)(nil),                        // 3: percona.platform.dbaas.controller.v1beta1.GetPXCClusterCredentialsResponse
	(*CreatePXCClusterRequest)(nil),                                 // 4: percona.platform.dbaas.controller.v1beta1.CreatePXCClusterRequest
	(*CreatePXCClusterResponse)(nil),                                // 5: percona.platform.dbaas.controller.v1beta1.CreatePXCClusterResponse
	(*UpdatePXCClusterRequest)(nil),                                 // 6: percona.platform.dbaas.controller.v1beta1.UpdatePXCClusterRequest
	(*UpdatePXCClusterResponse)(nil),                                // 7: percona.platform.dbaas.controller.v1beta1.UpdatePXCClusterResponse
	(*DeletePXCClusterRequest)(nil),                                 // 8: percona.platform.dbaas.controller.v1beta1.DeletePXCClusterRequest
	(*DeletePXCClusterResponse)(nil),                                // 9: percona.platform.dbaas.controller.v1beta1.DeletePXCClusterResponse
	(*RestartPXCClusterRequest)(nil),                                // 10: percona.platform.dbaas.controller.v1beta1.RestartPXCClusterRequest
	(*RestartPXCClusterResponse)(nil),                               // 11: percona.platform.dbaas.controller.v1beta1.RestartPXCClusterResponse
	(*ListPXCClustersResponse_Cluster)(nil),                         // 12: percona.platform.dbaas.controller.v1beta1.ListPXCClustersResponse.Cluster
	(*UpdatePXCClusterRequest_UpdatePXCClusterParams)(nil),          // 13: percona.platform.dbaas.controller.v1beta1.UpdatePXCClusterRequest.UpdatePXCClusterParams
	(*UpdatePXCClusterRequest_UpdatePXCClusterParams_PXC)(nil),      // 14: percona.platform.dbaas.controller.v1beta1.UpdatePXCClusterRequest.UpdatePXCClusterParams.PXC
	(*UpdatePXCClusterRequest_UpdatePXCClusterParams_ProxySQL)(nil), // 15: percona.platform.dbaas.controller.v1beta1.UpdatePXCClusterRequest.UpdatePXCClusterParams.ProxySQL
	(*UpdatePXCClusterRequest_UpdatePXCClusterParams_HAProxy)(nil),  // 16: percona.platform.dbaas.controller.v1beta1.UpdatePXCClusterRequest.UpdatePXCClusterParams.HAProxy
	(*KubeAuth)(nil),                                                // 17: percona.platform.dbaas.controller.v1beta1.KubeAuth
	(*PXCCredentials)(nil),                                          // 18: percona.platform.dbaas.controller.v1beta1.PXCCredentials
	(*PXCClusterParams)(nil),                                        // 19: percona.platform.dbaas.controller.v1beta1.PXCClusterParams
	(*PMMParams)(nil),                                               // 20: percona.platform.dbaas.controller.v1beta1.PMMParams
	(DBClusterState)(0),                                             // 21: percona.platform.dbaas.controller.v1beta1.DBClusterState
	(*RunningOperation)(nil),                                        // 22: percona.platform.dbaas.controller.v1beta1.RunningOperation
	(*ComputeResources)(nil),                                        // 23: percona.platform.dbaas.controller.v1beta1.ComputeResources
}
var file_controller_pxc_cluster_api_proto_depIdxs = []int32{
	17, // 0: percona.platform.dbaas.controller.v1beta1.ListPXCClustersRequest.kube_auth:type_name -> percona.platform.dbaas.controller.v1beta1.KubeAuth
	12, // 1: percona.platform.dbaas.controller.v1beta1.ListPXCClustersResponse.clusters:type_name -> percona.platform.dbaas.controller.v1beta1.ListPXCClustersResponse.Cluster
	17, // 2: percona.platform.dbaas.controller.v1beta1.GetPXCClusterCredentialsRequest.kube_auth:type_name -> percona.platform.dbaas.controller.v1beta1.KubeAuth
	18, // 3: percona.platform.dbaas.controller.v1beta1.GetPXCClusterCredentialsResponse.credentials:type_name -> percona.platform.dbaas.controller.v1beta1.PXCCredentials
	17, // 4: percona.platform.dbaas.controller.v1beta1.CreatePXCClusterRequest.kube_auth:type_name -> percona.platform.dbaas.controller.v1beta1.KubeAuth
	19, // 5: percona.platform.dbaas.controller.v1beta1.CreatePXCClusterRequest.params:type_name -> percona.platform.dbaas.controller.v1beta1.PXCClusterParams
	20, // 6: percona.platform.dbaas.controller.v1beta1.CreatePXCClusterRequest.pmm:type_name -> percona.platform.dbaas.controller.v1beta1.PMMParams
	17, // 7: percona.platform.dbaas.controller.v1beta1.UpdatePXCClusterRequest.kube_auth:type_name -> percona.platform.dbaas.controller.v1beta1.KubeAuth
	13, // 8: percona.platform.dbaas.controller.v1beta1.UpdatePXCClusterRequest.params:type_name -> percona.platform.dbaas.controller.v1beta1.UpdatePXCClusterRequest.UpdatePXCClusterParams
	17, // 9: percona.platform.dbaas.controller.v1beta1.DeletePXCClusterRequest.kube_auth:type_name -> percona.platform.dbaas.controller.v1beta1.KubeAuth
	17, // 10: percona.platform.dbaas.controller.v1beta1.RestartPXCClusterRequest.kube_auth:type_name -> percona.platform.dbaas.controller.v1beta1.KubeAuth
	21, // 11: percona.platform.dbaas.controller.v1beta1.ListPXCClustersResponse.Cluster.state:type_name -> percona.platform.dbaas.controller.v1beta1.DBClusterState
	22, // 12: percona.platform.dbaas.controller.v1beta1.ListPXCClustersResponse.Cluster.operation:type_name -> percona.platform.dbaas.controller.v1beta1.RunningOperation
	19, // 13: percona.platform.dbaas.controller.v1beta1.ListPXCClustersResponse.Cluster.params:type_name -> percona.platform.dbaas.controller.v1beta1.PXCClusterParams
	14, // 14: percona.platform.dbaas.controller.v1beta1.UpdatePXCClusterRequest.UpdatePXCClusterParams.pxc:type_name -> percona.platform.dbaas.controller.v1beta1.UpdatePXCClusterRequest.UpdatePXCClusterParams.PXC
	15, // 15: percona.platform.dbaas.controller.v1beta1.UpdatePXCClusterRequest.UpdatePXCClusterParams.proxysql:type_name -> percona.platform.dbaas.controller.v1beta1.UpdatePXCClusterRequest.UpdatePXCClusterParams.ProxySQL
	16, // 16: percona.platform.dbaas.controller.v1beta1.UpdatePXCClusterRequest.UpdatePXCClusterParams.haproxy:type_name -> percona.platform.dbaas.controller.v1beta1.UpdatePXCClusterRequest.UpdatePXCClusterParams.HAProxy
	23, // 17: percona.platform.dbaas.controller.v1beta1.UpdatePXCClusterRequest.UpdatePXCClusterParams.PXC.compute_resources:type_name -> percona.platform.dbaas.controller.v1beta1.ComputeResources
	23, // 18: percona.platform.dbaas.controller.v1beta1.UpdatePXCClusterRequest.UpdatePXCClusterParams.ProxySQL.compute_resources:type_name -> percona.platform.dbaas.controller.v1beta1.ComputeResources
	23, // 19: percona.platform.dbaas.controller.v1beta1.UpdatePXCClusterRequest.UpdatePXCClusterParams.HAProxy.compute_resources:type_name -> percona.platform.dbaas.controller.v1beta1.ComputeResources
	0,  // 20: percona.platform.dbaas.controller.v1beta1.PXCClusterAPI.ListPXCClusters:input_type -> percona.platform.dbaas.controller.v1beta1.ListPXCClustersRequest
	2,  // 21: percona.platform.dbaas.controller.v1beta1.PXCClusterAPI.GetPXCClusterCredentials:input_type -> percona.platform.dbaas.controller.v1beta1.GetPXCClusterCredentialsRequest
	4,  // 22: percona.platform.dbaas.controller.v1beta1.PXCClusterAPI.CreatePXCCluster:input_type -> percona.platform.dbaas.controller.v1beta1.CreatePXCClusterRequest
	6,  // 23: percona.platform.dbaas.controller.v1beta1.PXCClusterAPI.UpdatePXCCluster:input_type -> percona.platform.dbaas.controller.v1beta1.UpdatePXCClusterRequest
	8,  // 24: percona.platform.dbaas.controller.v1beta1.PXCClusterAPI.DeletePXCCluster:input_type -> percona.platform.dbaas.controller.v1beta1.DeletePXCClusterRequest
	10, // 25: percona.platform.dbaas.controller.v1beta1.PXCClusterAPI.RestartPXCCluster:input_type -> percona.platform.dbaas.controller.v1beta1.RestartPXCClusterRequest
	1,  // 26: percona.platform.dbaas.controller.v1beta1.PXCClusterAPI.ListPXCClusters:output_type -> percona.platform.dbaas.controller.v1beta1.ListPXCClustersResponse
	3,  // 27: percona.platform.dbaas.controller.v1beta1.PXCClusterAPI.GetPXCClusterCredentials:output_type -> percona.platform.dbaas.controller.v1beta1.GetPXCClusterCredentialsResponse
	5,  // 28: percona.platform.dbaas.controller.v1beta1.PXCClusterAPI.CreatePXCCluster:output_type -> percona.platform.dbaas.controller.v1beta1.CreatePXCClusterResponse
	7,  // 29: percona.platform.dbaas.controller.v1beta1.PXCClusterAPI.UpdatePXCCluster:output_type -> percona.platform.dbaas.controller.v1beta1.UpdatePXCClusterResponse
	9,  // 30: percona.platform.dbaas.controller.v1beta1.PXCClusterAPI.DeletePXCCluster:output_type -> percona.platform.dbaas.controller.v1beta1.DeletePXCClusterResponse
	11, // 31: percona.platform.dbaas.controller.v1beta1.PXCClusterAPI.RestartPXCCluster:output_type -> percona.platform.dbaas.controller.v1beta1.RestartPXCClusterResponse
	26, // [26:32] is the sub-list for method output_type
	20, // [20:26] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_controller_pxc_cluster_api_proto_init() }
func file_controller_pxc_cluster_api_proto_init() {
	if File_controller_pxc_cluster_api_proto != nil {
		return
	}
	file_controller_common_proto_init()
	file_controller_pxc_cluster_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_controller_pxc_cluster_api_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPXCClustersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_pxc_cluster_api_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPXCClustersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_pxc_cluster_api_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPXCClusterCredentialsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_pxc_cluster_api_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPXCClusterCredentialsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_pxc_cluster_api_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePXCClusterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_pxc_cluster_api_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePXCClusterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_pxc_cluster_api_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePXCClusterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_pxc_cluster_api_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePXCClusterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_pxc_cluster_api_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePXCClusterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_pxc_cluster_api_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePXCClusterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_pxc_cluster_api_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RestartPXCClusterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_pxc_cluster_api_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RestartPXCClusterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_pxc_cluster_api_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPXCClustersResponse_Cluster); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_pxc_cluster_api_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePXCClusterRequest_UpdatePXCClusterParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_pxc_cluster_api_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePXCClusterRequest_UpdatePXCClusterParams_PXC); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_pxc_cluster_api_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePXCClusterRequest_UpdatePXCClusterParams_ProxySQL); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_pxc_cluster_api_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePXCClusterRequest_UpdatePXCClusterParams_HAProxy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_controller_pxc_cluster_api_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_controller_pxc_cluster_api_proto_goTypes,
		DependencyIndexes: file_controller_pxc_cluster_api_proto_depIdxs,
		MessageInfos:      file_controller_pxc_cluster_api_proto_msgTypes,
	}.Build()
	File_controller_pxc_cluster_api_proto = out.File
	file_controller_pxc_cluster_api_proto_rawDesc = nil
	file_controller_pxc_cluster_api_proto_goTypes = nil
	file_controller_pxc_cluster_api_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// PXCClusterAPIClient is the client API for PXCClusterAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PXCClusterAPIClient interface {
	// ListPXCClusters returns a list of PXC clusters.
	ListPXCClusters(ctx context.Context, in *ListPXCClustersRequest, opts ...grpc.CallOption) (*ListPXCClustersResponse, error)
	// GetPXCClusterCredentials gets a cluster's connection credentials.
	GetPXCClusterCredentials(ctx context.Context, in *GetPXCClusterCredentialsRequest, opts ...grpc.CallOption) (*GetPXCClusterCredentialsResponse, error)
	// CreatePXCCluster creates a new PXC cluster.
	CreatePXCCluster(ctx context.Context, in *CreatePXCClusterRequest, opts ...grpc.CallOption) (*CreatePXCClusterResponse, error)
	// UpdatePXCCluster updates existing PXC cluster.
	UpdatePXCCluster(ctx context.Context, in *UpdatePXCClusterRequest, opts ...grpc.CallOption) (*UpdatePXCClusterResponse, error)
	// DeletePXCCluster deletes PXC cluster.
	DeletePXCCluster(ctx context.Context, in *DeletePXCClusterRequest, opts ...grpc.CallOption) (*DeletePXCClusterResponse, error)
	// RestartPXCCluster restarts PXC cluster.
	RestartPXCCluster(ctx context.Context, in *RestartPXCClusterRequest, opts ...grpc.CallOption) (*RestartPXCClusterResponse, error)
}

type pXCClusterAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewPXCClusterAPIClient(cc grpc.ClientConnInterface) PXCClusterAPIClient {
	return &pXCClusterAPIClient{cc}
}

func (c *pXCClusterAPIClient) ListPXCClusters(ctx context.Context, in *ListPXCClustersRequest, opts ...grpc.CallOption) (*ListPXCClustersResponse, error) {
	out := new(ListPXCClustersResponse)
	err := c.cc.Invoke(ctx, "/percona.platform.dbaas.controller.v1beta1.PXCClusterAPI/ListPXCClusters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pXCClusterAPIClient) GetPXCClusterCredentials(ctx context.Context, in *GetPXCClusterCredentialsRequest, opts ...grpc.CallOption) (*GetPXCClusterCredentialsResponse, error) {
	out := new(GetPXCClusterCredentialsResponse)
	err := c.cc.Invoke(ctx, "/percona.platform.dbaas.controller.v1beta1.PXCClusterAPI/GetPXCClusterCredentials", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pXCClusterAPIClient) CreatePXCCluster(ctx context.Context, in *CreatePXCClusterRequest, opts ...grpc.CallOption) (*CreatePXCClusterResponse, error) {
	out := new(CreatePXCClusterResponse)
	err := c.cc.Invoke(ctx, "/percona.platform.dbaas.controller.v1beta1.PXCClusterAPI/CreatePXCCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pXCClusterAPIClient) UpdatePXCCluster(ctx context.Context, in *UpdatePXCClusterRequest, opts ...grpc.CallOption) (*UpdatePXCClusterResponse, error) {
	out := new(UpdatePXCClusterResponse)
	err := c.cc.Invoke(ctx, "/percona.platform.dbaas.controller.v1beta1.PXCClusterAPI/UpdatePXCCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pXCClusterAPIClient) DeletePXCCluster(ctx context.Context, in *DeletePXCClusterRequest, opts ...grpc.CallOption) (*DeletePXCClusterResponse, error) {
	out := new(DeletePXCClusterResponse)
	err := c.cc.Invoke(ctx, "/percona.platform.dbaas.controller.v1beta1.PXCClusterAPI/DeletePXCCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pXCClusterAPIClient) RestartPXCCluster(ctx context.Context, in *RestartPXCClusterRequest, opts ...grpc.CallOption) (*RestartPXCClusterResponse, error) {
	out := new(RestartPXCClusterResponse)
	err := c.cc.Invoke(ctx, "/percona.platform.dbaas.controller.v1beta1.PXCClusterAPI/RestartPXCCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PXCClusterAPIServer is the server API for PXCClusterAPI service.
type PXCClusterAPIServer interface {
	// ListPXCClusters returns a list of PXC clusters.
	ListPXCClusters(context.Context, *ListPXCClustersRequest) (*ListPXCClustersResponse, error)
	// GetPXCClusterCredentials gets a cluster's connection credentials.
	GetPXCClusterCredentials(context.Context, *GetPXCClusterCredentialsRequest) (*GetPXCClusterCredentialsResponse, error)
	// CreatePXCCluster creates a new PXC cluster.
	CreatePXCCluster(context.Context, *CreatePXCClusterRequest) (*CreatePXCClusterResponse, error)
	// UpdatePXCCluster updates existing PXC cluster.
	UpdatePXCCluster(context.Context, *UpdatePXCClusterRequest) (*UpdatePXCClusterResponse, error)
	// DeletePXCCluster deletes PXC cluster.
	DeletePXCCluster(context.Context, *DeletePXCClusterRequest) (*DeletePXCClusterResponse, error)
	// RestartPXCCluster restarts PXC cluster.
	RestartPXCCluster(context.Context, *RestartPXCClusterRequest) (*RestartPXCClusterResponse, error)
}

// UnimplementedPXCClusterAPIServer can be embedded to have forward compatible implementations.
type UnimplementedPXCClusterAPIServer struct {
}

func (*UnimplementedPXCClusterAPIServer) ListPXCClusters(context.Context, *ListPXCClustersRequest) (*ListPXCClustersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPXCClusters not implemented")
}
func (*UnimplementedPXCClusterAPIServer) GetPXCClusterCredentials(context.Context, *GetPXCClusterCredentialsRequest) (*GetPXCClusterCredentialsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPXCClusterCredentials not implemented")
}
func (*UnimplementedPXCClusterAPIServer) CreatePXCCluster(context.Context, *CreatePXCClusterRequest) (*CreatePXCClusterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePXCCluster not implemented")
}
func (*UnimplementedPXCClusterAPIServer) UpdatePXCCluster(context.Context, *UpdatePXCClusterRequest) (*UpdatePXCClusterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePXCCluster not implemented")
}
func (*UnimplementedPXCClusterAPIServer) DeletePXCCluster(context.Context, *DeletePXCClusterRequest) (*DeletePXCClusterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePXCCluster not implemented")
}
func (*UnimplementedPXCClusterAPIServer) RestartPXCCluster(context.Context, *RestartPXCClusterRequest) (*RestartPXCClusterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestartPXCCluster not implemented")
}

func RegisterPXCClusterAPIServer(s *grpc.Server, srv PXCClusterAPIServer) {
	s.RegisterService(&_PXCClusterAPI_serviceDesc, srv)
}

func _PXCClusterAPI_ListPXCClusters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPXCClustersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PXCClusterAPIServer).ListPXCClusters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/percona.platform.dbaas.controller.v1beta1.PXCClusterAPI/ListPXCClusters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PXCClusterAPIServer).ListPXCClusters(ctx, req.(*ListPXCClustersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PXCClusterAPI_GetPXCClusterCredentials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPXCClusterCredentialsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PXCClusterAPIServer).GetPXCClusterCredentials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/percona.platform.dbaas.controller.v1beta1.PXCClusterAPI/GetPXCClusterCredentials",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PXCClusterAPIServer).GetPXCClusterCredentials(ctx, req.(*GetPXCClusterCredentialsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PXCClusterAPI_CreatePXCCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePXCClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PXCClusterAPIServer).CreatePXCCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/percona.platform.dbaas.controller.v1beta1.PXCClusterAPI/CreatePXCCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PXCClusterAPIServer).CreatePXCCluster(ctx, req.(*CreatePXCClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PXCClusterAPI_UpdatePXCCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePXCClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PXCClusterAPIServer).UpdatePXCCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/percona.platform.dbaas.controller.v1beta1.PXCClusterAPI/UpdatePXCCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PXCClusterAPIServer).UpdatePXCCluster(ctx, req.(*UpdatePXCClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PXCClusterAPI_DeletePXCCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePXCClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PXCClusterAPIServer).DeletePXCCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/percona.platform.dbaas.controller.v1beta1.PXCClusterAPI/DeletePXCCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PXCClusterAPIServer).DeletePXCCluster(ctx, req.(*DeletePXCClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PXCClusterAPI_RestartPXCCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestartPXCClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PXCClusterAPIServer).RestartPXCCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/percona.platform.dbaas.controller.v1beta1.PXCClusterAPI/RestartPXCCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PXCClusterAPIServer).RestartPXCCluster(ctx, req.(*RestartPXCClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PXCClusterAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "percona.platform.dbaas.controller.v1beta1.PXCClusterAPI",
	HandlerType: (*PXCClusterAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListPXCClusters",
			Handler:    _PXCClusterAPI_ListPXCClusters_Handler,
		},
		{
			MethodName: "GetPXCClusterCredentials",
			Handler:    _PXCClusterAPI_GetPXCClusterCredentials_Handler,
		},
		{
			MethodName: "CreatePXCCluster",
			Handler:    _PXCClusterAPI_CreatePXCCluster_Handler,
		},
		{
			MethodName: "UpdatePXCCluster",
			Handler:    _PXCClusterAPI_UpdatePXCCluster_Handler,
		},
		{
			MethodName: "DeletePXCCluster",
			Handler:    _PXCClusterAPI_DeletePXCCluster_Handler,
		},
		{
			MethodName: "RestartPXCCluster",
			Handler:    _PXCClusterAPI_RestartPXCCluster_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "controller/pxc_cluster_api.proto",
}

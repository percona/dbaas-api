// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.13.0
// source: controller/pxc_cluster_backup_api.proto

package controllerv1beta1

import (
	context "context"
	reflect "reflect"
	sync "sync"

	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	_ "github.com/mwitkow/go-proto-validators"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type ListPXCClusterBackupsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Kubernetes auth.
	KubeAuth *KubeAuth `protobuf:"bytes,1,opt,name=kube_auth,json=kubeAuth,proto3" json:"kube_auth,omitempty"`
}

func (x *ListPXCClusterBackupsRequest) Reset() {
	*x = ListPXCClusterBackupsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_pxc_cluster_backup_api_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPXCClusterBackupsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPXCClusterBackupsRequest) ProtoMessage() {}

func (x *ListPXCClusterBackupsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_controller_pxc_cluster_backup_api_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPXCClusterBackupsRequest.ProtoReflect.Descriptor instead.
func (*ListPXCClusterBackupsRequest) Descriptor() ([]byte, []int) {
	return file_controller_pxc_cluster_backup_api_proto_rawDescGZIP(), []int{0}
}

func (x *ListPXCClusterBackupsRequest) GetKubeAuth() *KubeAuth {
	if x != nil {
		return x.KubeAuth
	}
	return nil
}

type ListPXCClusterBackupsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Backups.
	Backups []*ListPXCClusterBackupsResponse_Backup `protobuf:"bytes,1,rep,name=backups,proto3" json:"backups,omitempty"`
}

func (x *ListPXCClusterBackupsResponse) Reset() {
	*x = ListPXCClusterBackupsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_pxc_cluster_backup_api_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPXCClusterBackupsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPXCClusterBackupsResponse) ProtoMessage() {}

func (x *ListPXCClusterBackupsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_controller_pxc_cluster_backup_api_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPXCClusterBackupsResponse.ProtoReflect.Descriptor instead.
func (*ListPXCClusterBackupsResponse) Descriptor() ([]byte, []int) {
	return file_controller_pxc_cluster_backup_api_proto_rawDescGZIP(), []int{1}
}

func (x *ListPXCClusterBackupsResponse) GetBackups() []*ListPXCClusterBackupsResponse_Backup {
	if x != nil {
		return x.Backups
	}
	return nil
}

type CreatePXCClusterBackupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Kubernetes auth.
	KubeAuth *KubeAuth `protobuf:"bytes,1,opt,name=kube_auth,json=kubeAuth,proto3" json:"kube_auth,omitempty"`
	// Cluster name.
	ClusterName string `protobuf:"bytes,2,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,omitempty"`
	// Backup name.
	BackupName string `protobuf:"bytes,3,opt,name=backup_name,json=backupName,proto3" json:"backup_name,omitempty"`
}

func (x *CreatePXCClusterBackupRequest) Reset() {
	*x = CreatePXCClusterBackupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_pxc_cluster_backup_api_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePXCClusterBackupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePXCClusterBackupRequest) ProtoMessage() {}

func (x *CreatePXCClusterBackupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_controller_pxc_cluster_backup_api_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePXCClusterBackupRequest.ProtoReflect.Descriptor instead.
func (*CreatePXCClusterBackupRequest) Descriptor() ([]byte, []int) {
	return file_controller_pxc_cluster_backup_api_proto_rawDescGZIP(), []int{2}
}

func (x *CreatePXCClusterBackupRequest) GetKubeAuth() *KubeAuth {
	if x != nil {
		return x.KubeAuth
	}
	return nil
}

func (x *CreatePXCClusterBackupRequest) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *CreatePXCClusterBackupRequest) GetBackupName() string {
	if x != nil {
		return x.BackupName
	}
	return ""
}

type CreatePXCClusterBackupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreatePXCClusterBackupResponse) Reset() {
	*x = CreatePXCClusterBackupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_pxc_cluster_backup_api_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePXCClusterBackupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePXCClusterBackupResponse) ProtoMessage() {}

func (x *CreatePXCClusterBackupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_controller_pxc_cluster_backup_api_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePXCClusterBackupResponse.ProtoReflect.Descriptor instead.
func (*CreatePXCClusterBackupResponse) Descriptor() ([]byte, []int) {
	return file_controller_pxc_cluster_backup_api_proto_rawDescGZIP(), []int{3}
}

type DeletePXCClusterBackupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Kubernetes auth.
	KubeAuth *KubeAuth `protobuf:"bytes,1,opt,name=kube_auth,json=kubeAuth,proto3" json:"kube_auth,omitempty"`
	// Backup name.
	BackupName string `protobuf:"bytes,2,opt,name=backup_name,json=backupName,proto3" json:"backup_name,omitempty"`
}

func (x *DeletePXCClusterBackupRequest) Reset() {
	*x = DeletePXCClusterBackupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_pxc_cluster_backup_api_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePXCClusterBackupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePXCClusterBackupRequest) ProtoMessage() {}

func (x *DeletePXCClusterBackupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_controller_pxc_cluster_backup_api_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePXCClusterBackupRequest.ProtoReflect.Descriptor instead.
func (*DeletePXCClusterBackupRequest) Descriptor() ([]byte, []int) {
	return file_controller_pxc_cluster_backup_api_proto_rawDescGZIP(), []int{4}
}

func (x *DeletePXCClusterBackupRequest) GetKubeAuth() *KubeAuth {
	if x != nil {
		return x.KubeAuth
	}
	return nil
}

func (x *DeletePXCClusterBackupRequest) GetBackupName() string {
	if x != nil {
		return x.BackupName
	}
	return ""
}

type DeletePXCClusterBackupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeletePXCClusterBackupResponse) Reset() {
	*x = DeletePXCClusterBackupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_pxc_cluster_backup_api_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePXCClusterBackupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePXCClusterBackupResponse) ProtoMessage() {}

func (x *DeletePXCClusterBackupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_controller_pxc_cluster_backup_api_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePXCClusterBackupResponse.ProtoReflect.Descriptor instead.
func (*DeletePXCClusterBackupResponse) Descriptor() ([]byte, []int) {
	return file_controller_pxc_cluster_backup_api_proto_rawDescGZIP(), []int{5}
}

// Backup information.
type ListPXCClusterBackupsResponse_Backup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Cluster name.
	ClusterName string `protobuf:"bytes,1,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,omitempty"`
	// Backup name.
	BackupName string `protobuf:"bytes,2,opt,name=backup_name,json=backupName,proto3" json:"backup_name,omitempty"`
	// Backup state.
	State PXCBackupState `protobuf:"varint,3,opt,name=state,proto3,enum=percona.platform.dbaas.controller.v1beta1.PXCBackupState" json:"state,omitempty"`
	// Start time.
	StartTime *timestamp.Timestamp `protobuf:"bytes,4,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// Finish time.
	FinishTime *timestamp.Timestamp `protobuf:"bytes,5,opt,name=finish_time,json=finishTime,proto3" json:"finish_time,omitempty"`
	// Currently running operation, if any.
	Operation *RunningOperation `protobuf:"bytes,6,opt,name=operation,proto3" json:"operation,omitempty"`
}

func (x *ListPXCClusterBackupsResponse_Backup) Reset() {
	*x = ListPXCClusterBackupsResponse_Backup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_pxc_cluster_backup_api_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPXCClusterBackupsResponse_Backup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPXCClusterBackupsResponse_Backup) ProtoMessage() {}

func (x *ListPXCClusterBackupsResponse_Backup) ProtoReflect() protoreflect.Message {
	mi := &file_controller_pxc_cluster_backup_api_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPXCClusterBackupsResponse_Backup.ProtoReflect.Descriptor instead.
func (*ListPXCClusterBackupsResponse_Backup) Descriptor() ([]byte, []int) {
	return file_controller_pxc_cluster_backup_api_proto_rawDescGZIP(), []int{1, 0}
}

func (x *ListPXCClusterBackupsResponse_Backup) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *ListPXCClusterBackupsResponse_Backup) GetBackupName() string {
	if x != nil {
		return x.BackupName
	}
	return ""
}

func (x *ListPXCClusterBackupsResponse_Backup) GetState() PXCBackupState {
	if x != nil {
		return x.State
	}
	return PXCBackupState_PXC_BACKUP_STATE_INVALID
}

func (x *ListPXCClusterBackupsResponse_Backup) GetStartTime() *timestamp.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *ListPXCClusterBackupsResponse_Backup) GetFinishTime() *timestamp.Timestamp {
	if x != nil {
		return x.FinishTime
	}
	return nil
}

func (x *ListPXCClusterBackupsResponse_Backup) GetOperation() *RunningOperation {
	if x != nil {
		return x.Operation
	}
	return nil
}

var File_controller_pxc_cluster_backup_api_proto protoreflect.FileDescriptor

var file_controller_pxc_cluster_backup_api_proto_rawDesc = []byte{
	0x0a, 0x27, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2f, 0x70, 0x78, 0x63,
	0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x29, 0x70, 0x65, 0x72, 0x63, 0x6f,
	0x6e, 0x61, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x64, 0x62, 0x61, 0x61,
	0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x1a, 0x17, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72,
	0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2f, 0x70, 0x78, 0x63, 0x5f, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x36, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x77, 0x69, 0x74, 0x6b, 0x6f, 0x77, 0x2f,
	0x67, 0x6f, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x6f, 0x72, 0x73, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x78, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x58, 0x43, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x58, 0x0a, 0x09, 0x6b, 0x75, 0x62, 0x65, 0x5f, 0x61, 0x75, 0x74,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x70, 0x65, 0x72, 0x63, 0x6f, 0x6e,
	0x61, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x41, 0x75, 0x74, 0x68, 0x42, 0x06, 0xe2, 0xdf,
	0x1f, 0x02, 0x20, 0x01, 0x52, 0x08, 0x6b, 0x75, 0x62, 0x65, 0x41, 0x75, 0x74, 0x68, 0x22, 0xfd,
	0x03, 0x0a, 0x1d, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x58, 0x43, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x69, 0x0a, 0x07, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x4f, 0x2e, 0x70, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x61, 0x2e, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x50, 0x58, 0x43, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x42, 0x61, 0x63, 0x6b,
	0x75, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x42, 0x61, 0x63, 0x6b,
	0x75, 0x70, 0x52, 0x07, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x73, 0x1a, 0xf0, 0x02, 0x0a, 0x06,
	0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x61, 0x63,
	0x6b, 0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4f, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x70, 0x65, 0x72, 0x63,
	0x6f, 0x6e, 0x61, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x64, 0x62, 0x61,
	0x61, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x50, 0x58, 0x43, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x59, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x70, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x61,
	0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xcd,
	0x01, 0x0a, 0x1d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x58, 0x43, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x58, 0x0a, 0x09, 0x6b, 0x75, 0x62, 0x65, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x70, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x61, 0x2e, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e,
	0x4b, 0x75, 0x62, 0x65, 0x41, 0x75, 0x74, 0x68, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x20, 0x01,
	0x52, 0x08, 0x6b, 0x75, 0x62, 0x65, 0x41, 0x75, 0x74, 0x68, 0x12, 0x29, 0x0a, 0x0c, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0b, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02,
	0x58, 0x01, 0x52, 0x0a, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x20,
	0x0a, 0x1e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x58, 0x43, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0xa2, 0x01, 0x0a, 0x1d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x58, 0x43, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x58, 0x0a, 0x09, 0x6b, 0x75, 0x62, 0x65, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x70, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x61, 0x2e,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x41, 0x75, 0x74, 0x68, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02,
	0x20, 0x01, 0x52, 0x08, 0x6b, 0x75, 0x62, 0x65, 0x41, 0x75, 0x74, 0x68, 0x12, 0x27, 0x0a, 0x0b,
	0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x0a, 0x62, 0x61, 0x63, 0x6b, 0x75,
	0x70, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x20, 0x0a, 0x1e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50,
	0x58, 0x43, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xa2, 0x04, 0x0a, 0x13, 0x50, 0x58, 0x43, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x41, 0x50, 0x49, 0x12,
	0xaa, 0x01, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x58, 0x43, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x73, 0x12, 0x47, 0x2e, 0x70, 0x65, 0x72, 0x63,
	0x6f, 0x6e, 0x61, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x64, 0x62, 0x61,
	0x61, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x58, 0x43, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x48, 0x2e, 0x70, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x61, 0x2e, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x50, 0x58, 0x43, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x42, 0x61, 0x63,
	0x6b, 0x75, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xad, 0x01, 0x0a,
	0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x58, 0x43, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x12, 0x48, 0x2e, 0x70, 0x65, 0x72, 0x63, 0x6f, 0x6e,
	0x61, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x58, 0x43, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x49, 0x2e, 0x70, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x61, 0x2e, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x50, 0x58, 0x43, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x42, 0x61,
	0x63, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xad, 0x01, 0x0a,
	0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x58, 0x43, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x12, 0x48, 0x2e, 0x70, 0x65, 0x72, 0x63, 0x6f, 0x6e,
	0x61, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x58, 0x43, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x49, 0x2e, 0x70, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x61, 0x2e, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x50, 0x58, 0x43, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x42, 0x61,
	0x63, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x1e, 0x5a, 0x1c,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x3b, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_controller_pxc_cluster_backup_api_proto_rawDescOnce sync.Once
	file_controller_pxc_cluster_backup_api_proto_rawDescData = file_controller_pxc_cluster_backup_api_proto_rawDesc
)

func file_controller_pxc_cluster_backup_api_proto_rawDescGZIP() []byte {
	file_controller_pxc_cluster_backup_api_proto_rawDescOnce.Do(func() {
		file_controller_pxc_cluster_backup_api_proto_rawDescData = protoimpl.X.CompressGZIP(file_controller_pxc_cluster_backup_api_proto_rawDescData)
	})
	return file_controller_pxc_cluster_backup_api_proto_rawDescData
}

var file_controller_pxc_cluster_backup_api_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_controller_pxc_cluster_backup_api_proto_goTypes = []interface{}{
	(*ListPXCClusterBackupsRequest)(nil),         // 0: percona.platform.dbaas.controller.v1beta1.ListPXCClusterBackupsRequest
	(*ListPXCClusterBackupsResponse)(nil),        // 1: percona.platform.dbaas.controller.v1beta1.ListPXCClusterBackupsResponse
	(*CreatePXCClusterBackupRequest)(nil),        // 2: percona.platform.dbaas.controller.v1beta1.CreatePXCClusterBackupRequest
	(*CreatePXCClusterBackupResponse)(nil),       // 3: percona.platform.dbaas.controller.v1beta1.CreatePXCClusterBackupResponse
	(*DeletePXCClusterBackupRequest)(nil),        // 4: percona.platform.dbaas.controller.v1beta1.DeletePXCClusterBackupRequest
	(*DeletePXCClusterBackupResponse)(nil),       // 5: percona.platform.dbaas.controller.v1beta1.DeletePXCClusterBackupResponse
	(*ListPXCClusterBackupsResponse_Backup)(nil), // 6: percona.platform.dbaas.controller.v1beta1.ListPXCClusterBackupsResponse.Backup
	(*KubeAuth)(nil),                             // 7: percona.platform.dbaas.controller.v1beta1.KubeAuth
	(PXCBackupState)(0),                          // 8: percona.platform.dbaas.controller.v1beta1.PXCBackupState
	(*timestamp.Timestamp)(nil),                  // 9: google.protobuf.Timestamp
	(*RunningOperation)(nil),                     // 10: percona.platform.dbaas.controller.v1beta1.RunningOperation
}
var file_controller_pxc_cluster_backup_api_proto_depIdxs = []int32{
	7,  // 0: percona.platform.dbaas.controller.v1beta1.ListPXCClusterBackupsRequest.kube_auth:type_name -> percona.platform.dbaas.controller.v1beta1.KubeAuth
	6,  // 1: percona.platform.dbaas.controller.v1beta1.ListPXCClusterBackupsResponse.backups:type_name -> percona.platform.dbaas.controller.v1beta1.ListPXCClusterBackupsResponse.Backup
	7,  // 2: percona.platform.dbaas.controller.v1beta1.CreatePXCClusterBackupRequest.kube_auth:type_name -> percona.platform.dbaas.controller.v1beta1.KubeAuth
	7,  // 3: percona.platform.dbaas.controller.v1beta1.DeletePXCClusterBackupRequest.kube_auth:type_name -> percona.platform.dbaas.controller.v1beta1.KubeAuth
	8,  // 4: percona.platform.dbaas.controller.v1beta1.ListPXCClusterBackupsResponse.Backup.state:type_name -> percona.platform.dbaas.controller.v1beta1.PXCBackupState
	9,  // 5: percona.platform.dbaas.controller.v1beta1.ListPXCClusterBackupsResponse.Backup.start_time:type_name -> google.protobuf.Timestamp
	9,  // 6: percona.platform.dbaas.controller.v1beta1.ListPXCClusterBackupsResponse.Backup.finish_time:type_name -> google.protobuf.Timestamp
	10, // 7: percona.platform.dbaas.controller.v1beta1.ListPXCClusterBackupsResponse.Backup.operation:type_name -> percona.platform.dbaas.controller.v1beta1.RunningOperation
	0,  // 8: percona.platform.dbaas.controller.v1beta1.PXCClusterBackupAPI.ListPXCClusterBackups:input_type -> percona.platform.dbaas.controller.v1beta1.ListPXCClusterBackupsRequest
	2,  // 9: percona.platform.dbaas.controller.v1beta1.PXCClusterBackupAPI.CreatePXCClusterBackup:input_type -> percona.platform.dbaas.controller.v1beta1.CreatePXCClusterBackupRequest
	4,  // 10: percona.platform.dbaas.controller.v1beta1.PXCClusterBackupAPI.DeletePXCClusterBackup:input_type -> percona.platform.dbaas.controller.v1beta1.DeletePXCClusterBackupRequest
	1,  // 11: percona.platform.dbaas.controller.v1beta1.PXCClusterBackupAPI.ListPXCClusterBackups:output_type -> percona.platform.dbaas.controller.v1beta1.ListPXCClusterBackupsResponse
	3,  // 12: percona.platform.dbaas.controller.v1beta1.PXCClusterBackupAPI.CreatePXCClusterBackup:output_type -> percona.platform.dbaas.controller.v1beta1.CreatePXCClusterBackupResponse
	5,  // 13: percona.platform.dbaas.controller.v1beta1.PXCClusterBackupAPI.DeletePXCClusterBackup:output_type -> percona.platform.dbaas.controller.v1beta1.DeletePXCClusterBackupResponse
	11, // [11:14] is the sub-list for method output_type
	8,  // [8:11] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_controller_pxc_cluster_backup_api_proto_init() }
func file_controller_pxc_cluster_backup_api_proto_init() {
	if File_controller_pxc_cluster_backup_api_proto != nil {
		return
	}
	file_controller_common_proto_init()
	file_controller_pxc_cluster_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_controller_pxc_cluster_backup_api_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPXCClusterBackupsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_pxc_cluster_backup_api_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPXCClusterBackupsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_pxc_cluster_backup_api_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePXCClusterBackupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_pxc_cluster_backup_api_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePXCClusterBackupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_pxc_cluster_backup_api_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePXCClusterBackupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_pxc_cluster_backup_api_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePXCClusterBackupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_pxc_cluster_backup_api_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPXCClusterBackupsResponse_Backup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_controller_pxc_cluster_backup_api_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_controller_pxc_cluster_backup_api_proto_goTypes,
		DependencyIndexes: file_controller_pxc_cluster_backup_api_proto_depIdxs,
		MessageInfos:      file_controller_pxc_cluster_backup_api_proto_msgTypes,
	}.Build()
	File_controller_pxc_cluster_backup_api_proto = out.File
	file_controller_pxc_cluster_backup_api_proto_rawDesc = nil
	file_controller_pxc_cluster_backup_api_proto_goTypes = nil
	file_controller_pxc_cluster_backup_api_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// PXCClusterBackupAPIClient is the client API for PXCClusterBackupAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PXCClusterBackupAPIClient interface {
	// ListPXCClusterBackups returns a list of PXC clusters backups.
	ListPXCClusterBackups(ctx context.Context, in *ListPXCClusterBackupsRequest, opts ...grpc.CallOption) (*ListPXCClusterBackupsResponse, error)
	// CreatePXCClusterBackup makes a new PXC cluster on-demand backup.
	CreatePXCClusterBackup(ctx context.Context, in *CreatePXCClusterBackupRequest, opts ...grpc.CallOption) (*CreatePXCClusterBackupResponse, error)
	// DeletePXCClusterBackup deletes PXC cluster backup.
	DeletePXCClusterBackup(ctx context.Context, in *DeletePXCClusterBackupRequest, opts ...grpc.CallOption) (*DeletePXCClusterBackupResponse, error)
}

type pXCClusterBackupAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewPXCClusterBackupAPIClient(cc grpc.ClientConnInterface) PXCClusterBackupAPIClient {
	return &pXCClusterBackupAPIClient{cc}
}

func (c *pXCClusterBackupAPIClient) ListPXCClusterBackups(ctx context.Context, in *ListPXCClusterBackupsRequest, opts ...grpc.CallOption) (*ListPXCClusterBackupsResponse, error) {
	out := new(ListPXCClusterBackupsResponse)
	err := c.cc.Invoke(ctx, "/percona.platform.dbaas.controller.v1beta1.PXCClusterBackupAPI/ListPXCClusterBackups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pXCClusterBackupAPIClient) CreatePXCClusterBackup(ctx context.Context, in *CreatePXCClusterBackupRequest, opts ...grpc.CallOption) (*CreatePXCClusterBackupResponse, error) {
	out := new(CreatePXCClusterBackupResponse)
	err := c.cc.Invoke(ctx, "/percona.platform.dbaas.controller.v1beta1.PXCClusterBackupAPI/CreatePXCClusterBackup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pXCClusterBackupAPIClient) DeletePXCClusterBackup(ctx context.Context, in *DeletePXCClusterBackupRequest, opts ...grpc.CallOption) (*DeletePXCClusterBackupResponse, error) {
	out := new(DeletePXCClusterBackupResponse)
	err := c.cc.Invoke(ctx, "/percona.platform.dbaas.controller.v1beta1.PXCClusterBackupAPI/DeletePXCClusterBackup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PXCClusterBackupAPIServer is the server API for PXCClusterBackupAPI service.
type PXCClusterBackupAPIServer interface {
	// ListPXCClusterBackups returns a list of PXC clusters backups.
	ListPXCClusterBackups(context.Context, *ListPXCClusterBackupsRequest) (*ListPXCClusterBackupsResponse, error)
	// CreatePXCClusterBackup makes a new PXC cluster on-demand backup.
	CreatePXCClusterBackup(context.Context, *CreatePXCClusterBackupRequest) (*CreatePXCClusterBackupResponse, error)
	// DeletePXCClusterBackup deletes PXC cluster backup.
	DeletePXCClusterBackup(context.Context, *DeletePXCClusterBackupRequest) (*DeletePXCClusterBackupResponse, error)
}

// UnimplementedPXCClusterBackupAPIServer can be embedded to have forward compatible implementations.
type UnimplementedPXCClusterBackupAPIServer struct {
}

func (*UnimplementedPXCClusterBackupAPIServer) ListPXCClusterBackups(context.Context, *ListPXCClusterBackupsRequest) (*ListPXCClusterBackupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPXCClusterBackups not implemented")
}
func (*UnimplementedPXCClusterBackupAPIServer) CreatePXCClusterBackup(context.Context, *CreatePXCClusterBackupRequest) (*CreatePXCClusterBackupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePXCClusterBackup not implemented")
}
func (*UnimplementedPXCClusterBackupAPIServer) DeletePXCClusterBackup(context.Context, *DeletePXCClusterBackupRequest) (*DeletePXCClusterBackupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePXCClusterBackup not implemented")
}

func RegisterPXCClusterBackupAPIServer(s *grpc.Server, srv PXCClusterBackupAPIServer) {
	s.RegisterService(&_PXCClusterBackupAPI_serviceDesc, srv)
}

func _PXCClusterBackupAPI_ListPXCClusterBackups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPXCClusterBackupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PXCClusterBackupAPIServer).ListPXCClusterBackups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/percona.platform.dbaas.controller.v1beta1.PXCClusterBackupAPI/ListPXCClusterBackups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PXCClusterBackupAPIServer).ListPXCClusterBackups(ctx, req.(*ListPXCClusterBackupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PXCClusterBackupAPI_CreatePXCClusterBackup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePXCClusterBackupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PXCClusterBackupAPIServer).CreatePXCClusterBackup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/percona.platform.dbaas.controller.v1beta1.PXCClusterBackupAPI/CreatePXCClusterBackup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PXCClusterBackupAPIServer).CreatePXCClusterBackup(ctx, req.(*CreatePXCClusterBackupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PXCClusterBackupAPI_DeletePXCClusterBackup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePXCClusterBackupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PXCClusterBackupAPIServer).DeletePXCClusterBackup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/percona.platform.dbaas.controller.v1beta1.PXCClusterBackupAPI/DeletePXCClusterBackup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PXCClusterBackupAPIServer).DeletePXCClusterBackup(ctx, req.(*DeletePXCClusterBackupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PXCClusterBackupAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "percona.platform.dbaas.controller.v1beta1.PXCClusterBackupAPI",
	HandlerType: (*PXCClusterBackupAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListPXCClusterBackups",
			Handler:    _PXCClusterBackupAPI_ListPXCClusterBackups_Handler,
		},
		{
			MethodName: "CreatePXCClusterBackup",
			Handler:    _PXCClusterBackupAPI_CreatePXCClusterBackup_Handler,
		},
		{
			MethodName: "DeletePXCClusterBackup",
			Handler:    _PXCClusterBackupAPI_DeletePXCClusterBackup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "controller/pxc_cluster_backup_api.proto",
}

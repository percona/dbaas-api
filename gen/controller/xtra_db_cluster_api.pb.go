// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.13.0
// source: controller/xtra_db_cluster_api.proto

package controllerv1beta1

import (
	context "context"
	reflect "reflect"
	sync "sync"

	proto "github.com/golang/protobuf/proto"
	_ "github.com/mwitkow/go-proto-validators"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type ListXtraDBClustersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Kubernetes auth.
	KubeAuth *KubeAuth `protobuf:"bytes,1,opt,name=kube_auth,json=kubeAuth,proto3" json:"kube_auth,omitempty"`
}

func (x *ListXtraDBClustersRequest) Reset() {
	*x = ListXtraDBClustersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_xtra_db_cluster_api_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListXtraDBClustersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListXtraDBClustersRequest) ProtoMessage() {}

func (x *ListXtraDBClustersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_controller_xtra_db_cluster_api_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListXtraDBClustersRequest.ProtoReflect.Descriptor instead.
func (*ListXtraDBClustersRequest) Descriptor() ([]byte, []int) {
	return file_controller_xtra_db_cluster_api_proto_rawDescGZIP(), []int{0}
}

func (x *ListXtraDBClustersRequest) GetKubeAuth() *KubeAuth {
	if x != nil {
		return x.KubeAuth
	}
	return nil
}

type ListXtraDBClustersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// XtraDB clusters information.
	Clusters []*ListXtraDBClustersResponse_Cluster `protobuf:"bytes,1,rep,name=clusters,proto3" json:"clusters,omitempty"`
}

func (x *ListXtraDBClustersResponse) Reset() {
	*x = ListXtraDBClustersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_xtra_db_cluster_api_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListXtraDBClustersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListXtraDBClustersResponse) ProtoMessage() {}

func (x *ListXtraDBClustersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_controller_xtra_db_cluster_api_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListXtraDBClustersResponse.ProtoReflect.Descriptor instead.
func (*ListXtraDBClustersResponse) Descriptor() ([]byte, []int) {
	return file_controller_xtra_db_cluster_api_proto_rawDescGZIP(), []int{1}
}

func (x *ListXtraDBClustersResponse) GetClusters() []*ListXtraDBClustersResponse_Cluster {
	if x != nil {
		return x.Clusters
	}
	return nil
}

type GetXtraDBClusterCredentialsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Kubernetes auth.
	KubeAuth *KubeAuth `protobuf:"bytes,1,opt,name=kube_auth,json=kubeAuth,proto3" json:"kube_auth,omitempty"`
	// Cluster name.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetXtraDBClusterCredentialsRequest) Reset() {
	*x = GetXtraDBClusterCredentialsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_xtra_db_cluster_api_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetXtraDBClusterCredentialsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetXtraDBClusterCredentialsRequest) ProtoMessage() {}

func (x *GetXtraDBClusterCredentialsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_controller_xtra_db_cluster_api_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetXtraDBClusterCredentialsRequest.ProtoReflect.Descriptor instead.
func (*GetXtraDBClusterCredentialsRequest) Descriptor() ([]byte, []int) {
	return file_controller_xtra_db_cluster_api_proto_rawDescGZIP(), []int{2}
}

func (x *GetXtraDBClusterCredentialsRequest) GetKubeAuth() *KubeAuth {
	if x != nil {
		return x.KubeAuth
	}
	return nil
}

func (x *GetXtraDBClusterCredentialsRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetXtraDBClusterCredentialsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Connection hostname and credentials.
	Credentials *XtraDBCredentials `protobuf:"bytes,1,opt,name=credentials,proto3" json:"credentials,omitempty"`
}

func (x *GetXtraDBClusterCredentialsResponse) Reset() {
	*x = GetXtraDBClusterCredentialsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_xtra_db_cluster_api_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetXtraDBClusterCredentialsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetXtraDBClusterCredentialsResponse) ProtoMessage() {}

func (x *GetXtraDBClusterCredentialsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_controller_xtra_db_cluster_api_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetXtraDBClusterCredentialsResponse.ProtoReflect.Descriptor instead.
func (*GetXtraDBClusterCredentialsResponse) Descriptor() ([]byte, []int) {
	return file_controller_xtra_db_cluster_api_proto_rawDescGZIP(), []int{3}
}

func (x *GetXtraDBClusterCredentialsResponse) GetCredentials() *XtraDBCredentials {
	if x != nil {
		return x.Credentials
	}
	return nil
}

type CreateXtraDBClusterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Kubernetes auth.
	KubeAuth *KubeAuth `protobuf:"bytes,1,opt,name=kube_auth,json=kubeAuth,proto3" json:"kube_auth,omitempty"`
	// Cluster name.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Cluster parameters.
	Params *XtraDBClusterParams `protobuf:"bytes,3,opt,name=params,proto3" json:"params,omitempty"`
	// PMM params. If nil do not turn on monitoring.
	Pmm *PMMParams `protobuf:"bytes,5,opt,name=pmm,proto3" json:"pmm,omitempty"`
	// Make DB cluster accessible outside of K8s cluster.
	Expose bool `protobuf:"varint,6,opt,name=expose,proto3" json:"expose,omitempty"`
}

func (x *CreateXtraDBClusterRequest) Reset() {
	*x = CreateXtraDBClusterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_xtra_db_cluster_api_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateXtraDBClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateXtraDBClusterRequest) ProtoMessage() {}

func (x *CreateXtraDBClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_controller_xtra_db_cluster_api_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateXtraDBClusterRequest.ProtoReflect.Descriptor instead.
func (*CreateXtraDBClusterRequest) Descriptor() ([]byte, []int) {
	return file_controller_xtra_db_cluster_api_proto_rawDescGZIP(), []int{4}
}

func (x *CreateXtraDBClusterRequest) GetKubeAuth() *KubeAuth {
	if x != nil {
		return x.KubeAuth
	}
	return nil
}

func (x *CreateXtraDBClusterRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateXtraDBClusterRequest) GetParams() *XtraDBClusterParams {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *CreateXtraDBClusterRequest) GetPmm() *PMMParams {
	if x != nil {
		return x.Pmm
	}
	return nil
}

func (x *CreateXtraDBClusterRequest) GetExpose() bool {
	if x != nil {
		return x.Expose
	}
	return false
}

type CreateXtraDBClusterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateXtraDBClusterResponse) Reset() {
	*x = CreateXtraDBClusterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_xtra_db_cluster_api_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateXtraDBClusterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateXtraDBClusterResponse) ProtoMessage() {}

func (x *CreateXtraDBClusterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_controller_xtra_db_cluster_api_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateXtraDBClusterResponse.ProtoReflect.Descriptor instead.
func (*CreateXtraDBClusterResponse) Descriptor() ([]byte, []int) {
	return file_controller_xtra_db_cluster_api_proto_rawDescGZIP(), []int{5}
}

type UpdateXtraDBClusterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Kubernetes auth.
	KubeAuth *KubeAuth `protobuf:"bytes,1,opt,name=kube_auth,json=kubeAuth,proto3" json:"kube_auth,omitempty"`
	// Cluster name.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Cluster parameters.
	Params *UpdateXtraDBClusterRequest_UpdateXtraDBClusterParams `protobuf:"bytes,3,opt,name=params,proto3" json:"params,omitempty"`
}

func (x *UpdateXtraDBClusterRequest) Reset() {
	*x = UpdateXtraDBClusterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_xtra_db_cluster_api_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateXtraDBClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateXtraDBClusterRequest) ProtoMessage() {}

func (x *UpdateXtraDBClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_controller_xtra_db_cluster_api_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateXtraDBClusterRequest.ProtoReflect.Descriptor instead.
func (*UpdateXtraDBClusterRequest) Descriptor() ([]byte, []int) {
	return file_controller_xtra_db_cluster_api_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateXtraDBClusterRequest) GetKubeAuth() *KubeAuth {
	if x != nil {
		return x.KubeAuth
	}
	return nil
}

func (x *UpdateXtraDBClusterRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateXtraDBClusterRequest) GetParams() *UpdateXtraDBClusterRequest_UpdateXtraDBClusterParams {
	if x != nil {
		return x.Params
	}
	return nil
}

type UpdateXtraDBClusterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateXtraDBClusterResponse) Reset() {
	*x = UpdateXtraDBClusterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_xtra_db_cluster_api_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateXtraDBClusterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateXtraDBClusterResponse) ProtoMessage() {}

func (x *UpdateXtraDBClusterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_controller_xtra_db_cluster_api_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateXtraDBClusterResponse.ProtoReflect.Descriptor instead.
func (*UpdateXtraDBClusterResponse) Descriptor() ([]byte, []int) {
	return file_controller_xtra_db_cluster_api_proto_rawDescGZIP(), []int{7}
}

type DeleteXtraDBClusterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Kubernetes auth.
	KubeAuth *KubeAuth `protobuf:"bytes,1,opt,name=kube_auth,json=kubeAuth,proto3" json:"kube_auth,omitempty"`
	// Cluster name.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteXtraDBClusterRequest) Reset() {
	*x = DeleteXtraDBClusterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_xtra_db_cluster_api_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteXtraDBClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteXtraDBClusterRequest) ProtoMessage() {}

func (x *DeleteXtraDBClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_controller_xtra_db_cluster_api_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteXtraDBClusterRequest.ProtoReflect.Descriptor instead.
func (*DeleteXtraDBClusterRequest) Descriptor() ([]byte, []int) {
	return file_controller_xtra_db_cluster_api_proto_rawDescGZIP(), []int{8}
}

func (x *DeleteXtraDBClusterRequest) GetKubeAuth() *KubeAuth {
	if x != nil {
		return x.KubeAuth
	}
	return nil
}

func (x *DeleteXtraDBClusterRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type DeleteXtraDBClusterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteXtraDBClusterResponse) Reset() {
	*x = DeleteXtraDBClusterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_xtra_db_cluster_api_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteXtraDBClusterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteXtraDBClusterResponse) ProtoMessage() {}

func (x *DeleteXtraDBClusterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_controller_xtra_db_cluster_api_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteXtraDBClusterResponse.ProtoReflect.Descriptor instead.
func (*DeleteXtraDBClusterResponse) Descriptor() ([]byte, []int) {
	return file_controller_xtra_db_cluster_api_proto_rawDescGZIP(), []int{9}
}

type RestartXtraDBClusterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Kubernetes auth.
	KubeAuth *KubeAuth `protobuf:"bytes,1,opt,name=kube_auth,json=kubeAuth,proto3" json:"kube_auth,omitempty"`
	// Cluster name.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *RestartXtraDBClusterRequest) Reset() {
	*x = RestartXtraDBClusterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_xtra_db_cluster_api_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RestartXtraDBClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestartXtraDBClusterRequest) ProtoMessage() {}

func (x *RestartXtraDBClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_controller_xtra_db_cluster_api_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestartXtraDBClusterRequest.ProtoReflect.Descriptor instead.
func (*RestartXtraDBClusterRequest) Descriptor() ([]byte, []int) {
	return file_controller_xtra_db_cluster_api_proto_rawDescGZIP(), []int{10}
}

func (x *RestartXtraDBClusterRequest) GetKubeAuth() *KubeAuth {
	if x != nil {
		return x.KubeAuth
	}
	return nil
}

func (x *RestartXtraDBClusterRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type RestartXtraDBClusterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RestartXtraDBClusterResponse) Reset() {
	*x = RestartXtraDBClusterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_xtra_db_cluster_api_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RestartXtraDBClusterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestartXtraDBClusterResponse) ProtoMessage() {}

func (x *RestartXtraDBClusterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_controller_xtra_db_cluster_api_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestartXtraDBClusterResponse.ProtoReflect.Descriptor instead.
func (*RestartXtraDBClusterResponse) Descriptor() ([]byte, []int) {
	return file_controller_xtra_db_cluster_api_proto_rawDescGZIP(), []int{11}
}

// Cluster represents XtraDB cluster information.
type ListXtraDBClustersResponse_Cluster struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Cluster name.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Cluster state.
	State XtraDBClusterState `protobuf:"varint,2,opt,name=state,proto3,enum=percona.platform.dbaas.controller.v1beta1.XtraDBClusterState" json:"state,omitempty"`
	// Currently running operation, if any.
	Operation *RunningOperation `protobuf:"bytes,3,opt,name=operation,proto3" json:"operation,omitempty"`
	// Cluster parameters.
	Params *XtraDBClusterParams `protobuf:"bytes,4,opt,name=params,proto3" json:"params,omitempty"`
	// DB cluster accessible outside of K8s cluster.
	Exposed bool `protobuf:"varint,5,opt,name=exposed,proto3" json:"exposed,omitempty"`
	// Docker image used in the cluster. Version of the XtraDB is included in the image tag.
	Image string `protobuf:"bytes,6,opt,name=image,proto3" json:"image,omitempty"`
}

func (x *ListXtraDBClustersResponse_Cluster) Reset() {
	*x = ListXtraDBClustersResponse_Cluster{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_xtra_db_cluster_api_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListXtraDBClustersResponse_Cluster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListXtraDBClustersResponse_Cluster) ProtoMessage() {}

func (x *ListXtraDBClustersResponse_Cluster) ProtoReflect() protoreflect.Message {
	mi := &file_controller_xtra_db_cluster_api_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListXtraDBClustersResponse_Cluster.ProtoReflect.Descriptor instead.
func (*ListXtraDBClustersResponse_Cluster) Descriptor() ([]byte, []int) {
	return file_controller_xtra_db_cluster_api_proto_rawDescGZIP(), []int{1, 0}
}

func (x *ListXtraDBClustersResponse_Cluster) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListXtraDBClustersResponse_Cluster) GetState() XtraDBClusterState {
	if x != nil {
		return x.State
	}
	return XtraDBClusterState_XTRA_DB_CLUSTER_STATE_INVALID
}

func (x *ListXtraDBClustersResponse_Cluster) GetOperation() *RunningOperation {
	if x != nil {
		return x.Operation
	}
	return nil
}

func (x *ListXtraDBClustersResponse_Cluster) GetParams() *XtraDBClusterParams {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *ListXtraDBClustersResponse_Cluster) GetExposed() bool {
	if x != nil {
		return x.Exposed
	}
	return false
}

func (x *ListXtraDBClustersResponse_Cluster) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

// UpdateXtraDBClusterParams represents XtraDB cluster parameters that can be updated.
type UpdateXtraDBClusterRequest_UpdateXtraDBClusterParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Cluster size.
	ClusterSize int32 `protobuf:"varint,1,opt,name=cluster_size,json=clusterSize,proto3" json:"cluster_size,omitempty"`
	// PXC container parameters.
	Pxc *UpdateXtraDBClusterRequest_UpdateXtraDBClusterParams_PXC `protobuf:"bytes,2,opt,name=pxc,proto3" json:"pxc,omitempty"`
	// ProxySQL container parameters.
	Proxysql *UpdateXtraDBClusterRequest_UpdateXtraDBClusterParams_ProxySQL `protobuf:"bytes,3,opt,name=proxysql,proto3" json:"proxysql,omitempty"`
	// Suspend cluster `pause: true`.
	Suspend bool `protobuf:"varint,5,opt,name=suspend,proto3" json:"suspend,omitempty"`
	// Resume cluster `pause: false`.
	Resume bool `protobuf:"varint,6,opt,name=resume,proto3" json:"resume,omitempty"`
	// HAProxy container parameters.
	Haproxy *UpdateXtraDBClusterRequest_UpdateXtraDBClusterParams_HAProxy `protobuf:"bytes,7,opt,name=haproxy,proto3" json:"haproxy,omitempty"`
}

func (x *UpdateXtraDBClusterRequest_UpdateXtraDBClusterParams) Reset() {
	*x = UpdateXtraDBClusterRequest_UpdateXtraDBClusterParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_xtra_db_cluster_api_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateXtraDBClusterRequest_UpdateXtraDBClusterParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateXtraDBClusterRequest_UpdateXtraDBClusterParams) ProtoMessage() {}

func (x *UpdateXtraDBClusterRequest_UpdateXtraDBClusterParams) ProtoReflect() protoreflect.Message {
	mi := &file_controller_xtra_db_cluster_api_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateXtraDBClusterRequest_UpdateXtraDBClusterParams.ProtoReflect.Descriptor instead.
func (*UpdateXtraDBClusterRequest_UpdateXtraDBClusterParams) Descriptor() ([]byte, []int) {
	return file_controller_xtra_db_cluster_api_proto_rawDescGZIP(), []int{6, 0}
}

func (x *UpdateXtraDBClusterRequest_UpdateXtraDBClusterParams) GetClusterSize() int32 {
	if x != nil {
		return x.ClusterSize
	}
	return 0
}

func (x *UpdateXtraDBClusterRequest_UpdateXtraDBClusterParams) GetPxc() *UpdateXtraDBClusterRequest_UpdateXtraDBClusterParams_PXC {
	if x != nil {
		return x.Pxc
	}
	return nil
}

func (x *UpdateXtraDBClusterRequest_UpdateXtraDBClusterParams) GetProxysql() *UpdateXtraDBClusterRequest_UpdateXtraDBClusterParams_ProxySQL {
	if x != nil {
		return x.Proxysql
	}
	return nil
}

func (x *UpdateXtraDBClusterRequest_UpdateXtraDBClusterParams) GetSuspend() bool {
	if x != nil {
		return x.Suspend
	}
	return false
}

func (x *UpdateXtraDBClusterRequest_UpdateXtraDBClusterParams) GetResume() bool {
	if x != nil {
		return x.Resume
	}
	return false
}

func (x *UpdateXtraDBClusterRequest_UpdateXtraDBClusterParams) GetHaproxy() *UpdateXtraDBClusterRequest_UpdateXtraDBClusterParams_HAProxy {
	if x != nil {
		return x.Haproxy
	}
	return nil
}

// PXC container parameters.
type UpdateXtraDBClusterRequest_UpdateXtraDBClusterParams_PXC struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Requested compute resources.
	ComputeResources *ComputeResources `protobuf:"bytes,1,opt,name=compute_resources,json=computeResources,proto3" json:"compute_resources,omitempty"`
	// PXC image, tag contains version to upgrade to.
	Image string `protobuf:"bytes,2,opt,name=image,proto3" json:"image,omitempty"`
}

func (x *UpdateXtraDBClusterRequest_UpdateXtraDBClusterParams_PXC) Reset() {
	*x = UpdateXtraDBClusterRequest_UpdateXtraDBClusterParams_PXC{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_xtra_db_cluster_api_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateXtraDBClusterRequest_UpdateXtraDBClusterParams_PXC) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateXtraDBClusterRequest_UpdateXtraDBClusterParams_PXC) ProtoMessage() {}

func (x *UpdateXtraDBClusterRequest_UpdateXtraDBClusterParams_PXC) ProtoReflect() protoreflect.Message {
	mi := &file_controller_xtra_db_cluster_api_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateXtraDBClusterRequest_UpdateXtraDBClusterParams_PXC.ProtoReflect.Descriptor instead.
func (*UpdateXtraDBClusterRequest_UpdateXtraDBClusterParams_PXC) Descriptor() ([]byte, []int) {
	return file_controller_xtra_db_cluster_api_proto_rawDescGZIP(), []int{6, 0, 0}
}

func (x *UpdateXtraDBClusterRequest_UpdateXtraDBClusterParams_PXC) GetComputeResources() *ComputeResources {
	if x != nil {
		return x.ComputeResources
	}
	return nil
}

func (x *UpdateXtraDBClusterRequest_UpdateXtraDBClusterParams_PXC) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

// ProxySQL container parameters.
type UpdateXtraDBClusterRequest_UpdateXtraDBClusterParams_ProxySQL struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Requested compute resources.
	ComputeResources *ComputeResources `protobuf:"bytes,1,opt,name=compute_resources,json=computeResources,proto3" json:"compute_resources,omitempty"`
}

func (x *UpdateXtraDBClusterRequest_UpdateXtraDBClusterParams_ProxySQL) Reset() {
	*x = UpdateXtraDBClusterRequest_UpdateXtraDBClusterParams_ProxySQL{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_xtra_db_cluster_api_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateXtraDBClusterRequest_UpdateXtraDBClusterParams_ProxySQL) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateXtraDBClusterRequest_UpdateXtraDBClusterParams_ProxySQL) ProtoMessage() {}

func (x *UpdateXtraDBClusterRequest_UpdateXtraDBClusterParams_ProxySQL) ProtoReflect() protoreflect.Message {
	mi := &file_controller_xtra_db_cluster_api_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateXtraDBClusterRequest_UpdateXtraDBClusterParams_ProxySQL.ProtoReflect.Descriptor instead.
func (*UpdateXtraDBClusterRequest_UpdateXtraDBClusterParams_ProxySQL) Descriptor() ([]byte, []int) {
	return file_controller_xtra_db_cluster_api_proto_rawDescGZIP(), []int{6, 0, 1}
}

func (x *UpdateXtraDBClusterRequest_UpdateXtraDBClusterParams_ProxySQL) GetComputeResources() *ComputeResources {
	if x != nil {
		return x.ComputeResources
	}
	return nil
}

// HAProxy container parameters.
type UpdateXtraDBClusterRequest_UpdateXtraDBClusterParams_HAProxy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Requested compute resources.
	ComputeResources *ComputeResources `protobuf:"bytes,1,opt,name=compute_resources,json=computeResources,proto3" json:"compute_resources,omitempty"`
}

func (x *UpdateXtraDBClusterRequest_UpdateXtraDBClusterParams_HAProxy) Reset() {
	*x = UpdateXtraDBClusterRequest_UpdateXtraDBClusterParams_HAProxy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_xtra_db_cluster_api_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateXtraDBClusterRequest_UpdateXtraDBClusterParams_HAProxy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateXtraDBClusterRequest_UpdateXtraDBClusterParams_HAProxy) ProtoMessage() {}

func (x *UpdateXtraDBClusterRequest_UpdateXtraDBClusterParams_HAProxy) ProtoReflect() protoreflect.Message {
	mi := &file_controller_xtra_db_cluster_api_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateXtraDBClusterRequest_UpdateXtraDBClusterParams_HAProxy.ProtoReflect.Descriptor instead.
func (*UpdateXtraDBClusterRequest_UpdateXtraDBClusterParams_HAProxy) Descriptor() ([]byte, []int) {
	return file_controller_xtra_db_cluster_api_proto_rawDescGZIP(), []int{6, 0, 2}
}

func (x *UpdateXtraDBClusterRequest_UpdateXtraDBClusterParams_HAProxy) GetComputeResources() *ComputeResources {
	if x != nil {
		return x.ComputeResources
	}
	return nil
}

var File_controller_xtra_db_cluster_api_proto protoreflect.FileDescriptor

var file_controller_xtra_db_cluster_api_proto_rawDesc = []byte{
	0x0a, 0x24, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2f, 0x78, 0x74, 0x72,
	0x61, 0x5f, 0x64, 0x62, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x29, 0x70, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x61, 0x2e,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x1a, 0x17, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2f, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2f, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x64, 0x62, 0x5f, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x36, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x77, 0x69, 0x74, 0x6b, 0x6f, 0x77,
	0x2f, 0x67, 0x6f, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x6f, 0x72, 0x73, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x75, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x58, 0x74, 0x72, 0x61,
	0x44, 0x42, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x58, 0x0a, 0x09, 0x6b, 0x75, 0x62, 0x65, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x70, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x61, 0x2e, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x2e, 0x4b, 0x75, 0x62, 0x65, 0x41, 0x75, 0x74, 0x68, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x20,
	0x01, 0x52, 0x08, 0x6b, 0x75, 0x62, 0x65, 0x41, 0x75, 0x74, 0x68, 0x22, 0xdf, 0x03, 0x0a, 0x1a,
	0x4c, 0x69, 0x73, 0x74, 0x58, 0x74, 0x72, 0x61, 0x44, 0x42, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x69, 0x0a, 0x08, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x70,
	0x65, 0x72, 0x63, 0x6f, 0x6e, 0x61, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e,
	0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x58, 0x74, 0x72,
	0x61, 0x44, 0x42, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x08, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x73, 0x1a, 0xd5, 0x02, 0x0a, 0x07, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x53, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x3d, 0x2e, 0x70, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x61, 0x2e, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x2e, 0x58, 0x74, 0x72, 0x61, 0x44, 0x42, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x59, 0x0a, 0x09, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e,
	0x70, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x61, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e,
	0x67, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x56, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x70, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x61, 0x2e,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2e, 0x58, 0x74, 0x72, 0x61, 0x44, 0x42, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x65, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x22, 0x9a, 0x01,
	0x0a, 0x22, 0x47, 0x65, 0x74, 0x58, 0x74, 0x72, 0x61, 0x44, 0x42, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x58, 0x0a, 0x09, 0x6b, 0x75, 0x62, 0x65, 0x5f, 0x61, 0x75, 0x74,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x70, 0x65, 0x72, 0x63, 0x6f, 0x6e,
	0x61, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x41, 0x75, 0x74, 0x68, 0x42, 0x06, 0xe2, 0xdf,
	0x1f, 0x02, 0x20, 0x01, 0x52, 0x08, 0x6b, 0x75, 0x62, 0x65, 0x41, 0x75, 0x74, 0x68, 0x12, 0x1a,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf,
	0x1f, 0x02, 0x58, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x85, 0x01, 0x0a, 0x23, 0x47,
	0x65, 0x74, 0x58, 0x74, 0x72, 0x61, 0x44, 0x42, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x5e, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x70, 0x65, 0x72, 0x63, 0x6f, 0x6e,
	0x61, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2e, 0x58, 0x74, 0x72, 0x61, 0x44, 0x42, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x73, 0x22, 0xd2, 0x02, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x58, 0x74, 0x72,
	0x61, 0x44, 0x42, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x58, 0x0a, 0x09, 0x6b, 0x75, 0x62, 0x65, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x70, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x61, 0x2e, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x2e, 0x4b, 0x75, 0x62, 0x65, 0x41, 0x75, 0x74, 0x68, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x20,
	0x01, 0x52, 0x08, 0x6b, 0x75, 0x62, 0x65, 0x41, 0x75, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58,
	0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x5e, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x70, 0x65, 0x72, 0x63, 0x6f, 0x6e,
	0x61, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2e, 0x58, 0x74, 0x72, 0x61, 0x44, 0x42, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x20, 0x01, 0x52,
	0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x46, 0x0a, 0x03, 0x70, 0x6d, 0x6d, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x70, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x61, 0x2e, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x2e, 0x50, 0x4d, 0x4d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x03, 0x70, 0x6d, 0x6d, 0x12,
	0x16, 0x0a, 0x06, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x22, 0x1d, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x58, 0x74, 0x72, 0x61, 0x44, 0x42, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xfb, 0x08, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x58, 0x74, 0x72, 0x61, 0x44, 0x42, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x58, 0x0a, 0x09, 0x6b, 0x75, 0x62, 0x65, 0x5f, 0x61, 0x75,
	0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x70, 0x65, 0x72, 0x63, 0x6f,
	0x6e, 0x61, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x64, 0x62, 0x61, 0x61,
	0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x41, 0x75, 0x74, 0x68, 0x42, 0x06, 0xe2,
	0xdf, 0x1f, 0x02, 0x20, 0x01, 0x52, 0x08, 0x6b, 0x75, 0x62, 0x65, 0x41, 0x75, 0x74, 0x68, 0x12,
	0x1a, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2,
	0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x7f, 0x0a, 0x06, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5f, 0x2e, 0x70, 0x65,
	0x72, 0x63, 0x6f, 0x6e, 0x61, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x64,
	0x62, 0x61, 0x61, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x58, 0x74,
	0x72, 0x61, 0x44, 0x42, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x58, 0x74, 0x72, 0x61, 0x44, 0x42, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x42, 0x06, 0xe2, 0xdf,
	0x1f, 0x02, 0x20, 0x01, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0xe5, 0x06, 0x0a,
	0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x58, 0x74, 0x72, 0x61, 0x44, 0x42, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x75, 0x0a,
	0x03, 0x70, 0x78, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x63, 0x2e, 0x70, 0x65, 0x72,
	0x63, 0x6f, 0x6e, 0x61, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x64, 0x62,
	0x61, 0x61, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x58, 0x74, 0x72,
	0x61, 0x44, 0x42, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x58, 0x74, 0x72, 0x61, 0x44, 0x42, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x2e, 0x50, 0x58, 0x43, 0x52,
	0x03, 0x70, 0x78, 0x63, 0x12, 0x84, 0x01, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x73, 0x71,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x68, 0x2e, 0x70, 0x65, 0x72, 0x63, 0x6f, 0x6e,
	0x61, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x58, 0x74, 0x72, 0x61, 0x44, 0x42,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x58, 0x74, 0x72, 0x61, 0x44, 0x42, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x53, 0x51,
	0x4c, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x73, 0x71, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75,
	0x73, 0x70, 0x65, 0x6e, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x12, 0x81, 0x01,
	0x0a, 0x07, 0x68, 0x61, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x67, 0x2e, 0x70, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x61, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x58, 0x74, 0x72, 0x61, 0x44, 0x42, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x58, 0x74, 0x72,
	0x61, 0x44, 0x42, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x2e, 0x48, 0x41, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x52, 0x07, 0x68, 0x61, 0x70, 0x72, 0x6f, 0x78,
	0x79, 0x1a, 0x85, 0x01, 0x0a, 0x03, 0x50, 0x58, 0x43, 0x12, 0x68, 0x0a, 0x11, 0x63, 0x6f, 0x6d,
	0x70, 0x75, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x70, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x61, 0x2e, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x52, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x1a, 0x74, 0x0a, 0x08, 0x50, 0x72, 0x6f,
	0x78, 0x79, 0x53, 0x51, 0x4c, 0x12, 0x68, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65,
	0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3b, 0x2e, 0x70, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x61, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6d,
	0x70, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x10, 0x63,
	0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x1a,
	0x73, 0x0a, 0x07, 0x48, 0x41, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x68, 0x0a, 0x11, 0x63, 0x6f,
	0x6d, 0x70, 0x75, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x70, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x61, 0x2e,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x52, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x22, 0x1d, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x58, 0x74,
	0x72, 0x61, 0x44, 0x42, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x92, 0x01, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x58, 0x74,
	0x72, 0x61, 0x44, 0x42, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x58, 0x0a, 0x09, 0x6b, 0x75, 0x62, 0x65, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x70, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x61, 0x2e,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x41, 0x75, 0x74, 0x68, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02,
	0x20, 0x01, 0x52, 0x08, 0x6b, 0x75, 0x62, 0x65, 0x41, 0x75, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02,
	0x58, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x1d, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x58, 0x74, 0x72, 0x61, 0x44, 0x42, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x93, 0x01, 0x0a, 0x1b, 0x52, 0x65, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x58, 0x74, 0x72, 0x61, 0x44, 0x42, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x58, 0x0a, 0x09, 0x6b, 0x75, 0x62, 0x65, 0x5f,
	0x61, 0x75, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x70, 0x65, 0x72,
	0x63, 0x6f, 0x6e, 0x61, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x64, 0x62,
	0x61, 0x61, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x41, 0x75, 0x74, 0x68, 0x42,
	0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x20, 0x01, 0x52, 0x08, 0x6b, 0x75, 0x62, 0x65, 0x41, 0x75, 0x74,
	0x68, 0x12, 0x1a, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x1e, 0x0a,
	0x1c, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x58, 0x74, 0x72, 0x61, 0x44, 0x42, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x94, 0x08,
	0x0a, 0x10, 0x58, 0x74, 0x72, 0x61, 0x44, 0x42, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x41,
	0x50, 0x49, 0x12, 0xa1, 0x01, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x58, 0x74, 0x72, 0x61, 0x44,
	0x42, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x44, 0x2e, 0x70, 0x65, 0x72, 0x63,
	0x6f, 0x6e, 0x61, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x64, 0x62, 0x61,
	0x61, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x58, 0x74, 0x72, 0x61, 0x44, 0x42,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x45, 0x2e, 0x70, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x61, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x58, 0x74, 0x72, 0x61, 0x44, 0x42, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xbc, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x58, 0x74,
	0x72, 0x61, 0x44, 0x42, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x4d, 0x2e, 0x70, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x61,
	0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x58, 0x74, 0x72, 0x61, 0x44, 0x42, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x4e, 0x2e, 0x70, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x61, 0x2e,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x58, 0x74, 0x72, 0x61, 0x44, 0x42, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xa4, 0x01, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x58, 0x74, 0x72, 0x61, 0x44, 0x42, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x45, 0x2e,
	0x70, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x61, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x58, 0x74, 0x72, 0x61, 0x44, 0x42, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x46, 0x2e, 0x70, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x61, 0x2e, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x58, 0x74, 0x72, 0x61, 0x44, 0x42, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xa4, 0x01, 0x0a,
	0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x58, 0x74, 0x72, 0x61, 0x44, 0x42, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x12, 0x45, 0x2e, 0x70, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x61, 0x2e, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x58, 0x74, 0x72, 0x61, 0x44, 0x42, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x46, 0x2e, 0x70, 0x65,
	0x72, 0x63, 0x6f, 0x6e, 0x61, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x64,
	0x62, 0x61, 0x61, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x58, 0x74,
	0x72, 0x61, 0x44, 0x42, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0xa4, 0x01, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x58, 0x74,
	0x72, 0x61, 0x44, 0x42, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x45, 0x2e, 0x70, 0x65,
	0x72, 0x63, 0x6f, 0x6e, 0x61, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x64,
	0x62, 0x61, 0x61, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x58, 0x74,
	0x72, 0x61, 0x44, 0x42, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x46, 0x2e, 0x70, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x61, 0x2e, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x58, 0x74, 0x72, 0x61, 0x44, 0x42, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xa7, 0x01, 0x0a, 0x14, 0x52,
	0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x58, 0x74, 0x72, 0x61, 0x44, 0x42, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x12, 0x46, 0x2e, 0x70, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x61, 0x2e, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e,
	0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x58, 0x74, 0x72, 0x61, 0x44, 0x42, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x47, 0x2e, 0x70, 0x65,
	0x72, 0x63, 0x6f, 0x6e, 0x61, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x64,
	0x62, 0x61, 0x61, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x58,
	0x74, 0x72, 0x61, 0x44, 0x42, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x42, 0x1e, 0x5a, 0x1c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x3b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_controller_xtra_db_cluster_api_proto_rawDescOnce sync.Once
	file_controller_xtra_db_cluster_api_proto_rawDescData = file_controller_xtra_db_cluster_api_proto_rawDesc
)

func file_controller_xtra_db_cluster_api_proto_rawDescGZIP() []byte {
	file_controller_xtra_db_cluster_api_proto_rawDescOnce.Do(func() {
		file_controller_xtra_db_cluster_api_proto_rawDescData = protoimpl.X.CompressGZIP(file_controller_xtra_db_cluster_api_proto_rawDescData)
	})
	return file_controller_xtra_db_cluster_api_proto_rawDescData
}

var file_controller_xtra_db_cluster_api_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_controller_xtra_db_cluster_api_proto_goTypes = []interface{}{
	(*ListXtraDBClustersRequest)(nil),                                     // 0: percona.platform.dbaas.controller.v1beta1.ListXtraDBClustersRequest
	(*ListXtraDBClustersResponse)(nil),                                    // 1: percona.platform.dbaas.controller.v1beta1.ListXtraDBClustersResponse
	(*GetXtraDBClusterCredentialsRequest)(nil),                            // 2: percona.platform.dbaas.controller.v1beta1.GetXtraDBClusterCredentialsRequest
	(*GetXtraDBClusterCredentialsResponse)(nil),                           // 3: percona.platform.dbaas.controller.v1beta1.GetXtraDBClusterCredentialsResponse
	(*CreateXtraDBClusterRequest)(nil),                                    // 4: percona.platform.dbaas.controller.v1beta1.CreateXtraDBClusterRequest
	(*CreateXtraDBClusterResponse)(nil),                                   // 5: percona.platform.dbaas.controller.v1beta1.CreateXtraDBClusterResponse
	(*UpdateXtraDBClusterRequest)(nil),                                    // 6: percona.platform.dbaas.controller.v1beta1.UpdateXtraDBClusterRequest
	(*UpdateXtraDBClusterResponse)(nil),                                   // 7: percona.platform.dbaas.controller.v1beta1.UpdateXtraDBClusterResponse
	(*DeleteXtraDBClusterRequest)(nil),                                    // 8: percona.platform.dbaas.controller.v1beta1.DeleteXtraDBClusterRequest
	(*DeleteXtraDBClusterResponse)(nil),                                   // 9: percona.platform.dbaas.controller.v1beta1.DeleteXtraDBClusterResponse
	(*RestartXtraDBClusterRequest)(nil),                                   // 10: percona.platform.dbaas.controller.v1beta1.RestartXtraDBClusterRequest
	(*RestartXtraDBClusterResponse)(nil),                                  // 11: percona.platform.dbaas.controller.v1beta1.RestartXtraDBClusterResponse
	(*ListXtraDBClustersResponse_Cluster)(nil),                            // 12: percona.platform.dbaas.controller.v1beta1.ListXtraDBClustersResponse.Cluster
	(*UpdateXtraDBClusterRequest_UpdateXtraDBClusterParams)(nil),          // 13: percona.platform.dbaas.controller.v1beta1.UpdateXtraDBClusterRequest.UpdateXtraDBClusterParams
	(*UpdateXtraDBClusterRequest_UpdateXtraDBClusterParams_PXC)(nil),      // 14: percona.platform.dbaas.controller.v1beta1.UpdateXtraDBClusterRequest.UpdateXtraDBClusterParams.PXC
	(*UpdateXtraDBClusterRequest_UpdateXtraDBClusterParams_ProxySQL)(nil), // 15: percona.platform.dbaas.controller.v1beta1.UpdateXtraDBClusterRequest.UpdateXtraDBClusterParams.ProxySQL
	(*UpdateXtraDBClusterRequest_UpdateXtraDBClusterParams_HAProxy)(nil),  // 16: percona.platform.dbaas.controller.v1beta1.UpdateXtraDBClusterRequest.UpdateXtraDBClusterParams.HAProxy
	(*KubeAuth)(nil),            // 17: percona.platform.dbaas.controller.v1beta1.KubeAuth
	(*XtraDBCredentials)(nil),   // 18: percona.platform.dbaas.controller.v1beta1.XtraDBCredentials
	(*XtraDBClusterParams)(nil), // 19: percona.platform.dbaas.controller.v1beta1.XtraDBClusterParams
	(*PMMParams)(nil),           // 20: percona.platform.dbaas.controller.v1beta1.PMMParams
	(XtraDBClusterState)(0),     // 21: percona.platform.dbaas.controller.v1beta1.XtraDBClusterState
	(*RunningOperation)(nil),    // 22: percona.platform.dbaas.controller.v1beta1.RunningOperation
	(*ComputeResources)(nil),    // 23: percona.platform.dbaas.controller.v1beta1.ComputeResources
}
var file_controller_xtra_db_cluster_api_proto_depIdxs = []int32{
	17, // 0: percona.platform.dbaas.controller.v1beta1.ListXtraDBClustersRequest.kube_auth:type_name -> percona.platform.dbaas.controller.v1beta1.KubeAuth
	12, // 1: percona.platform.dbaas.controller.v1beta1.ListXtraDBClustersResponse.clusters:type_name -> percona.platform.dbaas.controller.v1beta1.ListXtraDBClustersResponse.Cluster
	17, // 2: percona.platform.dbaas.controller.v1beta1.GetXtraDBClusterCredentialsRequest.kube_auth:type_name -> percona.platform.dbaas.controller.v1beta1.KubeAuth
	18, // 3: percona.platform.dbaas.controller.v1beta1.GetXtraDBClusterCredentialsResponse.credentials:type_name -> percona.platform.dbaas.controller.v1beta1.XtraDBCredentials
	17, // 4: percona.platform.dbaas.controller.v1beta1.CreateXtraDBClusterRequest.kube_auth:type_name -> percona.platform.dbaas.controller.v1beta1.KubeAuth
	19, // 5: percona.platform.dbaas.controller.v1beta1.CreateXtraDBClusterRequest.params:type_name -> percona.platform.dbaas.controller.v1beta1.XtraDBClusterParams
	20, // 6: percona.platform.dbaas.controller.v1beta1.CreateXtraDBClusterRequest.pmm:type_name -> percona.platform.dbaas.controller.v1beta1.PMMParams
	17, // 7: percona.platform.dbaas.controller.v1beta1.UpdateXtraDBClusterRequest.kube_auth:type_name -> percona.platform.dbaas.controller.v1beta1.KubeAuth
	13, // 8: percona.platform.dbaas.controller.v1beta1.UpdateXtraDBClusterRequest.params:type_name -> percona.platform.dbaas.controller.v1beta1.UpdateXtraDBClusterRequest.UpdateXtraDBClusterParams
	17, // 9: percona.platform.dbaas.controller.v1beta1.DeleteXtraDBClusterRequest.kube_auth:type_name -> percona.platform.dbaas.controller.v1beta1.KubeAuth
	17, // 10: percona.platform.dbaas.controller.v1beta1.RestartXtraDBClusterRequest.kube_auth:type_name -> percona.platform.dbaas.controller.v1beta1.KubeAuth
	21, // 11: percona.platform.dbaas.controller.v1beta1.ListXtraDBClustersResponse.Cluster.state:type_name -> percona.platform.dbaas.controller.v1beta1.XtraDBClusterState
	22, // 12: percona.platform.dbaas.controller.v1beta1.ListXtraDBClustersResponse.Cluster.operation:type_name -> percona.platform.dbaas.controller.v1beta1.RunningOperation
	19, // 13: percona.platform.dbaas.controller.v1beta1.ListXtraDBClustersResponse.Cluster.params:type_name -> percona.platform.dbaas.controller.v1beta1.XtraDBClusterParams
	14, // 14: percona.platform.dbaas.controller.v1beta1.UpdateXtraDBClusterRequest.UpdateXtraDBClusterParams.pxc:type_name -> percona.platform.dbaas.controller.v1beta1.UpdateXtraDBClusterRequest.UpdateXtraDBClusterParams.PXC
	15, // 15: percona.platform.dbaas.controller.v1beta1.UpdateXtraDBClusterRequest.UpdateXtraDBClusterParams.proxysql:type_name -> percona.platform.dbaas.controller.v1beta1.UpdateXtraDBClusterRequest.UpdateXtraDBClusterParams.ProxySQL
	16, // 16: percona.platform.dbaas.controller.v1beta1.UpdateXtraDBClusterRequest.UpdateXtraDBClusterParams.haproxy:type_name -> percona.platform.dbaas.controller.v1beta1.UpdateXtraDBClusterRequest.UpdateXtraDBClusterParams.HAProxy
	23, // 17: percona.platform.dbaas.controller.v1beta1.UpdateXtraDBClusterRequest.UpdateXtraDBClusterParams.PXC.compute_resources:type_name -> percona.platform.dbaas.controller.v1beta1.ComputeResources
	23, // 18: percona.platform.dbaas.controller.v1beta1.UpdateXtraDBClusterRequest.UpdateXtraDBClusterParams.ProxySQL.compute_resources:type_name -> percona.platform.dbaas.controller.v1beta1.ComputeResources
	23, // 19: percona.platform.dbaas.controller.v1beta1.UpdateXtraDBClusterRequest.UpdateXtraDBClusterParams.HAProxy.compute_resources:type_name -> percona.platform.dbaas.controller.v1beta1.ComputeResources
	0,  // 20: percona.platform.dbaas.controller.v1beta1.XtraDBClusterAPI.ListXtraDBClusters:input_type -> percona.platform.dbaas.controller.v1beta1.ListXtraDBClustersRequest
	2,  // 21: percona.platform.dbaas.controller.v1beta1.XtraDBClusterAPI.GetXtraDBClusterCredentials:input_type -> percona.platform.dbaas.controller.v1beta1.GetXtraDBClusterCredentialsRequest
	4,  // 22: percona.platform.dbaas.controller.v1beta1.XtraDBClusterAPI.CreateXtraDBCluster:input_type -> percona.platform.dbaas.controller.v1beta1.CreateXtraDBClusterRequest
	6,  // 23: percona.platform.dbaas.controller.v1beta1.XtraDBClusterAPI.UpdateXtraDBCluster:input_type -> percona.platform.dbaas.controller.v1beta1.UpdateXtraDBClusterRequest
	8,  // 24: percona.platform.dbaas.controller.v1beta1.XtraDBClusterAPI.DeleteXtraDBCluster:input_type -> percona.platform.dbaas.controller.v1beta1.DeleteXtraDBClusterRequest
	10, // 25: percona.platform.dbaas.controller.v1beta1.XtraDBClusterAPI.RestartXtraDBCluster:input_type -> percona.platform.dbaas.controller.v1beta1.RestartXtraDBClusterRequest
	1,  // 26: percona.platform.dbaas.controller.v1beta1.XtraDBClusterAPI.ListXtraDBClusters:output_type -> percona.platform.dbaas.controller.v1beta1.ListXtraDBClustersResponse
	3,  // 27: percona.platform.dbaas.controller.v1beta1.XtraDBClusterAPI.GetXtraDBClusterCredentials:output_type -> percona.platform.dbaas.controller.v1beta1.GetXtraDBClusterCredentialsResponse
	5,  // 28: percona.platform.dbaas.controller.v1beta1.XtraDBClusterAPI.CreateXtraDBCluster:output_type -> percona.platform.dbaas.controller.v1beta1.CreateXtraDBClusterResponse
	7,  // 29: percona.platform.dbaas.controller.v1beta1.XtraDBClusterAPI.UpdateXtraDBCluster:output_type -> percona.platform.dbaas.controller.v1beta1.UpdateXtraDBClusterResponse
	9,  // 30: percona.platform.dbaas.controller.v1beta1.XtraDBClusterAPI.DeleteXtraDBCluster:output_type -> percona.platform.dbaas.controller.v1beta1.DeleteXtraDBClusterResponse
	11, // 31: percona.platform.dbaas.controller.v1beta1.XtraDBClusterAPI.RestartXtraDBCluster:output_type -> percona.platform.dbaas.controller.v1beta1.RestartXtraDBClusterResponse
	26, // [26:32] is the sub-list for method output_type
	20, // [20:26] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_controller_xtra_db_cluster_api_proto_init() }
func file_controller_xtra_db_cluster_api_proto_init() {
	if File_controller_xtra_db_cluster_api_proto != nil {
		return
	}
	file_controller_common_proto_init()
	file_controller_xtra_db_cluster_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_controller_xtra_db_cluster_api_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListXtraDBClustersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_xtra_db_cluster_api_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListXtraDBClustersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_xtra_db_cluster_api_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetXtraDBClusterCredentialsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_xtra_db_cluster_api_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetXtraDBClusterCredentialsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_xtra_db_cluster_api_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateXtraDBClusterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_xtra_db_cluster_api_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateXtraDBClusterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_xtra_db_cluster_api_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateXtraDBClusterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_xtra_db_cluster_api_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateXtraDBClusterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_xtra_db_cluster_api_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteXtraDBClusterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_xtra_db_cluster_api_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteXtraDBClusterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_xtra_db_cluster_api_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RestartXtraDBClusterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_xtra_db_cluster_api_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RestartXtraDBClusterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_xtra_db_cluster_api_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListXtraDBClustersResponse_Cluster); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_xtra_db_cluster_api_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateXtraDBClusterRequest_UpdateXtraDBClusterParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_xtra_db_cluster_api_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateXtraDBClusterRequest_UpdateXtraDBClusterParams_PXC); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_xtra_db_cluster_api_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateXtraDBClusterRequest_UpdateXtraDBClusterParams_ProxySQL); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_xtra_db_cluster_api_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateXtraDBClusterRequest_UpdateXtraDBClusterParams_HAProxy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_controller_xtra_db_cluster_api_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_controller_xtra_db_cluster_api_proto_goTypes,
		DependencyIndexes: file_controller_xtra_db_cluster_api_proto_depIdxs,
		MessageInfos:      file_controller_xtra_db_cluster_api_proto_msgTypes,
	}.Build()
	File_controller_xtra_db_cluster_api_proto = out.File
	file_controller_xtra_db_cluster_api_proto_rawDesc = nil
	file_controller_xtra_db_cluster_api_proto_goTypes = nil
	file_controller_xtra_db_cluster_api_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// XtraDBClusterAPIClient is the client API for XtraDBClusterAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type XtraDBClusterAPIClient interface {
	// ListXtraDBClusters returns a list of XtraDB clusters.
	ListXtraDBClusters(ctx context.Context, in *ListXtraDBClustersRequest, opts ...grpc.CallOption) (*ListXtraDBClustersResponse, error)
	// GetXtraDBClusterCredentials gets a cluster's connection credentials.
	GetXtraDBClusterCredentials(ctx context.Context, in *GetXtraDBClusterCredentialsRequest, opts ...grpc.CallOption) (*GetXtraDBClusterCredentialsResponse, error)
	// CreateXtraDBCluster creates a new XtraDB cluster.
	CreateXtraDBCluster(ctx context.Context, in *CreateXtraDBClusterRequest, opts ...grpc.CallOption) (*CreateXtraDBClusterResponse, error)
	// UpdateXtraDBCluster updates existing XtraDB cluster.
	UpdateXtraDBCluster(ctx context.Context, in *UpdateXtraDBClusterRequest, opts ...grpc.CallOption) (*UpdateXtraDBClusterResponse, error)
	// DeleteXtraDBCluster deletes XtraDB cluster.
	DeleteXtraDBCluster(ctx context.Context, in *DeleteXtraDBClusterRequest, opts ...grpc.CallOption) (*DeleteXtraDBClusterResponse, error)
	// RestartXtraDBCluster restarts XtraDB cluster.
	RestartXtraDBCluster(ctx context.Context, in *RestartXtraDBClusterRequest, opts ...grpc.CallOption) (*RestartXtraDBClusterResponse, error)
}

type xtraDBClusterAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewXtraDBClusterAPIClient(cc grpc.ClientConnInterface) XtraDBClusterAPIClient {
	return &xtraDBClusterAPIClient{cc}
}

func (c *xtraDBClusterAPIClient) ListXtraDBClusters(ctx context.Context, in *ListXtraDBClustersRequest, opts ...grpc.CallOption) (*ListXtraDBClustersResponse, error) {
	out := new(ListXtraDBClustersResponse)
	err := c.cc.Invoke(ctx, "/percona.platform.dbaas.controller.v1beta1.XtraDBClusterAPI/ListXtraDBClusters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xtraDBClusterAPIClient) GetXtraDBClusterCredentials(ctx context.Context, in *GetXtraDBClusterCredentialsRequest, opts ...grpc.CallOption) (*GetXtraDBClusterCredentialsResponse, error) {
	out := new(GetXtraDBClusterCredentialsResponse)
	err := c.cc.Invoke(ctx, "/percona.platform.dbaas.controller.v1beta1.XtraDBClusterAPI/GetXtraDBClusterCredentials", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xtraDBClusterAPIClient) CreateXtraDBCluster(ctx context.Context, in *CreateXtraDBClusterRequest, opts ...grpc.CallOption) (*CreateXtraDBClusterResponse, error) {
	out := new(CreateXtraDBClusterResponse)
	err := c.cc.Invoke(ctx, "/percona.platform.dbaas.controller.v1beta1.XtraDBClusterAPI/CreateXtraDBCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xtraDBClusterAPIClient) UpdateXtraDBCluster(ctx context.Context, in *UpdateXtraDBClusterRequest, opts ...grpc.CallOption) (*UpdateXtraDBClusterResponse, error) {
	out := new(UpdateXtraDBClusterResponse)
	err := c.cc.Invoke(ctx, "/percona.platform.dbaas.controller.v1beta1.XtraDBClusterAPI/UpdateXtraDBCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xtraDBClusterAPIClient) DeleteXtraDBCluster(ctx context.Context, in *DeleteXtraDBClusterRequest, opts ...grpc.CallOption) (*DeleteXtraDBClusterResponse, error) {
	out := new(DeleteXtraDBClusterResponse)
	err := c.cc.Invoke(ctx, "/percona.platform.dbaas.controller.v1beta1.XtraDBClusterAPI/DeleteXtraDBCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xtraDBClusterAPIClient) RestartXtraDBCluster(ctx context.Context, in *RestartXtraDBClusterRequest, opts ...grpc.CallOption) (*RestartXtraDBClusterResponse, error) {
	out := new(RestartXtraDBClusterResponse)
	err := c.cc.Invoke(ctx, "/percona.platform.dbaas.controller.v1beta1.XtraDBClusterAPI/RestartXtraDBCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// XtraDBClusterAPIServer is the server API for XtraDBClusterAPI service.
type XtraDBClusterAPIServer interface {
	// ListXtraDBClusters returns a list of XtraDB clusters.
	ListXtraDBClusters(context.Context, *ListXtraDBClustersRequest) (*ListXtraDBClustersResponse, error)
	// GetXtraDBClusterCredentials gets a cluster's connection credentials.
	GetXtraDBClusterCredentials(context.Context, *GetXtraDBClusterCredentialsRequest) (*GetXtraDBClusterCredentialsResponse, error)
	// CreateXtraDBCluster creates a new XtraDB cluster.
	CreateXtraDBCluster(context.Context, *CreateXtraDBClusterRequest) (*CreateXtraDBClusterResponse, error)
	// UpdateXtraDBCluster updates existing XtraDB cluster.
	UpdateXtraDBCluster(context.Context, *UpdateXtraDBClusterRequest) (*UpdateXtraDBClusterResponse, error)
	// DeleteXtraDBCluster deletes XtraDB cluster.
	DeleteXtraDBCluster(context.Context, *DeleteXtraDBClusterRequest) (*DeleteXtraDBClusterResponse, error)
	// RestartXtraDBCluster restarts XtraDB cluster.
	RestartXtraDBCluster(context.Context, *RestartXtraDBClusterRequest) (*RestartXtraDBClusterResponse, error)
}

// UnimplementedXtraDBClusterAPIServer can be embedded to have forward compatible implementations.
type UnimplementedXtraDBClusterAPIServer struct {
}

func (*UnimplementedXtraDBClusterAPIServer) ListXtraDBClusters(context.Context, *ListXtraDBClustersRequest) (*ListXtraDBClustersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListXtraDBClusters not implemented")
}
func (*UnimplementedXtraDBClusterAPIServer) GetXtraDBClusterCredentials(context.Context, *GetXtraDBClusterCredentialsRequest) (*GetXtraDBClusterCredentialsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetXtraDBClusterCredentials not implemented")
}
func (*UnimplementedXtraDBClusterAPIServer) CreateXtraDBCluster(context.Context, *CreateXtraDBClusterRequest) (*CreateXtraDBClusterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateXtraDBCluster not implemented")
}
func (*UnimplementedXtraDBClusterAPIServer) UpdateXtraDBCluster(context.Context, *UpdateXtraDBClusterRequest) (*UpdateXtraDBClusterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateXtraDBCluster not implemented")
}
func (*UnimplementedXtraDBClusterAPIServer) DeleteXtraDBCluster(context.Context, *DeleteXtraDBClusterRequest) (*DeleteXtraDBClusterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteXtraDBCluster not implemented")
}
func (*UnimplementedXtraDBClusterAPIServer) RestartXtraDBCluster(context.Context, *RestartXtraDBClusterRequest) (*RestartXtraDBClusterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestartXtraDBCluster not implemented")
}

func RegisterXtraDBClusterAPIServer(s *grpc.Server, srv XtraDBClusterAPIServer) {
	s.RegisterService(&_XtraDBClusterAPI_serviceDesc, srv)
}

func _XtraDBClusterAPI_ListXtraDBClusters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListXtraDBClustersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XtraDBClusterAPIServer).ListXtraDBClusters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/percona.platform.dbaas.controller.v1beta1.XtraDBClusterAPI/ListXtraDBClusters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XtraDBClusterAPIServer).ListXtraDBClusters(ctx, req.(*ListXtraDBClustersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _XtraDBClusterAPI_GetXtraDBClusterCredentials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetXtraDBClusterCredentialsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XtraDBClusterAPIServer).GetXtraDBClusterCredentials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/percona.platform.dbaas.controller.v1beta1.XtraDBClusterAPI/GetXtraDBClusterCredentials",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XtraDBClusterAPIServer).GetXtraDBClusterCredentials(ctx, req.(*GetXtraDBClusterCredentialsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _XtraDBClusterAPI_CreateXtraDBCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateXtraDBClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XtraDBClusterAPIServer).CreateXtraDBCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/percona.platform.dbaas.controller.v1beta1.XtraDBClusterAPI/CreateXtraDBCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XtraDBClusterAPIServer).CreateXtraDBCluster(ctx, req.(*CreateXtraDBClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _XtraDBClusterAPI_UpdateXtraDBCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateXtraDBClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XtraDBClusterAPIServer).UpdateXtraDBCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/percona.platform.dbaas.controller.v1beta1.XtraDBClusterAPI/UpdateXtraDBCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XtraDBClusterAPIServer).UpdateXtraDBCluster(ctx, req.(*UpdateXtraDBClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _XtraDBClusterAPI_DeleteXtraDBCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteXtraDBClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XtraDBClusterAPIServer).DeleteXtraDBCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/percona.platform.dbaas.controller.v1beta1.XtraDBClusterAPI/DeleteXtraDBCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XtraDBClusterAPIServer).DeleteXtraDBCluster(ctx, req.(*DeleteXtraDBClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _XtraDBClusterAPI_RestartXtraDBCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestartXtraDBClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XtraDBClusterAPIServer).RestartXtraDBCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/percona.platform.dbaas.controller.v1beta1.XtraDBClusterAPI/RestartXtraDBCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XtraDBClusterAPIServer).RestartXtraDBCluster(ctx, req.(*RestartXtraDBClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _XtraDBClusterAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "percona.platform.dbaas.controller.v1beta1.XtraDBClusterAPI",
	HandlerType: (*XtraDBClusterAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListXtraDBClusters",
			Handler:    _XtraDBClusterAPI_ListXtraDBClusters_Handler,
		},
		{
			MethodName: "GetXtraDBClusterCredentials",
			Handler:    _XtraDBClusterAPI_GetXtraDBClusterCredentials_Handler,
		},
		{
			MethodName: "CreateXtraDBCluster",
			Handler:    _XtraDBClusterAPI_CreateXtraDBCluster_Handler,
		},
		{
			MethodName: "UpdateXtraDBCluster",
			Handler:    _XtraDBClusterAPI_UpdateXtraDBCluster_Handler,
		},
		{
			MethodName: "DeleteXtraDBCluster",
			Handler:    _XtraDBClusterAPI_DeleteXtraDBCluster_Handler,
		},
		{
			MethodName: "RestartXtraDBCluster",
			Handler:    _XtraDBClusterAPI_RestartXtraDBCluster_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "controller/xtra_db_cluster_api.proto",
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.13.0
// source: controller/kubernetes_cluster_api.proto

package controllerv1beta1

import (
	context "context"
	reflect "reflect"
	sync "sync"

	proto "github.com/golang/protobuf/proto"
	_ "github.com/mwitkow/go-proto-validators"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type CheckKubernetesClusterConnectionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Kubernetes auth.
	KubeAuth *KubeAuth `protobuf:"bytes,1,opt,name=kube_auth,json=kubeAuth,proto3" json:"kube_auth,omitempty"`
}

func (x *CheckKubernetesClusterConnectionRequest) Reset() {
	*x = CheckKubernetesClusterConnectionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_kubernetes_cluster_api_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckKubernetesClusterConnectionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckKubernetesClusterConnectionRequest) ProtoMessage() {}

func (x *CheckKubernetesClusterConnectionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_controller_kubernetes_cluster_api_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckKubernetesClusterConnectionRequest.ProtoReflect.Descriptor instead.
func (*CheckKubernetesClusterConnectionRequest) Descriptor() ([]byte, []int) {
	return file_controller_kubernetes_cluster_api_proto_rawDescGZIP(), []int{0}
}

func (x *CheckKubernetesClusterConnectionRequest) GetKubeAuth() *KubeAuth {
	if x != nil {
		return x.KubeAuth
	}
	return nil
}

type CheckKubernetesClusterConnectionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Installed operators.
	Operators *Operators `protobuf:"bytes,1,opt,name=operators,proto3" json:"operators,omitempty"`
	// Status of Kubernetes cluster.
	Status KubernetesClusterStatus `protobuf:"varint,2,opt,name=status,proto3,enum=percona.platform.dbaas.controller.v1beta1.KubernetesClusterStatus" json:"status,omitempty"`
}

func (x *CheckKubernetesClusterConnectionResponse) Reset() {
	*x = CheckKubernetesClusterConnectionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_kubernetes_cluster_api_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckKubernetesClusterConnectionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckKubernetesClusterConnectionResponse) ProtoMessage() {}

func (x *CheckKubernetesClusterConnectionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_controller_kubernetes_cluster_api_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckKubernetesClusterConnectionResponse.ProtoReflect.Descriptor instead.
func (*CheckKubernetesClusterConnectionResponse) Descriptor() ([]byte, []int) {
	return file_controller_kubernetes_cluster_api_proto_rawDescGZIP(), []int{1}
}

func (x *CheckKubernetesClusterConnectionResponse) GetOperators() *Operators {
	if x != nil {
		return x.Operators
	}
	return nil
}

func (x *CheckKubernetesClusterConnectionResponse) GetStatus() KubernetesClusterStatus {
	if x != nil {
		return x.Status
	}
	return KubernetesClusterStatus_KUBERNETES_CLUSTER_STATUS_INVALID
}

type GetResourcesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Kubernetes auth.
	KubeAuth *KubeAuth `protobuf:"bytes,1,opt,name=kube_auth,json=kubeAuth,proto3" json:"kube_auth,omitempty"`
}

func (x *GetResourcesRequest) Reset() {
	*x = GetResourcesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_kubernetes_cluster_api_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetResourcesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetResourcesRequest) ProtoMessage() {}

func (x *GetResourcesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_controller_kubernetes_cluster_api_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetResourcesRequest.ProtoReflect.Descriptor instead.
func (*GetResourcesRequest) Descriptor() ([]byte, []int) {
	return file_controller_kubernetes_cluster_api_proto_rawDescGZIP(), []int{2}
}

func (x *GetResourcesRequest) GetKubeAuth() *KubeAuth {
	if x != nil {
		return x.KubeAuth
	}
	return nil
}

type GetResourcesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The total amount of resources of the Kubernetes cluster.
	All *Resources `protobuf:"bytes,1,opt,name=all,proto3" json:"all,omitempty"`
	// The amount of resources that is available for consumption by future Kubernetes workloads.
	Available *Resources `protobuf:"bytes,2,opt,name=available,proto3" json:"available,omitempty"`
}

func (x *GetResourcesResponse) Reset() {
	*x = GetResourcesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_kubernetes_cluster_api_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetResourcesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetResourcesResponse) ProtoMessage() {}

func (x *GetResourcesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_controller_kubernetes_cluster_api_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetResourcesResponse.ProtoReflect.Descriptor instead.
func (*GetResourcesResponse) Descriptor() ([]byte, []int) {
	return file_controller_kubernetes_cluster_api_proto_rawDescGZIP(), []int{3}
}

func (x *GetResourcesResponse) GetAll() *Resources {
	if x != nil {
		return x.All
	}
	return nil
}

func (x *GetResourcesResponse) GetAvailable() *Resources {
	if x != nil {
		return x.Available
	}
	return nil
}

type StartMonitoringRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Kubernetes auth.
	KubeAuth *KubeAuth `protobuf:"bytes,1,opt,name=kube_auth,json=kubeAuth,proto3" json:"kube_auth,omitempty"`
	// PMM params.
	Pmm *PMMParams `protobuf:"bytes,2,opt,name=pmm,proto3" json:"pmm,omitempty"`
}

func (x *StartMonitoringRequest) Reset() {
	*x = StartMonitoringRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_kubernetes_cluster_api_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartMonitoringRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartMonitoringRequest) ProtoMessage() {}

func (x *StartMonitoringRequest) ProtoReflect() protoreflect.Message {
	mi := &file_controller_kubernetes_cluster_api_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartMonitoringRequest.ProtoReflect.Descriptor instead.
func (*StartMonitoringRequest) Descriptor() ([]byte, []int) {
	return file_controller_kubernetes_cluster_api_proto_rawDescGZIP(), []int{4}
}

func (x *StartMonitoringRequest) GetKubeAuth() *KubeAuth {
	if x != nil {
		return x.KubeAuth
	}
	return nil
}

func (x *StartMonitoringRequest) GetPmm() *PMMParams {
	if x != nil {
		return x.Pmm
	}
	return nil
}

type StartMonitoringResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StartMonitoringResponse) Reset() {
	*x = StartMonitoringResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_kubernetes_cluster_api_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartMonitoringResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartMonitoringResponse) ProtoMessage() {}

func (x *StartMonitoringResponse) ProtoReflect() protoreflect.Message {
	mi := &file_controller_kubernetes_cluster_api_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartMonitoringResponse.ProtoReflect.Descriptor instead.
func (*StartMonitoringResponse) Descriptor() ([]byte, []int) {
	return file_controller_kubernetes_cluster_api_proto_rawDescGZIP(), []int{5}
}

var File_controller_kubernetes_cluster_api_proto protoreflect.FileDescriptor

var file_controller_kubernetes_cluster_api_proto_rawDesc = []byte{
	0x0a, 0x27, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2f, 0x6b, 0x75, 0x62,
	0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x29, 0x70, 0x65, 0x72, 0x63, 0x6f,
	0x6e, 0x61, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x64, 0x62, 0x61, 0x61,
	0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x1a, 0x17, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72,
	0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2f, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e,
	0x65, 0x74, 0x65, 0x73, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x36, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d,
	0x77, 0x69, 0x74, 0x6b, 0x6f, 0x77, 0x2f, 0x67, 0x6f, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2d,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x83, 0x01, 0x0a, 0x27, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x58, 0x0a, 0x09, 0x6b, 0x75, 0x62, 0x65, 0x5f, 0x61,
	0x75, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x70, 0x65, 0x72, 0x63,
	0x6f, 0x6e, 0x61, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x64, 0x62, 0x61,
	0x61, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x41, 0x75, 0x74, 0x68, 0x42, 0x06,
	0xe2, 0xdf, 0x1f, 0x02, 0x20, 0x01, 0x52, 0x08, 0x6b, 0x75, 0x62, 0x65, 0x41, 0x75, 0x74, 0x68,
	0x22, 0xda, 0x01, 0x0a, 0x28, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e,
	0x65, 0x74, 0x65, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a,
	0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x34, 0x2e, 0x70, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x61, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x73, 0x12, 0x5a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x42, 0x2e, 0x70, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x61, 0x2e, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4b, 0x75,
	0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x6f, 0x0a,
	0x13, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x58, 0x0a, 0x09, 0x6b, 0x75, 0x62, 0x65, 0x5f, 0x61, 0x75, 0x74,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x70, 0x65, 0x72, 0x63, 0x6f, 0x6e,
	0x61, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x41, 0x75, 0x74, 0x68, 0x42, 0x06, 0xe2, 0xdf,
	0x1f, 0x02, 0x20, 0x01, 0x52, 0x08, 0x6b, 0x75, 0x62, 0x65, 0x41, 0x75, 0x74, 0x68, 0x22, 0xb2,
	0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x03, 0x61, 0x6c, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x70, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x61, 0x2e, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x03, 0x61, 0x6c, 0x6c, 0x12,
	0x52, 0x0a, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x34, 0x2e, 0x70, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x61, 0x2e, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x22, 0xc2, 0x01, 0x0a, 0x16, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x58,
	0x0a, 0x09, 0x6b, 0x75, 0x62, 0x65, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x33, 0x2e, 0x70, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x61, 0x2e, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4b, 0x75,
	0x62, 0x65, 0x41, 0x75, 0x74, 0x68, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x20, 0x01, 0x52, 0x08,
	0x6b, 0x75, 0x62, 0x65, 0x41, 0x75, 0x74, 0x68, 0x12, 0x4e, 0x0a, 0x03, 0x70, 0x6d, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x70, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x61, 0x2e,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2e, 0x50, 0x4d, 0x4d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x42, 0x06, 0xe2, 0xdf, 0x1f,
	0x02, 0x20, 0x01, 0x52, 0x03, 0x70, 0x6d, 0x6d, 0x22, 0x19, 0x0a, 0x17, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x32, 0x91, 0x04, 0x0a, 0x14, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74,
	0x65, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x41, 0x50, 0x49, 0x12, 0xcb, 0x01, 0x0a,
	0x20, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x52, 0x2e, 0x70, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x61, 0x2e, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x53, 0x2e, 0x70, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x61, 0x2e,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65,
	0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x8f, 0x01, 0x0a, 0x0c, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x3e, 0x2e, 0x70, 0x65,
	0x72, 0x63, 0x6f, 0x6e, 0x61, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x64,
	0x62, 0x61, 0x61, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3f, 0x2e, 0x70, 0x65,
	0x72, 0x63, 0x6f, 0x6e, 0x61, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x64,
	0x62, 0x61, 0x61, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x98, 0x01, 0x0a,
	0x0f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67,
	0x12, 0x41, 0x2e, 0x70, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x61, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x42, 0x2e, 0x70, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x61, 0x2e, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x1e, 0x5a, 0x1c, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x3b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_controller_kubernetes_cluster_api_proto_rawDescOnce sync.Once
	file_controller_kubernetes_cluster_api_proto_rawDescData = file_controller_kubernetes_cluster_api_proto_rawDesc
)

func file_controller_kubernetes_cluster_api_proto_rawDescGZIP() []byte {
	file_controller_kubernetes_cluster_api_proto_rawDescOnce.Do(func() {
		file_controller_kubernetes_cluster_api_proto_rawDescData = protoimpl.X.CompressGZIP(file_controller_kubernetes_cluster_api_proto_rawDescData)
	})
	return file_controller_kubernetes_cluster_api_proto_rawDescData
}

var file_controller_kubernetes_cluster_api_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_controller_kubernetes_cluster_api_proto_goTypes = []interface{}{
	(*CheckKubernetesClusterConnectionRequest)(nil),  // 0: percona.platform.dbaas.controller.v1beta1.CheckKubernetesClusterConnectionRequest
	(*CheckKubernetesClusterConnectionResponse)(nil), // 1: percona.platform.dbaas.controller.v1beta1.CheckKubernetesClusterConnectionResponse
	(*GetResourcesRequest)(nil),                      // 2: percona.platform.dbaas.controller.v1beta1.GetResourcesRequest
	(*GetResourcesResponse)(nil),                     // 3: percona.platform.dbaas.controller.v1beta1.GetResourcesResponse
	(*StartMonitoringRequest)(nil),                   // 4: percona.platform.dbaas.controller.v1beta1.StartMonitoringRequest
	(*StartMonitoringResponse)(nil),                  // 5: percona.platform.dbaas.controller.v1beta1.StartMonitoringResponse
	(*KubeAuth)(nil),                                 // 6: percona.platform.dbaas.controller.v1beta1.KubeAuth
	(*Operators)(nil),                                // 7: percona.platform.dbaas.controller.v1beta1.Operators
	(KubernetesClusterStatus)(0),                     // 8: percona.platform.dbaas.controller.v1beta1.KubernetesClusterStatus
	(*Resources)(nil),                                // 9: percona.platform.dbaas.controller.v1beta1.Resources
	(*PMMParams)(nil),                                // 10: percona.platform.dbaas.controller.v1beta1.PMMParams
}
var file_controller_kubernetes_cluster_api_proto_depIdxs = []int32{
	6,  // 0: percona.platform.dbaas.controller.v1beta1.CheckKubernetesClusterConnectionRequest.kube_auth:type_name -> percona.platform.dbaas.controller.v1beta1.KubeAuth
	7,  // 1: percona.platform.dbaas.controller.v1beta1.CheckKubernetesClusterConnectionResponse.operators:type_name -> percona.platform.dbaas.controller.v1beta1.Operators
	8,  // 2: percona.platform.dbaas.controller.v1beta1.CheckKubernetesClusterConnectionResponse.status:type_name -> percona.platform.dbaas.controller.v1beta1.KubernetesClusterStatus
	6,  // 3: percona.platform.dbaas.controller.v1beta1.GetResourcesRequest.kube_auth:type_name -> percona.platform.dbaas.controller.v1beta1.KubeAuth
	9,  // 4: percona.platform.dbaas.controller.v1beta1.GetResourcesResponse.all:type_name -> percona.platform.dbaas.controller.v1beta1.Resources
	9,  // 5: percona.platform.dbaas.controller.v1beta1.GetResourcesResponse.available:type_name -> percona.platform.dbaas.controller.v1beta1.Resources
	6,  // 6: percona.platform.dbaas.controller.v1beta1.StartMonitoringRequest.kube_auth:type_name -> percona.platform.dbaas.controller.v1beta1.KubeAuth
	10, // 7: percona.platform.dbaas.controller.v1beta1.StartMonitoringRequest.pmm:type_name -> percona.platform.dbaas.controller.v1beta1.PMMParams
	0,  // 8: percona.platform.dbaas.controller.v1beta1.KubernetesClusterAPI.CheckKubernetesClusterConnection:input_type -> percona.platform.dbaas.controller.v1beta1.CheckKubernetesClusterConnectionRequest
	2,  // 9: percona.platform.dbaas.controller.v1beta1.KubernetesClusterAPI.GetResources:input_type -> percona.platform.dbaas.controller.v1beta1.GetResourcesRequest
	4,  // 10: percona.platform.dbaas.controller.v1beta1.KubernetesClusterAPI.StartMonitoring:input_type -> percona.platform.dbaas.controller.v1beta1.StartMonitoringRequest
	1,  // 11: percona.platform.dbaas.controller.v1beta1.KubernetesClusterAPI.CheckKubernetesClusterConnection:output_type -> percona.platform.dbaas.controller.v1beta1.CheckKubernetesClusterConnectionResponse
	3,  // 12: percona.platform.dbaas.controller.v1beta1.KubernetesClusterAPI.GetResources:output_type -> percona.platform.dbaas.controller.v1beta1.GetResourcesResponse
	5,  // 13: percona.platform.dbaas.controller.v1beta1.KubernetesClusterAPI.StartMonitoring:output_type -> percona.platform.dbaas.controller.v1beta1.StartMonitoringResponse
	11, // [11:14] is the sub-list for method output_type
	8,  // [8:11] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_controller_kubernetes_cluster_api_proto_init() }
func file_controller_kubernetes_cluster_api_proto_init() {
	if File_controller_kubernetes_cluster_api_proto != nil {
		return
	}
	file_controller_common_proto_init()
	file_controller_kubernetes_cluster_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_controller_kubernetes_cluster_api_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckKubernetesClusterConnectionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_kubernetes_cluster_api_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckKubernetesClusterConnectionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_kubernetes_cluster_api_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetResourcesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_kubernetes_cluster_api_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetResourcesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_kubernetes_cluster_api_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartMonitoringRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_kubernetes_cluster_api_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartMonitoringResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_controller_kubernetes_cluster_api_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_controller_kubernetes_cluster_api_proto_goTypes,
		DependencyIndexes: file_controller_kubernetes_cluster_api_proto_depIdxs,
		MessageInfos:      file_controller_kubernetes_cluster_api_proto_msgTypes,
	}.Build()
	File_controller_kubernetes_cluster_api_proto = out.File
	file_controller_kubernetes_cluster_api_proto_rawDesc = nil
	file_controller_kubernetes_cluster_api_proto_goTypes = nil
	file_controller_kubernetes_cluster_api_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// KubernetesClusterAPIClient is the client API for KubernetesClusterAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type KubernetesClusterAPIClient interface {
	// CheckKubernetesClusterConnection checks connection to kubernetes clusters.
	CheckKubernetesClusterConnection(ctx context.Context, in *CheckKubernetesClusterConnectionRequest, opts ...grpc.CallOption) (*CheckKubernetesClusterConnectionResponse, error)
	// GetResources returns the total amount of resources and the amount that is
	// still available for use in the Kubernetes cluster.
	GetResources(ctx context.Context, in *GetResourcesRequest, opts ...grpc.CallOption) (*GetResourcesResponse, error)
	// StartMonitoring sets up victoria metrics operator to monitor kubernetes cluster.
	StartMonitoring(ctx context.Context, in *StartMonitoringRequest, opts ...grpc.CallOption) (*StartMonitoringResponse, error)
}

type kubernetesClusterAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewKubernetesClusterAPIClient(cc grpc.ClientConnInterface) KubernetesClusterAPIClient {
	return &kubernetesClusterAPIClient{cc}
}

func (c *kubernetesClusterAPIClient) CheckKubernetesClusterConnection(ctx context.Context, in *CheckKubernetesClusterConnectionRequest, opts ...grpc.CallOption) (*CheckKubernetesClusterConnectionResponse, error) {
	out := new(CheckKubernetesClusterConnectionResponse)
	err := c.cc.Invoke(ctx, "/percona.platform.dbaas.controller.v1beta1.KubernetesClusterAPI/CheckKubernetesClusterConnection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kubernetesClusterAPIClient) GetResources(ctx context.Context, in *GetResourcesRequest, opts ...grpc.CallOption) (*GetResourcesResponse, error) {
	out := new(GetResourcesResponse)
	err := c.cc.Invoke(ctx, "/percona.platform.dbaas.controller.v1beta1.KubernetesClusterAPI/GetResources", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kubernetesClusterAPIClient) StartMonitoring(ctx context.Context, in *StartMonitoringRequest, opts ...grpc.CallOption) (*StartMonitoringResponse, error) {
	out := new(StartMonitoringResponse)
	err := c.cc.Invoke(ctx, "/percona.platform.dbaas.controller.v1beta1.KubernetesClusterAPI/StartMonitoring", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KubernetesClusterAPIServer is the server API for KubernetesClusterAPI service.
type KubernetesClusterAPIServer interface {
	// CheckKubernetesClusterConnection checks connection to kubernetes clusters.
	CheckKubernetesClusterConnection(context.Context, *CheckKubernetesClusterConnectionRequest) (*CheckKubernetesClusterConnectionResponse, error)
	// GetResources returns the total amount of resources and the amount that is
	// still available for use in the Kubernetes cluster.
	GetResources(context.Context, *GetResourcesRequest) (*GetResourcesResponse, error)
	// StartMonitoring sets up victoria metrics operator to monitor kubernetes cluster.
	StartMonitoring(context.Context, *StartMonitoringRequest) (*StartMonitoringResponse, error)
}

// UnimplementedKubernetesClusterAPIServer can be embedded to have forward compatible implementations.
type UnimplementedKubernetesClusterAPIServer struct {
}

func (*UnimplementedKubernetesClusterAPIServer) CheckKubernetesClusterConnection(context.Context, *CheckKubernetesClusterConnectionRequest) (*CheckKubernetesClusterConnectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckKubernetesClusterConnection not implemented")
}
func (*UnimplementedKubernetesClusterAPIServer) GetResources(context.Context, *GetResourcesRequest) (*GetResourcesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResources not implemented")
}
func (*UnimplementedKubernetesClusterAPIServer) StartMonitoring(context.Context, *StartMonitoringRequest) (*StartMonitoringResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartMonitoring not implemented")
}

func RegisterKubernetesClusterAPIServer(s *grpc.Server, srv KubernetesClusterAPIServer) {
	s.RegisterService(&_KubernetesClusterAPI_serviceDesc, srv)
}

func _KubernetesClusterAPI_CheckKubernetesClusterConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckKubernetesClusterConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KubernetesClusterAPIServer).CheckKubernetesClusterConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/percona.platform.dbaas.controller.v1beta1.KubernetesClusterAPI/CheckKubernetesClusterConnection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KubernetesClusterAPIServer).CheckKubernetesClusterConnection(ctx, req.(*CheckKubernetesClusterConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KubernetesClusterAPI_GetResources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResourcesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KubernetesClusterAPIServer).GetResources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/percona.platform.dbaas.controller.v1beta1.KubernetesClusterAPI/GetResources",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KubernetesClusterAPIServer).GetResources(ctx, req.(*GetResourcesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KubernetesClusterAPI_StartMonitoring_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartMonitoringRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KubernetesClusterAPIServer).StartMonitoring(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/percona.platform.dbaas.controller.v1beta1.KubernetesClusterAPI/StartMonitoring",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KubernetesClusterAPIServer).StartMonitoring(ctx, req.(*StartMonitoringRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _KubernetesClusterAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "percona.platform.dbaas.controller.v1beta1.KubernetesClusterAPI",
	HandlerType: (*KubernetesClusterAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckKubernetesClusterConnection",
			Handler:    _KubernetesClusterAPI_CheckKubernetesClusterConnection_Handler,
		},
		{
			MethodName: "GetResources",
			Handler:    _KubernetesClusterAPI_GetResources_Handler,
		},
		{
			MethodName: "StartMonitoring",
			Handler:    _KubernetesClusterAPI_StartMonitoring_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "controller/kubernetes_cluster_api.proto",
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.13.0
// source: controller/olm_operator_api.proto

package controllerv1beta1

import (
	context "context"
	reflect "reflect"
	sync "sync"

	proto "github.com/golang/protobuf/proto"
	_ "github.com/mwitkow/go-proto-validators"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// InstallOLMOperatorRequest has the necesary fields to start an OLM operator installation.
type InstallOLMOperatorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Kubernetes auth.
	KubeAuth *KubeAuth `protobuf:"bytes,1,opt,name=kube_auth,json=kubeAuth,proto3" json:"kube_auth,omitempty"`
	// Operator version to be installed.
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *InstallOLMOperatorRequest) Reset() {
	*x = InstallOLMOperatorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_olm_operator_api_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstallOLMOperatorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstallOLMOperatorRequest) ProtoMessage() {}

func (x *InstallOLMOperatorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_controller_olm_operator_api_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstallOLMOperatorRequest.ProtoReflect.Descriptor instead.
func (*InstallOLMOperatorRequest) Descriptor() ([]byte, []int) {
	return file_controller_olm_operator_api_proto_rawDescGZIP(), []int{0}
}

func (x *InstallOLMOperatorRequest) GetKubeAuth() *KubeAuth {
	if x != nil {
		return x.KubeAuth
	}
	return nil
}

func (x *InstallOLMOperatorRequest) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

// InstallOLMOperatorResponse is the OLM Operator installation response.
type InstallOLMOperatorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *InstallOLMOperatorResponse) Reset() {
	*x = InstallOLMOperatorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_olm_operator_api_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstallOLMOperatorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstallOLMOperatorResponse) ProtoMessage() {}

func (x *InstallOLMOperatorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_controller_olm_operator_api_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstallOLMOperatorResponse.ProtoReflect.Descriptor instead.
func (*InstallOLMOperatorResponse) Descriptor() ([]byte, []int) {
	return file_controller_olm_operator_api_proto_rawDescGZIP(), []int{1}
}

// InstallOperatorRequest holds the necesary fields to request an operator installation
// usin the OLM operator.
type InstallOperatorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Kubernetes auth.
	KubeAuth *KubeAuth `protobuf:"bytes,1,opt,name=kube_auth,json=kubeAuth,proto3" json:"kube_auth,omitempty"`
	// Destination namespace.
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Operator's name.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// Operator group to create.
	OperatorGroup string `protobuf:"bytes,4,opt,name=operator_group,json=operatorGroup,proto3" json:"operator_group,omitempty"`
	// Catalog source name.
	CatalogSource string `protobuf:"bytes,5,opt,name=catalog_source,json=catalogSource,proto3" json:"catalog_source,omitempty"`
	// Catalog source namespace.
	CatalogSourceNamespace string `protobuf:"bytes,6,opt,name=catalog_source_namespace,json=catalogSourceNamespace,proto3" json:"catalog_source_namespace,omitempty"`
	// Channel.
	Channel string `protobuf:"bytes,7,opt,name=channel,proto3" json:"channel,omitempty"`
	// Install approval type. Manual, Automatic.
	InstallPlanApproval string `protobuf:"bytes,8,opt,name=install_plan_approval,json=installPlanApproval,proto3" json:"install_plan_approval,omitempty"`
	// Starting CSV.
	StartingCsv string `protobuf:"bytes,9,opt,name=starting_csv,json=startingCsv,proto3" json:"starting_csv,omitempty"`
}

func (x *InstallOperatorRequest) Reset() {
	*x = InstallOperatorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_olm_operator_api_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstallOperatorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstallOperatorRequest) ProtoMessage() {}

func (x *InstallOperatorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_controller_olm_operator_api_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstallOperatorRequest.ProtoReflect.Descriptor instead.
func (*InstallOperatorRequest) Descriptor() ([]byte, []int) {
	return file_controller_olm_operator_api_proto_rawDescGZIP(), []int{2}
}

func (x *InstallOperatorRequest) GetKubeAuth() *KubeAuth {
	if x != nil {
		return x.KubeAuth
	}
	return nil
}

func (x *InstallOperatorRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *InstallOperatorRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *InstallOperatorRequest) GetOperatorGroup() string {
	if x != nil {
		return x.OperatorGroup
	}
	return ""
}

func (x *InstallOperatorRequest) GetCatalogSource() string {
	if x != nil {
		return x.CatalogSource
	}
	return ""
}

func (x *InstallOperatorRequest) GetCatalogSourceNamespace() string {
	if x != nil {
		return x.CatalogSourceNamespace
	}
	return ""
}

func (x *InstallOperatorRequest) GetChannel() string {
	if x != nil {
		return x.Channel
	}
	return ""
}

func (x *InstallOperatorRequest) GetInstallPlanApproval() string {
	if x != nil {
		return x.InstallPlanApproval
	}
	return ""
}

func (x *InstallOperatorRequest) GetStartingCsv() string {
	if x != nil {
		return x.StartingCsv
	}
	return ""
}

// InstallOperatorResponse holds the response after installing an operator via OLM.
type InstallOperatorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *InstallOperatorResponse) Reset() {
	*x = InstallOperatorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_olm_operator_api_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstallOperatorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstallOperatorResponse) ProtoMessage() {}

func (x *InstallOperatorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_controller_olm_operator_api_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstallOperatorResponse.ProtoReflect.Descriptor instead.
func (*InstallOperatorResponse) Descriptor() ([]byte, []int) {
	return file_controller_olm_operator_api_proto_rawDescGZIP(), []int{3}
}

// ListInstallPlansRequest gets the list of install plans for a namespace.
type ListInstallPlansRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Kubernetes auth.
	KubeAuth *KubeAuth `protobuf:"bytes,1,opt,name=kube_auth,json=kubeAuth,proto3" json:"kube_auth,omitempty"`
	// Destination namespace.
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Operator's name.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// Operator group to create.
	OnlyNotApproved bool `protobuf:"varint,4,opt,name=only_not_approved,json=onlyNotApproved,proto3" json:"only_not_approved,omitempty"`
}

func (x *ListInstallPlansRequest) Reset() {
	*x = ListInstallPlansRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_olm_operator_api_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListInstallPlansRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListInstallPlansRequest) ProtoMessage() {}

func (x *ListInstallPlansRequest) ProtoReflect() protoreflect.Message {
	mi := &file_controller_olm_operator_api_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListInstallPlansRequest.ProtoReflect.Descriptor instead.
func (*ListInstallPlansRequest) Descriptor() ([]byte, []int) {
	return file_controller_olm_operator_api_proto_rawDescGZIP(), []int{4}
}

func (x *ListInstallPlansRequest) GetKubeAuth() *KubeAuth {
	if x != nil {
		return x.KubeAuth
	}
	return nil
}

func (x *ListInstallPlansRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *ListInstallPlansRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListInstallPlansRequest) GetOnlyNotApproved() bool {
	if x != nil {
		return x.OnlyNotApproved
	}
	return false
}

// ListInstallPlansResponse has all the install plans for the install plans list request.
type ListInstallPlansResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List install plan items.
	Items []*ListInstallPlansResponse_InstallPlan `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *ListInstallPlansResponse) Reset() {
	*x = ListInstallPlansResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_olm_operator_api_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListInstallPlansResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListInstallPlansResponse) ProtoMessage() {}

func (x *ListInstallPlansResponse) ProtoReflect() protoreflect.Message {
	mi := &file_controller_olm_operator_api_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListInstallPlansResponse.ProtoReflect.Descriptor instead.
func (*ListInstallPlansResponse) Descriptor() ([]byte, []int) {
	return file_controller_olm_operator_api_proto_rawDescGZIP(), []int{5}
}

func (x *ListInstallPlansResponse) GetItems() []*ListInstallPlansResponse_InstallPlan {
	if x != nil {
		return x.Items
	}
	return nil
}

// InstallPlan item.
type ListInstallPlansResponse_InstallPlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Namespace.
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Name.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// CSV.
	Csv string `protobuf:"bytes,3,opt,name=csv,proto3" json:"csv,omitempty"`
	// Approval: manual, automatic.
	Approval string `protobuf:"bytes,4,opt,name=approval,proto3" json:"approval,omitempty"`
	// Approved.
	Approved bool `protobuf:"varint,5,opt,name=approved,proto3" json:"approved,omitempty"`
}

func (x *ListInstallPlansResponse_InstallPlan) Reset() {
	*x = ListInstallPlansResponse_InstallPlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_olm_operator_api_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListInstallPlansResponse_InstallPlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListInstallPlansResponse_InstallPlan) ProtoMessage() {}

func (x *ListInstallPlansResponse_InstallPlan) ProtoReflect() protoreflect.Message {
	mi := &file_controller_olm_operator_api_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListInstallPlansResponse_InstallPlan.ProtoReflect.Descriptor instead.
func (*ListInstallPlansResponse_InstallPlan) Descriptor() ([]byte, []int) {
	return file_controller_olm_operator_api_proto_rawDescGZIP(), []int{5, 0}
}

func (x *ListInstallPlansResponse_InstallPlan) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *ListInstallPlansResponse_InstallPlan) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListInstallPlansResponse_InstallPlan) GetCsv() string {
	if x != nil {
		return x.Csv
	}
	return ""
}

func (x *ListInstallPlansResponse_InstallPlan) GetApproval() string {
	if x != nil {
		return x.Approval
	}
	return ""
}

func (x *ListInstallPlansResponse_InstallPlan) GetApproved() bool {
	if x != nil {
		return x.Approved
	}
	return false
}

var File_controller_olm_operator_api_proto protoreflect.FileDescriptor

var file_controller_olm_operator_api_proto_rawDesc = []byte{
	0x0a, 0x21, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2f, 0x6f, 0x6c, 0x6d,
	0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x29, 0x70, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x61, 0x2e, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x1a, 0x17,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x36, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x77, 0x69, 0x74, 0x6b, 0x6f, 0x77, 0x2f, 0x67, 0x6f, 0x2d, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x2f,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x8f, 0x01, 0x0a, 0x19, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x4f, 0x4c, 0x4d, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x58, 0x0a,
	0x09, 0x6b, 0x75, 0x62, 0x65, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x33, 0x2e, 0x70, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x61, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4b, 0x75, 0x62,
	0x65, 0x41, 0x75, 0x74, 0x68, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x20, 0x01, 0x52, 0x08, 0x6b,
	0x75, 0x62, 0x65, 0x41, 0x75, 0x74, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x22, 0x1c, 0x0a, 0x1a, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x4f, 0x4c, 0x4d, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x9d, 0x03, 0x0a, 0x16, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x58, 0x0a, 0x09, 0x6b, 0x75,
	0x62, 0x65, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e,
	0x70, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x61, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x41, 0x75,
	0x74, 0x68, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x20, 0x01, 0x52, 0x08, 0x6b, 0x75, 0x62, 0x65,
	0x41, 0x75, 0x74, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x25, 0x0a,
	0x0e, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x38, 0x0a, 0x18, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x5f,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x32, 0x0a, 0x15, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6c, 0x6c, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61,
	0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c,
	0x50, 0x6c, 0x61, 0x6e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x12, 0x21, 0x0a, 0x0c,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x73, 0x76, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x73, 0x76, 0x22,
	0x19, 0x0a, 0x17, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xd1, 0x01, 0x0a, 0x17, 0x4c,
	0x69, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x58, 0x0a, 0x09, 0x6b, 0x75, 0x62, 0x65, 0x5f, 0x61,
	0x75, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x70, 0x65, 0x72, 0x63,
	0x6f, 0x6e, 0x61, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x64, 0x62, 0x61,
	0x61, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x41, 0x75, 0x74, 0x68, 0x42, 0x06,
	0xe2, 0xdf, 0x1f, 0x02, 0x20, 0x01, 0x52, 0x08, 0x6b, 0x75, 0x62, 0x65, 0x41, 0x75, 0x74, 0x68,
	0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x61,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x6f,
	0x6e, 0x6c, 0x79, 0x4e, 0x6f, 0x74, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x22, 0x8d,
	0x02, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x50, 0x6c,
	0x61, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x65, 0x0a, 0x05, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4f, 0x2e, 0x70, 0x65, 0x72,
	0x63, 0x6f, 0x6e, 0x61, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x64, 0x62,
	0x61, 0x61, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6c, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x05, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x1a, 0x89, 0x01, 0x0a, 0x0b, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x50, 0x6c,
	0x61, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x73, 0x76, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x63, 0x73, 0x76, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76,
	0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76,
	0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x32, 0xed,
	0x03, 0x0a, 0x0e, 0x4f, 0x4c, 0x4d, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x50,
	0x49, 0x12, 0xa1, 0x01, 0x0a, 0x12, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x4f, 0x4c, 0x4d,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x44, 0x2e, 0x70, 0x65, 0x72, 0x63, 0x6f,
	0x6e, 0x61, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x64, 0x62, 0x61, 0x61,
	0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x4f, 0x4c, 0x4d, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x45,
	0x2e, 0x70, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x61, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6c, 0x6c, 0x4f, 0x4c, 0x4d, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x98, 0x01, 0x0a, 0x0f, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c,
	0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x41, 0x2e, 0x70, 0x65, 0x72, 0x63,
	0x6f, 0x6e, 0x61, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x64, 0x62, 0x61,
	0x61, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x42, 0x2e, 0x70,
	0x65, 0x72, 0x63, 0x6f, 0x6e, 0x61, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e,
	0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x9b, 0x01, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c,
	0x50, 0x6c, 0x61, 0x6e, 0x73, 0x12, 0x42, 0x2e, 0x70, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x61, 0x2e,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x64, 0x62, 0x61, 0x61, 0x73, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x50, 0x6c, 0x61,
	0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x43, 0x2e, 0x70, 0x65, 0x72, 0x63,
	0x6f, 0x6e, 0x61, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x64, 0x62, 0x61,
	0x61, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c,
	0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x1e,
	0x5a, 0x1c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x3b, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_controller_olm_operator_api_proto_rawDescOnce sync.Once
	file_controller_olm_operator_api_proto_rawDescData = file_controller_olm_operator_api_proto_rawDesc
)

func file_controller_olm_operator_api_proto_rawDescGZIP() []byte {
	file_controller_olm_operator_api_proto_rawDescOnce.Do(func() {
		file_controller_olm_operator_api_proto_rawDescData = protoimpl.X.CompressGZIP(file_controller_olm_operator_api_proto_rawDescData)
	})
	return file_controller_olm_operator_api_proto_rawDescData
}

var file_controller_olm_operator_api_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_controller_olm_operator_api_proto_goTypes = []interface{}{
	(*InstallOLMOperatorRequest)(nil),            // 0: percona.platform.dbaas.controller.v1beta1.InstallOLMOperatorRequest
	(*InstallOLMOperatorResponse)(nil),           // 1: percona.platform.dbaas.controller.v1beta1.InstallOLMOperatorResponse
	(*InstallOperatorRequest)(nil),               // 2: percona.platform.dbaas.controller.v1beta1.InstallOperatorRequest
	(*InstallOperatorResponse)(nil),              // 3: percona.platform.dbaas.controller.v1beta1.InstallOperatorResponse
	(*ListInstallPlansRequest)(nil),              // 4: percona.platform.dbaas.controller.v1beta1.ListInstallPlansRequest
	(*ListInstallPlansResponse)(nil),             // 5: percona.platform.dbaas.controller.v1beta1.ListInstallPlansResponse
	(*ListInstallPlansResponse_InstallPlan)(nil), // 6: percona.platform.dbaas.controller.v1beta1.ListInstallPlansResponse.InstallPlan
	(*KubeAuth)(nil),                             // 7: percona.platform.dbaas.controller.v1beta1.KubeAuth
}
var file_controller_olm_operator_api_proto_depIdxs = []int32{
	7, // 0: percona.platform.dbaas.controller.v1beta1.InstallOLMOperatorRequest.kube_auth:type_name -> percona.platform.dbaas.controller.v1beta1.KubeAuth
	7, // 1: percona.platform.dbaas.controller.v1beta1.InstallOperatorRequest.kube_auth:type_name -> percona.platform.dbaas.controller.v1beta1.KubeAuth
	7, // 2: percona.platform.dbaas.controller.v1beta1.ListInstallPlansRequest.kube_auth:type_name -> percona.platform.dbaas.controller.v1beta1.KubeAuth
	6, // 3: percona.platform.dbaas.controller.v1beta1.ListInstallPlansResponse.items:type_name -> percona.platform.dbaas.controller.v1beta1.ListInstallPlansResponse.InstallPlan
	0, // 4: percona.platform.dbaas.controller.v1beta1.OLMOperatorAPI.InstallOLMOperator:input_type -> percona.platform.dbaas.controller.v1beta1.InstallOLMOperatorRequest
	2, // 5: percona.platform.dbaas.controller.v1beta1.OLMOperatorAPI.InstallOperator:input_type -> percona.platform.dbaas.controller.v1beta1.InstallOperatorRequest
	4, // 6: percona.platform.dbaas.controller.v1beta1.OLMOperatorAPI.ListInstallPlans:input_type -> percona.platform.dbaas.controller.v1beta1.ListInstallPlansRequest
	1, // 7: percona.platform.dbaas.controller.v1beta1.OLMOperatorAPI.InstallOLMOperator:output_type -> percona.platform.dbaas.controller.v1beta1.InstallOLMOperatorResponse
	3, // 8: percona.platform.dbaas.controller.v1beta1.OLMOperatorAPI.InstallOperator:output_type -> percona.platform.dbaas.controller.v1beta1.InstallOperatorResponse
	5, // 9: percona.platform.dbaas.controller.v1beta1.OLMOperatorAPI.ListInstallPlans:output_type -> percona.platform.dbaas.controller.v1beta1.ListInstallPlansResponse
	7, // [7:10] is the sub-list for method output_type
	4, // [4:7] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_controller_olm_operator_api_proto_init() }
func file_controller_olm_operator_api_proto_init() {
	if File_controller_olm_operator_api_proto != nil {
		return
	}
	file_controller_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_controller_olm_operator_api_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstallOLMOperatorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_olm_operator_api_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstallOLMOperatorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_olm_operator_api_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstallOperatorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_olm_operator_api_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstallOperatorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_olm_operator_api_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListInstallPlansRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_olm_operator_api_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListInstallPlansResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_olm_operator_api_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListInstallPlansResponse_InstallPlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_controller_olm_operator_api_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_controller_olm_operator_api_proto_goTypes,
		DependencyIndexes: file_controller_olm_operator_api_proto_depIdxs,
		MessageInfos:      file_controller_olm_operator_api_proto_msgTypes,
	}.Build()
	File_controller_olm_operator_api_proto = out.File
	file_controller_olm_operator_api_proto_rawDesc = nil
	file_controller_olm_operator_api_proto_goTypes = nil
	file_controller_olm_operator_api_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// OLMOperatorAPIClient is the client API for OLMOperatorAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type OLMOperatorAPIClient interface {
	// InstallOLMOperator installs the OLM.
	InstallOLMOperator(ctx context.Context, in *InstallOLMOperatorRequest, opts ...grpc.CallOption) (*InstallOLMOperatorResponse, error)
	// InstallOperator installs an operator usin OLM.
	InstallOperator(ctx context.Context, in *InstallOperatorRequest, opts ...grpc.CallOption) (*InstallOperatorResponse, error)
	// ListInstallPlans gets the list of install plans matching the criteria.
	ListInstallPlans(ctx context.Context, in *ListInstallPlansRequest, opts ...grpc.CallOption) (*ListInstallPlansResponse, error)
}

type oLMOperatorAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewOLMOperatorAPIClient(cc grpc.ClientConnInterface) OLMOperatorAPIClient {
	return &oLMOperatorAPIClient{cc}
}

func (c *oLMOperatorAPIClient) InstallOLMOperator(ctx context.Context, in *InstallOLMOperatorRequest, opts ...grpc.CallOption) (*InstallOLMOperatorResponse, error) {
	out := new(InstallOLMOperatorResponse)
	err := c.cc.Invoke(ctx, "/percona.platform.dbaas.controller.v1beta1.OLMOperatorAPI/InstallOLMOperator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oLMOperatorAPIClient) InstallOperator(ctx context.Context, in *InstallOperatorRequest, opts ...grpc.CallOption) (*InstallOperatorResponse, error) {
	out := new(InstallOperatorResponse)
	err := c.cc.Invoke(ctx, "/percona.platform.dbaas.controller.v1beta1.OLMOperatorAPI/InstallOperator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oLMOperatorAPIClient) ListInstallPlans(ctx context.Context, in *ListInstallPlansRequest, opts ...grpc.CallOption) (*ListInstallPlansResponse, error) {
	out := new(ListInstallPlansResponse)
	err := c.cc.Invoke(ctx, "/percona.platform.dbaas.controller.v1beta1.OLMOperatorAPI/ListInstallPlans", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OLMOperatorAPIServer is the server API for OLMOperatorAPI service.
type OLMOperatorAPIServer interface {
	// InstallOLMOperator installs the OLM.
	InstallOLMOperator(context.Context, *InstallOLMOperatorRequest) (*InstallOLMOperatorResponse, error)
	// InstallOperator installs an operator usin OLM.
	InstallOperator(context.Context, *InstallOperatorRequest) (*InstallOperatorResponse, error)
	// ListInstallPlans gets the list of install plans matching the criteria.
	ListInstallPlans(context.Context, *ListInstallPlansRequest) (*ListInstallPlansResponse, error)
}

// UnimplementedOLMOperatorAPIServer can be embedded to have forward compatible implementations.
type UnimplementedOLMOperatorAPIServer struct {
}

func (*UnimplementedOLMOperatorAPIServer) InstallOLMOperator(context.Context, *InstallOLMOperatorRequest) (*InstallOLMOperatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InstallOLMOperator not implemented")
}
func (*UnimplementedOLMOperatorAPIServer) InstallOperator(context.Context, *InstallOperatorRequest) (*InstallOperatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InstallOperator not implemented")
}
func (*UnimplementedOLMOperatorAPIServer) ListInstallPlans(context.Context, *ListInstallPlansRequest) (*ListInstallPlansResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListInstallPlans not implemented")
}

func RegisterOLMOperatorAPIServer(s *grpc.Server, srv OLMOperatorAPIServer) {
	s.RegisterService(&_OLMOperatorAPI_serviceDesc, srv)
}

func _OLMOperatorAPI_InstallOLMOperator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InstallOLMOperatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OLMOperatorAPIServer).InstallOLMOperator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/percona.platform.dbaas.controller.v1beta1.OLMOperatorAPI/InstallOLMOperator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OLMOperatorAPIServer).InstallOLMOperator(ctx, req.(*InstallOLMOperatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OLMOperatorAPI_InstallOperator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InstallOperatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OLMOperatorAPIServer).InstallOperator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/percona.platform.dbaas.controller.v1beta1.OLMOperatorAPI/InstallOperator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OLMOperatorAPIServer).InstallOperator(ctx, req.(*InstallOperatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OLMOperatorAPI_ListInstallPlans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListInstallPlansRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OLMOperatorAPIServer).ListInstallPlans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/percona.platform.dbaas.controller.v1beta1.OLMOperatorAPI/ListInstallPlans",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OLMOperatorAPIServer).ListInstallPlans(ctx, req.(*ListInstallPlansRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _OLMOperatorAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "percona.platform.dbaas.controller.v1beta1.OLMOperatorAPI",
	HandlerType: (*OLMOperatorAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InstallOLMOperator",
			Handler:    _OLMOperatorAPI_InstallOLMOperator_Handler,
		},
		{
			MethodName: "InstallOperator",
			Handler:    _OLMOperatorAPI_InstallOperator_Handler,
		},
		{
			MethodName: "ListInstallPlans",
			Handler:    _OLMOperatorAPI_ListInstallPlans_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "controller/olm_operator_api.proto",
}

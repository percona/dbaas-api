syntax = "proto3";

package percona.platform.dbaas.controller.v1beta1;

option go_package = "controller;controllerv1beta1";

import "controller/common.proto";
import "controller/pxc_cluster.proto";
import "github.com/mwitkow/go-proto-validators/validator.proto";

// PXCClusterAPI provides APIs for managing PXC clusters.
service PXCClusterAPI {
  // ListPXCClusters returns a list of PXC clusters.
  rpc ListPXCClusters(ListPXCClustersRequest) returns (ListPXCClustersResponse);
  // GetPXCClusterCredentials gets a cluster's connection credentials.
  rpc GetPXCClusterCredentials(GetPXCClusterCredentialsRequest) returns (GetPXCClusterCredentialsResponse);
  // CreatePXCCluster creates a new PXC cluster.
  rpc CreatePXCCluster(CreatePXCClusterRequest) returns (CreatePXCClusterResponse);
  // UpdatePXCCluster updates existing PXC cluster.
  rpc UpdatePXCCluster(UpdatePXCClusterRequest) returns (UpdatePXCClusterResponse);
  // DeletePXCCluster deletes PXC cluster.
  rpc DeletePXCCluster(DeletePXCClusterRequest) returns (DeletePXCClusterResponse);
  // RestartPXCCluster restarts PXC cluster.
  rpc RestartPXCCluster(RestartPXCClusterRequest) returns (RestartPXCClusterResponse);
}

message ListPXCClustersRequest {
  // Kubernetes auth.
  KubeAuth kube_auth = 1 [
    (validator.field) = {
      msg_exists: true
    }
  ];
}

message ListPXCClustersResponse {
  // Cluster represents PXC cluster information.
  message Cluster {
    // Cluster name.
    string name = 1;
    // Cluster state.
    PXCClusterState state = 2;
    // Currently running operation, if any.
    RunningOperation operation = 3;
    // Cluster parameters.
    PXCClusterParams params = 4;
    // DB cluster accessible outside of K8s cluster.
    bool exposed = 5;
  }
  // PXC clusters information.
  repeated Cluster clusters = 1;
}

message GetPXCClusterCredentialsRequest {
  // Kubernetes auth.
  KubeAuth kube_auth = 1 [
    (validator.field) = {
      msg_exists: true
    }
  ];
  // Cluster name.
  string name = 2 [
    (validator.field) = {
      string_not_empty: true
    }
  ];
}

message GetPXCClusterCredentialsResponse {
  // Connection hostname and credentials.
  PXCCredentials credentials = 1;
}

message CreatePXCClusterRequest {
  // Kubernetes auth.
  KubeAuth kube_auth = 1 [
    (validator.field) = {
      msg_exists: true
    }
  ];
  // Cluster name.
  string name = 2 [
    (validator.field) = {
      string_not_empty: true
    }
  ];
  // Cluster parameters.
  PXCClusterParams params = 3 [
    (validator.field) = {
      msg_exists: true
    }
  ];
  // PMM params. If nil do not turn on monitoring.
  PMMParams pmm = 5;
  // Make DB cluster accessible outside of K8s cluster.
  bool expose = 6;
}

message CreatePXCClusterResponse {}

message UpdatePXCClusterRequest {
  // Kubernetes auth.
  KubeAuth kube_auth = 1 [
    (validator.field) = {
      msg_exists: true
    }
  ];
  // Cluster name.
  string name = 2 [
    (validator.field) = {
      string_not_empty: true
    }
  ];
  // UpdatePXCClusterParams represents PXC cluster parameters that can be updated.
  message UpdatePXCClusterParams {
    // PXC container parameters.
    message PXC {
      // Requested compute resources.
      ComputeResources compute_resources = 1;
    }
    // ProxySQL container parameters.
    message ProxySQL {
      // Requested compute resources.
      ComputeResources compute_resources = 1;
    }
    // HAProxy container parameters.
    message HAProxy {
      // Requested compute resources.
      ComputeResources compute_resources = 1;
    }
    // Cluster size.
    int32 cluster_size = 1;
    // PXC container parameters.
    PXC pxc = 2;
    // ProxySQL container parameters.
    ProxySQL proxysql = 3;
    // Suspend cluster `pause: true`.
    bool suspend = 5;
    // Resume cluster `pause: false`.
    bool resume = 6;
    // HAProxy container parameters.
    HAProxy haproxy = 7;
  }
  // Cluster parameters.
  UpdatePXCClusterParams params = 3 [
    (validator.field) = {
      msg_exists: true
    }
  ];
}

message UpdatePXCClusterResponse {}

message DeletePXCClusterRequest {
  // Kubernetes auth.
  KubeAuth kube_auth = 1 [
    (validator.field) = {
      msg_exists: true
    }
  ];
  // Cluster name.
  string name = 2 [
    (validator.field) = {
      string_not_empty: true
    }
  ];
}

message DeletePXCClusterResponse {}

message RestartPXCClusterRequest {
  // Kubernetes auth.
  KubeAuth kube_auth = 1 [
    (validator.field) = {
      msg_exists: true
    }
  ];
  // Cluster name.
  string name = 2 [
    (validator.field) = {
      string_not_empty: true
    }
  ];
}

message RestartPXCClusterResponse {}

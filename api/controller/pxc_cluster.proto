syntax = "proto3";

package percona.platform.dbaas.controller.v1beta1;

option go_package = "controller;controllerv1beta1";

import "controller/common.proto";
import "github.com/mwitkow/go-proto-validators/validator.proto";

// PXCBackupState represents PXC backup CR state.
enum PXCBackupState {
  // PXC_BACKUP_STATE_INVALID represents unknown state.
  PXC_BACKUP_STATE_INVALID = 0;
  // PXC_BACKUP_STATE_RUNNING represents running backup (Starting, Running, FIXME check it).
  PXC_BACKUP_STATE_RUNNING = 1;
  // PXC_BACKUP_STATE_SUCCEEDED represents succeeded backup (Succeeded, FIXME check it).
  PXC_BACKUP_STATE_SUCCEEDED = 2;
  // PXC_BACKUP_STATE_FAILED represents failed backup (Failed, FIXME check it).
  PXC_BACKUP_STATE_FAILED = 3;
}

// TODO PXCRestoreState

// PXCClusterParams represents PXC cluster parameters that can be updated.
message PXCClusterParams {
  // PXC container parameters.
  message PXC {
    // Docker image used for PXC.
    string image = 3;
    // Requested compute resources.
    ComputeResources compute_resources = 1 [
      (validator.field) = {
        msg_exists: true
      }
    ];
    // Disk size in bytes.
    int64 disk_size = 2 [
      (validator.field) = {
        int_gt: 0
      }
    ];
  }
  // ProxySQL container parameters.
  message ProxySQL {
    // Docker image used for ProxySQL.
    string image = 3;
    // Requested compute resources.
    ComputeResources compute_resources = 1 [
      (validator.field) = {
        msg_exists: true
      }
    ];
    // Disk size in bytes.
    int64 disk_size = 2 [
      (validator.field) = {
        int_gt: 0
      }
    ];
  }
  // HAProxy container parameters.
  // NOTE: HAProxy does not need disk size as ProxySQL because the container does not require it.
  message HAProxy {
    // Docker image used for HAProxy.
    string image = 1;
    // Requested compute resources.
    ComputeResources compute_resources = 2;
  }
  // Cluster size.
  int32 cluster_size = 1 [
    (validator.field) = {
      int_gt: 0
    }
  ];
  // PXC container parameters.
  PXC pxc = 2 [
    (validator.field) = {
      msg_exists: true
    }
  ];
  // NOTE: Only one of fields proxysql or haproxy has to be set, we check this in the code.
  // ProxySQL container parameters.
  ProxySQL proxysql = 3;
  // HAProxy container parameters.
  HAProxy haproxy = 4;
  // Version service URL. We need to pass the URL because operators use it to fetch information about versions during upgrade.
  // We want the URL to match the one used in pmm-managed because we can use custom version service.
  string version_service_url = 5;
}

// PXCCredentials is cluster connection credentials.
message PXCCredentials {
  // PXC host.
  string host = 1;
  // PXC port.
  int32 port = 2;
  // PXC username.
  string username = 3;
  // PXC password.
  string password = 4;
}

syntax = "proto3";

package percona.platform.dbaas.controller.v1beta1;

option go_package = "controller;controllerv1beta1";

import "controller/common.proto";
import "controller/olm_types.proto";
import "github.com/mwitkow/go-proto-validators/validator.proto";

// OLMOperatorAPI provides APIs for managing OLM.
service OLMOperatorAPI {
  // InstallOLMOperator installs the OLM.
  rpc InstallOLMOperator(InstallOLMOperatorRequest) returns (InstallOLMOperatorResponse);
  // InstallOperator installs an operator usin OLM.
  rpc InstallOperator(InstallOperatorRequest) returns (InstallOperatorResponse);
  // ListInstallPlans gets the list of install plans matching the criteria.
  rpc ListInstallPlans(ListInstallPlansRequest) returns (ListInstallPlansResponse);
  // ApproveInstallPlan approves an install plan for installation or upgrade.
  rpc ApproveInstallPlan(ApproveInstallPlanRequest) returns (ApproveInstallPlanResponse);
  // ListSubscriptions lists all available subscriptions.
  rpc ListSubscriptions(ListSubscriptionsRequest) returns (ListSubscriptionsResponse);
  // GetSubscription returns a subscription by name.
  rpc GetSubscription(GetSubscriptionRequest) returns (GetSubscriptionResponse);
}

// InstallOLMOperatorRequest has the necesary fields to start an OLM operator installation.
message InstallOLMOperatorRequest {
  // Kubernetes auth.
  KubeAuth kube_auth = 1 [
    (validator.field) = {
      msg_exists: true
    }
  ];
  // Operator version to be installed.
  string version = 2;
}

// InstallOLMOperatorResponse is the OLM Operator installation response.
message InstallOLMOperatorResponse {}

// InstallOperatorRequest holds the necesary fields to request an operator installation
// usin the OLM operator.
message InstallOperatorRequest {
  // Kubernetes auth.
  KubeAuth kube_auth = 1 [
    (validator.field) = {
      msg_exists: true
    }
  ];
  // Destination namespace.
  string namespace = 2;
  // Operator's name.
  string name = 3;
  // Operator group to create.
  string operator_group = 4;
  //  Catalog source name.
  string catalog_source = 5;
  // Catalog source namespace.
  string catalog_source_namespace = 6;
  // Channel.
  string channel = 7;
  // Install approval type. Manual, Automatic.
  string install_plan_approval = 8;
  // Starting CSV.
  string starting_csv = 9;
}

// InstallOperatorResponse holds the response after installing an operator via OLM.
message InstallOperatorResponse {}

// ListInstallPlansRequest gets the list of install plans for a namespace.
message ListInstallPlansRequest {
  // Kubernetes auth.
  KubeAuth kube_auth = 1 [
    (validator.field) = {
      msg_exists: true
    }
  ];
  // Destination namespace.
  string namespace = 2;
  // Operator's name.
  string name = 3;
  // Operator group to create.
  bool not_approved_only = 4;
}

// ListInstallPlansResponse has all the install plans for the install plans list request.
message ListInstallPlansResponse {
  // InstallPlan item.
  message InstallPlan {
    // Namespace.
    string namespace = 1;
    // Name.
    string name = 2;
    // CSV.
    string csv = 3;
    // Approval: manual, automatic.
    string approval = 4;
    // Approved.
    bool approved = 5;
  }
  // List install plan items.
  repeated InstallPlan items = 1;
}

// ApproveInstallPlanRequest has the necesary fields to approve an install plan for installation or upgrade.
message ApproveInstallPlanRequest {
  // Kubernetes auth.
  KubeAuth kube_auth = 1 [
    (validator.field) = {
      msg_exists: true
    }
  ];
  // Namespace.
  string namespace = 2;
  // Name is install plan name.
  string name = 3;
  // Subscription name.
  // This is used in cases when we don't have the install plan name but we know the subscription name.
  string subscription_name = 4;
}

// ApproveInstallPlanResponse is the install plan approval response.
message ApproveInstallPlanResponse {}

// ListSubscriptionsRequest request subscriptions/
message ListSubscriptionsRequest {
  // Kubernetes auth.
  KubeAuth kube_auth = 1 [
    (validator.field) = {
      msg_exists: true
    }
  ];
}

// ListSubscriptionsRequest request subscriptions/
message GetSubscriptionRequest {
  // Kubernetes auth.
  KubeAuth kube_auth = 1 [
    (validator.field) = {
      msg_exists: true
    }
  ];
  // Namespace.
  string namespace = 2;
  // Subscription name. Usually is the operator's name.
  string name = 3;
}

// GetSubscriptionResponse response.
message GetSubscriptionResponse {
  // Items is the actual list of subscriptions.
  Subscription subscription = 1;
}

// ListSubscriptionsResponse response.
message ListSubscriptionsResponse {
  // Items is the actual list of subscriptions.
  repeated Subscription items = 1;
}

---
name: CI
on:
  push:
    branches:
      - main
    tags:
      - v[0-9]+.[0-9]+.[0-9]+*
  pull_request:

jobs:
  test:
    name: Test
    timeout-minutes: 10

    strategy:
      fail-fast: false
      matrix:
        go-version:
          - 1.16.x
        os: [ubuntu-latest]
        may-fail: [false]
        include:
          - go-version: tip
            os: ubuntu-latest
            may-fail: true

    continue-on-error: ${{ matrix.may-fail }}
    runs-on: ${{ matrix.os }}

    env:
      # no `-mod=readonly` to test PRs made by @dependabot;
      # `git diff --exit-code` step below still checks what we need
      GOFLAGS: -v

    steps:
      - name: Set up Go release
        if: matrix.go-version != 'tip'
        env:
          # to avoid error due to `go version` accepting -v flag with an argument since 1.15
          GOFLAGS: ""
        uses: percona-platform/setup-go@v2
        with:
          go-version: ${{ matrix.go-version }}

      - name: Set up Go tip
        if: matrix.go-version == 'tip'
        run: |
          git clone --depth=1 https://go.googlesource.com/go $HOME/gotip
          cd $HOME/gotip/src
          ./make.bash
          echo "GOROOT=$HOME/gotip" >> $GITHUB_ENV
          echo "$HOME/gotip/bin" >> $GITHUB_PATH

      - name: Set GO_VERSION environment variable
        env:
          # to avoid error due to `go version` accepting -v flag with an argument since 1.15
          GOFLAGS: ""
        run: |
          go version
          echo "GO_VERSION=$(go version)" >> $GITHUB_ENV

      - name: Check out code into the Go module directory
        uses: percona-platform/checkout@v2
        with:
          lfs: true

      - name: Enable Go modules cache
        uses: percona-platform/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ matrix.os }}-go-${{ matrix.go-version }}-modules-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ matrix.os }}-go-${{ matrix.go-version }}-modules-

      - name: Enable Go build cache
        uses: percona-platform/cache@v2
        with:
          path: ~/.cache/go-build
          key: ${{ matrix.os }}-go-${{ matrix.go-version }}-build-${{ github.ref }}-${{ hashFiles('**') }}
          restore-keys: |
            ${{ matrix.os }}-go-${{ matrix.go-version }}-build-${{ github.ref }}-
            ${{ matrix.os }}-go-${{ matrix.go-version }}-build-

      - name: Enable experimental Docker features for --squash flag
        run: sudo .github/workflows/enable-docker-experimental.sh

      - name: Download Go modules
        run: go mod download

      - name: Install tools
        run: make init

      - name: Initialize CI environment
        run: make ci-init

      - name: Generate API code using dev docker image
        run: |
          make gen-dev
          sudo chown -R runner:docker gen

      - name: Generate Go code
        run: make gen-code

      - name: Check that there are no source code changes
        run: |
          # Break job if any files were changed during its run (tools installation, etc), except go.sum.
          # `go mod tidy` could remove old checksums from that file, and that's okay on CI,
          # and actually expected for PRs made by @dependabot.
          # Checksums of actually used modules are checked by previous `go` subcommands.
          pushd tools && go mod tidy && git checkout go.sum
          popd        && go mod tidy && git checkout go.sum
          git diff --exit-code

      - name: Run debug commands on failure
        if: ${{ failure() }}
        run: |
          env
          go version
          go env
          pwd
          git status

  check:
    name: Check
    timeout-minutes: 5
    if: github.event_name == 'pull_request'

    strategy:
      fail-fast: false
      matrix:
        go-version:
          - 1.16.x
        os: [ubuntu-latest]
        may-fail: [false]

    continue-on-error: ${{ matrix.may-fail }}
    runs-on: ${{ matrix.os }}

    env:
      # no `-mod=readonly` to test PRs made by @dependabot;
      # `git diff --exit-code` step below still checks what we need
      GOFLAGS: -v

    steps:
      - name: Set up Go release
        if: matrix.go-version != 'tip'
        env:
          # to avoid error due to `go version` accepting -v flag with an argument since 1.15
          GOFLAGS: ""
        uses: percona-platform/setup-go@v2
        with:
          go-version: ${{ matrix.go-version }}

      - name: Set up Go tip
        if: matrix.go-version == 'tip'
        run: |
          git clone --depth=1 https://go.googlesource.com/go $HOME/gotip
          cd $HOME/gotip/src
          ./make.bash
          echo "GOROOT=$HOME/gotip" >> $GITHUB_ENV
          echo "$HOME/gotip/bin" >> $GITHUB_PATH
      - name: Set GO_VERSION environment variable
        env:
          # to avoid error due to `go version` accepting -v flag with an argument since 1.15
          GOFLAGS: ""
        run: |
          go version
          echo "GO_VERSION=$(go version)" >> $GITHUB_ENV

      - name: Check out code into the Go module directory
        uses: percona-platform/checkout@v2
        with:
          lfs: true

      - name: Enable Go modules cache
        uses: percona-platform/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ matrix.os }}-go-${{ matrix.go-version }}-modules-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ matrix.os }}-go-${{ matrix.go-version }}-modules-

      - name: Enable Go build cache
        uses: percona-platform/cache@v2
        with:
          path: ~/.cache/go-build
          key: ${{ matrix.os }}-go-${{ matrix.go-version }}-build-${{ github.ref }}-${{ hashFiles('**') }}
          restore-keys: |
            ${{ matrix.os }}-go-${{ matrix.go-version }}-build-${{ github.ref }}-
            ${{ matrix.os }}-go-${{ matrix.go-version }}-build-

      - name: Download Go modules
        run: go mod download

      - name: Install tools
        run: make init

      - name: Run required checks/linters
        env:
          REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # use GITHUB_TOKEN because only it has access to GitHub Checks API
          bin/golangci-lint run -c=.golangci-required.yml --out-format=line-number | bin/reviewdog -f=golangci-lint -name='Required checks' -reporter=github-pr-check

          # run it like that until some of those issues/PRs are resolved:
          # * https://github.com/quasilyte/go-consistent/issues/33
          # * https://github.com/golangci/golangci-lint/issues/288
          # * https://github.com/reviewdog/errorformat/pull/47 (once it is atually used by reviewdog)
          bin/go-consistent -pedantic ./...

      - name: Run optional checks/linters
        run: |
          # use ROBOT_TOKEN for better reviewer's name
          if [[ ! -z "${{ secrets.ROBOT_TOKEN }}" ]]; then
            bin/golangci-lint run --out-format=line-number | env REVIEWDOG_GITHUB_API_TOKEN=${{ secrets.ROBOT_TOKEN }} bin/reviewdog -f=golangci-lint -name='Linters' -reporter=github-pr-review
          else
            bin/golangci-lint run --out-format=line-number | env REVIEWDOG_GITHUB_API_TOKEN=${{ secrets.GITHUB_TOKEN }} bin/reviewdog -f=golangci-lint -name='Linters' -reporter=github-pr-review
          fi

      - name: Check that there are no source code changes
        run: |
          # Break job if any files were changed during its run (tools installation, etc), except go.sum.
          # `go mod tidy` could remove old checksums from that file, and that's okay on CI,
          # and actually expected for PRs made by @dependabot.
          # Checksums of actually used modules are checked by previous `go` subcommands.
          pushd tools && go mod tidy && git checkout go.sum
          popd        && go mod tidy && git checkout go.sum
          git diff --exit-code

      - name: Run debug commands on failure
        if: ${{ failure() }}
        run: |
          env
          go version
          go env
          pwd
          git status

  build:
    name: Build Docker image
    timeout-minutes: 5
    needs: test
    if: github.event_name == 'push'
    runs-on: ubuntu-latest

    env:
      # no `-mod=readonly` to test PRs made by @dependabot;
      # `git diff --exit-code` step below still checks what we need
      GOFLAGS: -v

    steps:
      - name: Check out code into the Go module directory
        uses: percona-platform/checkout@v2
        with:
          lfs: true

      - name: Enable experimental Docker features for --squash flag
        run: sudo .github/workflows/enable-docker-experimental.sh

      - name: Login in Docker registries
        run: |
          docker login -u $GITHUB_ACTOR -p ${{ secrets.GITHUB_TOKEN }} docker.pkg.github.com
          docker login -u $GITHUB_ACTOR -p ${{ secrets.GITHUB_TOKEN }} ghcr.io

      - name: Build Docker image
        run: make docker-build

      - name: Tag and push Docker images
        run: make docker-push

      - name: Check that there are no source code changes
        run: |
          # Break job if any files were changed during its run (code generation, etc), except go.sum.
          # `go mod tidy` could remove old checksums from that file, and that's okay on CI,
          # and actually expected for PRs made by @dependabot.
          # Checksums of actually used modules are checked by previous `go` subcommands.
          pushd tools && go mod tidy && git checkout go.sum
          popd        && go mod tidy && git checkout go.sum
          git diff --exit-code

      - name: Run debug commands on failure
        if: ${{ failure() }}
        run: |
          env
          go version
          go env
          pwd
          git status
